
program.debug.elf:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <crt>:

.global crt
.section .text.prologue, "ax"
.align 4
crt:
	nop
   0:	00000013          	addi	x0,x0,0
	la ra, exit
   4:	00000097          	auipc	x1,0x0
   8:	09c08093          	addi	x1,x1,156 # a0 <exit>
	la sp, _sp
   c:	00010117          	auipc	x2,0x10
  10:	ff410113          	addi	x2,x2,-12 # 10000 <_sp>
	mv s0, sp
  14:	00010413          	addi	x8,x2,0
	la gp, __global_pointer$
  18:	00001197          	auipc	x3,0x1
  1c:	04818193          	addi	x3,x3,72 # 1060 <__global_pointer$>
	li tp, 0
  20:	00000213          	addi	x4,x0,0
	li t0, 0
  24:	00000293          	addi	x5,x0,0
	li t1, 0
  28:	00000313          	addi	x6,x0,0
	li t2, 0
  2c:	00000393          	addi	x7,x0,0
	li s1, 0
  30:	00000493          	addi	x9,x0,0
	li a0, 0
  34:	00000513          	addi	x10,x0,0
	li a1, 0
  38:	00000593          	addi	x11,x0,0
	li a2, 0
  3c:	00000613          	addi	x12,x0,0
	li a3, 0
  40:	00000693          	addi	x13,x0,0
	li a4, 0
  44:	00000713          	addi	x14,x0,0
	li a5, 0
  48:	00000793          	addi	x15,x0,0
	li a6, 0
  4c:	00000813          	addi	x16,x0,0
	li a7, 0
  50:	00000893          	addi	x17,x0,0
	li s2, 0
  54:	00000913          	addi	x18,x0,0
	li s3, 0
  58:	00000993          	addi	x19,x0,0
	li s4, 0
  5c:	00000a13          	addi	x20,x0,0
	li s5, 0
  60:	00000a93          	addi	x21,x0,0
	li s6, 0
  64:	00000b13          	addi	x22,x0,0
	li s7, 0
  68:	00000b93          	addi	x23,x0,0
	li s8, 0
  6c:	00000c13          	addi	x24,x0,0
	li s9, 0
  70:	00000c93          	addi	x25,x0,0
	li s10, 0
  74:	00000d13          	addi	x26,x0,0
	li s11, 0
  78:	00000d93          	addi	x27,x0,0
	li t3, 0
  7c:	00000e13          	addi	x28,x0,0
	li t4, 0
  80:	00000e93          	addi	x29,x0,0
	li t5, 0
  84:	00000f13          	addi	x30,x0,0
	li t6, 0
  88:	00000f93          	addi	x31,x0,0
	j main
  8c:	6240006f          	jal	x0,6b0 <main>
	...

000000a0 <exit>:

.global exit
.section .text
.align 4
exit:
	la sp, _sp
  a0:	00010117          	auipc	x2,0x10
  a4:	f6010113          	addi	x2,x2,-160 # 10000 <_sp>
	sw a0, -8(sp)
  a8:	fea12c23          	sw	x10,-8(x2)
	nop
  ac:	00000013          	addi	x0,x0,0
	wfi
  b0:	10500073          	wfi

000000b4 <tj_free>:
} Header;
static Header base; //empty list to get started
static Header *freep = NULL; //start of the free list


void tj_free(void *mem) {
  b4:	fd010113          	addi	x2,x2,-48
  b8:	02112623          	sw	x1,44(x2)
  bc:	02812423          	sw	x8,40(x2)
  c0:	03010413          	addi	x8,x2,48
  c4:	fca42e23          	sw	x10,-36(x8)
	//sanity check, we don't want to free memory that's not
	//in the heap
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	fdc42703          	lw	x14,-36(x8)
  cc:	000017b7          	lui	x15,0x1
  d0:	8a078793          	addi	x15,x15,-1888 # 8a0 <heap>
  d4:	00f76a63          	bltu	x14,x15,e8 <tj_free+0x34>
  d8:	000057b7          	lui	x15,0x5
  dc:	8a078793          	addi	x15,x15,-1888 # 48a0 <base>
  e0:	fdc42703          	lw	x14,-36(x8)
  e4:	00e7f863          	bgeu	x15,x14,f4 <tj_free+0x40>
		exit(1);
  e8:	00100513          	addi	x10,x0,1
  ec:	00000097          	auipc	x1,0x0
  f0:	fb4080e7          	jalr	x1,-76(x1) # a0 <exit>

	Header *bp, *p;
	bp = (Header *)mem - 1; //point to block header
  f4:	fdc42783          	lw	x15,-36(x8)
  f8:	ff878793          	addi	x15,x15,-8
  fc:	fef42423          	sw	x15,-24(x8)
	//scan the free list to see where the current block should sit in between
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	000057b7          	lui	x15,0x5
 104:	8a87a783          	lw	x15,-1880(x15) # 48a8 <freep>
 108:	fef42623          	sw	x15,-20(x8)
 10c:	03c0006f          	jal	x0,148 <tj_free+0x94>
		// self wrapped free list with only one entry
		//                  or you are just at the very beginning/end
		if (p >= p->next && (bp > p || bp < p->next))
 110:	fec42783          	lw	x15,-20(x8)
 114:	0007a783          	lw	x15,0(x15)
 118:	fec42703          	lw	x14,-20(x8)
 11c:	02f76063          	bltu	x14,x15,13c <tj_free+0x88>
 120:	fe842703          	lw	x14,-24(x8)
 124:	fec42783          	lw	x15,-20(x8)
 128:	02e7ee63          	bltu	x15,x14,164 <tj_free+0xb0>
 12c:	fec42783          	lw	x15,-20(x8)
 130:	0007a783          	lw	x15,0(x15)
 134:	fe842703          	lw	x14,-24(x8)
 138:	02f76663          	bltu	x14,x15,164 <tj_free+0xb0>
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	fec42783          	lw	x15,-20(x8)
 140:	0007a783          	lw	x15,0(x15)
 144:	fef42623          	sw	x15,-20(x8)
 148:	fe842703          	lw	x14,-24(x8)
 14c:	fec42783          	lw	x15,-20(x8)
 150:	fce7f0e3          	bgeu	x15,x14,110 <tj_free+0x5c>
 154:	fec42783          	lw	x15,-20(x8)
 158:	0007a783          	lw	x15,0(x15)
 15c:	fe842703          	lw	x14,-24(x8)
 160:	faf778e3          	bgeu	x14,x15,110 <tj_free+0x5c>
			break; //freed block at start of end of the arena
		//we can merge the 2 free blocks if they are adjacent to each other
		//or we just can append a new entry into the free list
	if (bp + bp->size == p->next) { //join to upper nbr
 164:	fe842783          	lw	x15,-24(x8)
 168:	0047a783          	lw	x15,4(x15)
 16c:	00379793          	slli	x15,x15,0x3
 170:	fe842703          	lw	x14,-24(x8)
 174:	00f70733          	add	x14,x14,x15
 178:	fec42783          	lw	x15,-20(x8)
 17c:	0007a783          	lw	x15,0(x15)
 180:	02f71e63          	bne	x14,x15,1bc <tj_free+0x108>
		//merge if exactly adjacent
		bp->size += p->next->size;
 184:	fe842783          	lw	x15,-24(x8)
 188:	0047a703          	lw	x14,4(x15)
 18c:	fec42783          	lw	x15,-20(x8)
 190:	0007a783          	lw	x15,0(x15)
 194:	0047a783          	lw	x15,4(x15)
 198:	00f70733          	add	x14,x14,x15
 19c:	fe842783          	lw	x15,-24(x8)
 1a0:	00e7a223          	sw	x14,4(x15)
		bp->next = p->next->next;
 1a4:	fec42783          	lw	x15,-20(x8)
 1a8:	0007a783          	lw	x15,0(x15)
 1ac:	0007a703          	lw	x14,0(x15)
 1b0:	fe842783          	lw	x15,-24(x8)
 1b4:	00e7a023          	sw	x14,0(x15)
 1b8:	0140006f          	jal	x0,1cc <tj_free+0x118>
	} else
		bp->next = p->next; //insert bp after p in the linked list
 1bc:	fec42783          	lw	x15,-20(x8)
 1c0:	0007a703          	lw	x14,0(x15)
 1c4:	fe842783          	lw	x15,-24(x8)
 1c8:	00e7a023          	sw	x14,0(x15)
		//if p is freep which is base, then this will make the newly
		//allocated block point to base

	if (p + p->size == bp) { //join to lower nbr
 1cc:	fec42783          	lw	x15,-20(x8)
 1d0:	0047a783          	lw	x15,4(x15)
 1d4:	00379793          	slli	x15,x15,0x3
 1d8:	fec42703          	lw	x14,-20(x8)
 1dc:	00f707b3          	add	x15,x14,x15
 1e0:	fe842703          	lw	x14,-24(x8)
 1e4:	02f71a63          	bne	x14,x15,218 <tj_free+0x164>
		//merge if exactly adjacent
		p->size += bp->size;
 1e8:	fec42783          	lw	x15,-20(x8)
 1ec:	0047a703          	lw	x14,4(x15)
 1f0:	fe842783          	lw	x15,-24(x8)
 1f4:	0047a783          	lw	x15,4(x15)
 1f8:	00f70733          	add	x14,x14,x15
 1fc:	fec42783          	lw	x15,-20(x8)
 200:	00e7a223          	sw	x14,4(x15)
		p->next = bp->next;
 204:	fe842783          	lw	x15,-24(x8)
 208:	0007a703          	lw	x14,0(x15)
 20c:	fec42783          	lw	x15,-20(x8)
 210:	00e7a023          	sw	x14,0(x15)
 214:	0100006f          	jal	x0,224 <tj_free+0x170>
	} else //or just append to linked list
		p->next = bp; //again, if the free list is just the base
 218:	fec42783          	lw	x15,-20(x8)
 21c:	fe842703          	lw	x14,-24(x8)
 220:	00e7a023          	sw	x14,0(x15)
		//then effectively we just created a new entry
		//and make it point to the base which has a size of 0
	freep = p;
 224:	000057b7          	lui	x15,0x5
 228:	fec42703          	lw	x14,-20(x8)
 22c:	8ae7a423          	sw	x14,-1880(x15) # 48a8 <freep>
}
 230:	00000013          	addi	x0,x0,0
 234:	02c12083          	lw	x1,44(x2)
 238:	02812403          	lw	x8,40(x2)
 23c:	03010113          	addi	x2,x2,48
 240:	00008067          	jalr	x0,0(x1)

00000244 <getmoremem>:

static Header* getmoremem(unsigned int total_size) {
 244:	fd010113          	addi	x2,x2,-48
 248:	02112623          	sw	x1,44(x2)
 24c:	02812423          	sw	x8,40(x2)
 250:	03010413          	addi	x8,x2,48
 254:	fca42e23          	sw	x10,-36(x8)
	if (avail_mem < total_size) return NULL; //gg, we ran out of mem :P
 258:	000017b7          	lui	x15,0x1
 25c:	8847a783          	lw	x15,-1916(x15) # 884 <avail_mem>
 260:	fdc42703          	lw	x14,-36(x8)
 264:	00e7f663          	bgeu	x15,x14,270 <getmoremem+0x2c>
 268:	00000793          	addi	x15,x0,0
 26c:	0700006f          	jal	x0,2dc <getmoremem+0x98>
	Header* up = (Header *)next_index;
 270:	000017b7          	lui	x15,0x1
 274:	8807a783          	lw	x15,-1920(x15) # 880 <next_index>
 278:	fef42623          	sw	x15,-20(x8)
	next_index += total_size; //allocate the block
 27c:	000017b7          	lui	x15,0x1
 280:	8807a703          	lw	x14,-1920(x15) # 880 <next_index>
 284:	fdc42783          	lw	x15,-36(x8)
 288:	00f70733          	add	x14,x14,x15
 28c:	000017b7          	lui	x15,0x1
 290:	88e7a023          	sw	x14,-1920(x15) # 880 <next_index>
	avail_mem -= total_size; //deduct from avail mem;
 294:	000017b7          	lui	x15,0x1
 298:	8847a703          	lw	x14,-1916(x15) # 884 <avail_mem>
 29c:	fdc42783          	lw	x15,-36(x8)
 2a0:	40f70733          	sub	x14,x14,x15
 2a4:	000017b7          	lui	x15,0x1
 2a8:	88e7a223          	sw	x14,-1916(x15) # 884 <avail_mem>
	up->size = total_size - sizeof(Header); //set the size right
 2ac:	fdc42783          	lw	x15,-36(x8)
 2b0:	ff878713          	addi	x14,x15,-8
 2b4:	fec42783          	lw	x15,-20(x8)
 2b8:	00e7a223          	sw	x14,4(x15)
	tj_free((void *)(++up)); //append the new block to the free list first
 2bc:	fec42783          	lw	x15,-20(x8)
 2c0:	00878793          	addi	x15,x15,8
 2c4:	fef42623          	sw	x15,-20(x8)
 2c8:	fec42503          	lw	x10,-20(x8)
 2cc:	00000097          	auipc	x1,0x0
 2d0:	de8080e7          	jalr	x1,-536(x1) # b4 <tj_free>
	return freep;
 2d4:	000057b7          	lui	x15,0x5
 2d8:	8a87a783          	lw	x15,-1880(x15) # 48a8 <freep>
}
 2dc:	00078513          	addi	x10,x15,0
 2e0:	02c12083          	lw	x1,44(x2)
 2e4:	02812403          	lw	x8,40(x2)
 2e8:	03010113          	addi	x2,x2,48
 2ec:	00008067          	jalr	x0,0(x1)

000002f0 <tj_malloc>:

void *tj_malloc(unsigned int size) {
 2f0:	fd010113          	addi	x2,x2,-48
 2f4:	02112623          	sw	x1,44(x2)
 2f8:	02812423          	sw	x8,40(x2)
 2fc:	03010413          	addi	x8,x2,48
 300:	fca42e23          	sw	x10,-36(x8)
	//sanity check, so that you don't blow the memory space
	if (size > sizeof(heap)) return NULL;
 304:	fdc42703          	lw	x14,-36(x8)
 308:	000047b7          	lui	x15,0x4
 30c:	00e7f663          	bgeu	x15,x14,318 <tj_malloc+0x28>
 310:	00000793          	addi	x15,x0,0
 314:	15c0006f          	jal	x0,470 <tj_malloc+0x180>
	//we want strict word alignment just to make things easier
	//and so that we don't have improper alignment issues
	if ((size & 3) != 0) {
 318:	fdc42783          	lw	x15,-36(x8)
 31c:	0037f793          	andi	x15,x15,3
 320:	00078a63          	beq	x15,x0,334 <tj_malloc+0x44>
		size = size + 4 - (size & 3);
 324:	fdc42783          	lw	x15,-36(x8)
 328:	ffc7f793          	andi	x15,x15,-4
 32c:	00478793          	addi	x15,x15,4 # 4004 <__global_pointer$+0x2fa4>
 330:	fcf42e23          	sw	x15,-36(x8)
	}

	//we want to build a linked list of the existing blocks and free blocks
	Header *p, *prevp; //iterators
	
	unsigned int total_size = size + sizeof(Header); //need to include the header size as well
 334:	fdc42783          	lw	x15,-36(x8)
 338:	00878793          	addi	x15,x15,8
 33c:	fef42223          	sw	x15,-28(x8)
	//check the linked list
	prevp = freep;
 340:	000057b7          	lui	x15,0x5
 344:	8a87a783          	lw	x15,-1880(x15) # 48a8 <freep>
 348:	fef42423          	sw	x15,-24(x8)
	//if there's no linked list yet
	if (prevp == NULL) {
 34c:	fe842783          	lw	x15,-24(x8)
 350:	02079e63          	bne	x15,x0,38c <tj_malloc+0x9c>
		prevp = &base;
 354:	000057b7          	lui	x15,0x5
 358:	8a078793          	addi	x15,x15,-1888 # 48a0 <base>
 35c:	fef42423          	sw	x15,-24(x8)
		freep = prevp;
 360:	000057b7          	lui	x15,0x5
 364:	fe842703          	lw	x14,-24(x8)
 368:	8ae7a423          	sw	x14,-1880(x15) # 48a8 <freep>
		base.next = freep;
 36c:	000057b7          	lui	x15,0x5
 370:	8a87a703          	lw	x14,-1880(x15) # 48a8 <freep>
 374:	000057b7          	lui	x15,0x5
 378:	8a078793          	addi	x15,x15,-1888 # 48a0 <base>
 37c:	00e7a023          	sw	x14,0(x15)
		base.size = 0;
 380:	000057b7          	lui	x15,0x5
 384:	8a078793          	addi	x15,x15,-1888 # 48a0 <base>
 388:	0007a223          	sw	x0,4(x15)
	}
	//traverse through the linked list, note there's no stopping condition
	for (p = prevp->next; ;prevp = p, p = p->next) {
 38c:	fe842783          	lw	x15,-24(x8)
 390:	0007a783          	lw	x15,0(x15)
 394:	fef42623          	sw	x15,-20(x8)
		if (p->size >= size) { //big enough
 398:	fec42783          	lw	x15,-20(x8)
 39c:	0047a783          	lw	x15,4(x15)
 3a0:	fdc42703          	lw	x14,-36(x8)
 3a4:	08e7e263          	bltu	x15,x14,428 <tj_malloc+0x138>
			if (p->size == size) // exact size
 3a8:	fec42783          	lw	x15,-20(x8)
 3ac:	0047a783          	lw	x15,4(x15)
 3b0:	fdc42703          	lw	x14,-36(x8)
 3b4:	00f71c63          	bne	x14,x15,3cc <tj_malloc+0xdc>
				prevp->next = p->next; // just return that block
 3b8:	fec42783          	lw	x15,-20(x8)
 3bc:	0007a703          	lw	x14,0(x15)
 3c0:	fe842783          	lw	x15,-24(x8)
 3c4:	00e7a023          	sw	x14,0(x15)
 3c8:	0400006f          	jal	x0,408 <tj_malloc+0x118>
			else {
				p->size -= total_size; //break up the block
 3cc:	fec42783          	lw	x15,-20(x8)
 3d0:	0047a703          	lw	x14,4(x15)
 3d4:	fe442783          	lw	x15,-28(x8)
 3d8:	40f70733          	sub	x14,x14,x15
 3dc:	fec42783          	lw	x15,-20(x8)
 3e0:	00e7a223          	sw	x14,4(x15)
				p += p->size;
 3e4:	fec42783          	lw	x15,-20(x8)
 3e8:	0047a783          	lw	x15,4(x15)
 3ec:	00379793          	slli	x15,x15,0x3
 3f0:	fec42703          	lw	x14,-20(x8)
 3f4:	00f707b3          	add	x15,x14,x15
 3f8:	fef42623          	sw	x15,-20(x8)
				p->size = size;
 3fc:	fec42783          	lw	x15,-20(x8)
 400:	fdc42703          	lw	x14,-36(x8)
 404:	00e7a223          	sw	x14,4(x15)
			}
			freep = prevp;
 408:	000057b7          	lui	x15,0x5
 40c:	fe842703          	lw	x14,-24(x8)
 410:	8ae7a423          	sw	x14,-1880(x15) # 48a8 <freep>
#ifdef DEBUG
			printf("returned pointer is %i\n", (int)p + 1);
#endif
			return (void *)(++p);
 414:	fec42783          	lw	x15,-20(x8)
 418:	00878793          	addi	x15,x15,8
 41c:	fef42623          	sw	x15,-20(x8)
 420:	fec42783          	lw	x15,-20(x8)
 424:	04c0006f          	jal	x0,470 <tj_malloc+0x180>
		}
		if (p == freep) //wrapped around free list
 428:	000057b7          	lui	x15,0x5
 42c:	8a87a783          	lw	x15,-1880(x15) # 48a8 <freep>
 430:	fec42703          	lw	x14,-20(x8)
 434:	02f71263          	bne	x14,x15,458 <tj_malloc+0x168>
			if ((p = getmoremem(total_size)) == NULL) //if the heap runs out
 438:	fe442503          	lw	x10,-28(x8)
 43c:	00000097          	auipc	x1,0x0
 440:	e08080e7          	jalr	x1,-504(x1) # 244 <getmoremem>
 444:	fea42623          	sw	x10,-20(x8)
 448:	fec42783          	lw	x15,-20(x8)
 44c:	00079663          	bne	x15,x0,458 <tj_malloc+0x168>
				return NULL; //well, you got nothing left, gg
 450:	00000793          	addi	x15,x0,0
 454:	01c0006f          	jal	x0,470 <tj_malloc+0x180>
	for (p = prevp->next; ;prevp = p, p = p->next) {
 458:	fec42783          	lw	x15,-20(x8)
 45c:	fef42423          	sw	x15,-24(x8)
 460:	fec42783          	lw	x15,-20(x8)
 464:	0007a783          	lw	x15,0(x15)
 468:	fef42623          	sw	x15,-20(x8)
		if (p->size >= size) { //big enough
 46c:	f2dff06f          	jal	x0,398 <tj_malloc+0xa8>
	}
}
 470:	00078513          	addi	x10,x15,0
 474:	02c12083          	lw	x1,44(x2)
 478:	02812403          	lw	x8,40(x2)
 47c:	03010113          	addi	x2,x2,48
 480:	00008067          	jalr	x0,0(x1)

00000484 <tj_calloc>:

void *tj_calloc(unsigned int size) {
 484:	fd010113          	addi	x2,x2,-48
 488:	02112623          	sw	x1,44(x2)
 48c:	02812423          	sw	x8,40(x2)
 490:	03010413          	addi	x8,x2,48
 494:	fca42e23          	sw	x10,-36(x8)
	void *mem = tj_malloc(size);
 498:	fdc42503          	lw	x10,-36(x8)
 49c:	00000097          	auipc	x1,0x0
 4a0:	e54080e7          	jalr	x1,-428(x1) # 2f0 <tj_malloc>
 4a4:	fea42623          	sw	x10,-20(x8)
	memset(mem, 0, size);
 4a8:	fdc42603          	lw	x12,-36(x8)
 4ac:	00000593          	addi	x11,x0,0
 4b0:	fec42503          	lw	x10,-20(x8)
 4b4:	00000097          	auipc	x1,0x0
 4b8:	2b0080e7          	jalr	x1,688(x1) # 764 <memset>
	return mem;
 4bc:	fec42783          	lw	x15,-20(x8)
}
 4c0:	00078513          	addi	x10,x15,0
 4c4:	02c12083          	lw	x1,44(x2)
 4c8:	02812403          	lw	x8,40(x2)
 4cc:	03010113          	addi	x2,x2,48
 4d0:	00008067          	jalr	x0,0(x1)

000004d4 <newNode>:
  
} Node; 
  
// Function to Create A New Node 
Node* newNode(int d, int p) 
{ 
 4d4:	fd010113          	addi	x2,x2,-48
 4d8:	02112623          	sw	x1,44(x2)
 4dc:	02812423          	sw	x8,40(x2)
 4e0:	03010413          	addi	x8,x2,48
 4e4:	fca42e23          	sw	x10,-36(x8)
 4e8:	fcb42c23          	sw	x11,-40(x8)
    Node* temp = (Node*)tj_malloc(sizeof(Node)); 
 4ec:	00c00513          	addi	x10,x0,12
 4f0:	00000097          	auipc	x1,0x0
 4f4:	e00080e7          	jalr	x1,-512(x1) # 2f0 <tj_malloc>
 4f8:	fea42623          	sw	x10,-20(x8)
    temp->data = d; 
 4fc:	fec42783          	lw	x15,-20(x8)
 500:	fdc42703          	lw	x14,-36(x8)
 504:	00e7a023          	sw	x14,0(x15)
    temp->priority = p; 
 508:	fec42783          	lw	x15,-20(x8)
 50c:	fd842703          	lw	x14,-40(x8)
 510:	00e7a223          	sw	x14,4(x15)
    temp->next = NULL; 
 514:	fec42783          	lw	x15,-20(x8)
 518:	0007a423          	sw	x0,8(x15)
  
    return temp; 
 51c:	fec42783          	lw	x15,-20(x8)
} 
 520:	00078513          	addi	x10,x15,0
 524:	02c12083          	lw	x1,44(x2)
 528:	02812403          	lw	x8,40(x2)
 52c:	03010113          	addi	x2,x2,48
 530:	00008067          	jalr	x0,0(x1)

00000534 <peek>:
  
// Return the value at head 
int peek(Node** head) 
{ 
 534:	fe010113          	addi	x2,x2,-32
 538:	00812e23          	sw	x8,28(x2)
 53c:	02010413          	addi	x8,x2,32
 540:	fea42623          	sw	x10,-20(x8)
    return (*head)->data; 
 544:	fec42783          	lw	x15,-20(x8)
 548:	0007a783          	lw	x15,0(x15)
 54c:	0007a783          	lw	x15,0(x15)
} 
 550:	00078513          	addi	x10,x15,0
 554:	01c12403          	lw	x8,28(x2)
 558:	02010113          	addi	x2,x2,32
 55c:	00008067          	jalr	x0,0(x1)

00000560 <pop>:
  
// Removes the element with the 
// highest priority form the list 
void pop(Node** head) 
{ 
 560:	fd010113          	addi	x2,x2,-48
 564:	02112623          	sw	x1,44(x2)
 568:	02812423          	sw	x8,40(x2)
 56c:	03010413          	addi	x8,x2,48
 570:	fca42e23          	sw	x10,-36(x8)
    Node* temp = *head; 
 574:	fdc42783          	lw	x15,-36(x8)
 578:	0007a783          	lw	x15,0(x15)
 57c:	fef42623          	sw	x15,-20(x8)
    (*head) = (*head)->next; 
 580:	fdc42783          	lw	x15,-36(x8)
 584:	0007a783          	lw	x15,0(x15)
 588:	0087a703          	lw	x14,8(x15)
 58c:	fdc42783          	lw	x15,-36(x8)
 590:	00e7a023          	sw	x14,0(x15)
    tj_free(temp); 
 594:	fec42503          	lw	x10,-20(x8)
 598:	00000097          	auipc	x1,0x0
 59c:	b1c080e7          	jalr	x1,-1252(x1) # b4 <tj_free>
} 
 5a0:	00000013          	addi	x0,x0,0
 5a4:	02c12083          	lw	x1,44(x2)
 5a8:	02812403          	lw	x8,40(x2)
 5ac:	03010113          	addi	x2,x2,48
 5b0:	00008067          	jalr	x0,0(x1)

000005b4 <push>:
  
// Function to push according to priority 
void push(Node** head, int d, int p) 
{ 
 5b4:	fd010113          	addi	x2,x2,-48
 5b8:	02112623          	sw	x1,44(x2)
 5bc:	02812423          	sw	x8,40(x2)
 5c0:	03010413          	addi	x8,x2,48
 5c4:	fca42e23          	sw	x10,-36(x8)
 5c8:	fcb42c23          	sw	x11,-40(x8)
 5cc:	fcc42a23          	sw	x12,-44(x8)
    Node* start = (*head); 
 5d0:	fdc42783          	lw	x15,-36(x8)
 5d4:	0007a783          	lw	x15,0(x15)
 5d8:	fef42623          	sw	x15,-20(x8)
  
    // Create new Node 
    Node* temp = newNode(d, p); 
 5dc:	fd442583          	lw	x11,-44(x8)
 5e0:	fd842503          	lw	x10,-40(x8)
 5e4:	00000097          	auipc	x1,0x0
 5e8:	ef0080e7          	jalr	x1,-272(x1) # 4d4 <newNode>
 5ec:	fea42423          	sw	x10,-24(x8)
  
    // Special Case: The head of list has lesser 
    // priority than new node. So insert new 
    // node before head node and change head node. 
    if ((*head)->priority > p) { 
 5f0:	fdc42783          	lw	x15,-36(x8)
 5f4:	0007a783          	lw	x15,0(x15)
 5f8:	0047a783          	lw	x15,4(x15)
 5fc:	fd442703          	lw	x14,-44(x8)
 600:	02f75863          	bge	x14,x15,630 <push+0x7c>
  
        // Insert New Node before head 
        temp->next = *head; 
 604:	fdc42783          	lw	x15,-36(x8)
 608:	0007a703          	lw	x14,0(x15)
 60c:	fe842783          	lw	x15,-24(x8)
 610:	00e7a423          	sw	x14,8(x15)
        (*head) = temp; 
 614:	fdc42783          	lw	x15,-36(x8)
 618:	fe842703          	lw	x14,-24(x8)
 61c:	00e7a023          	sw	x14,0(x15)
        // Either at the ends of the list 
        // or at required position 
        temp->next = start->next; 
        start->next = temp; 
    } 
} 
 620:	04c0006f          	jal	x0,66c <push+0xb8>
            start = start->next; 
 624:	fec42783          	lw	x15,-20(x8)
 628:	0087a783          	lw	x15,8(x15)
 62c:	fef42623          	sw	x15,-20(x8)
        while (start->next != NULL && 
 630:	fec42783          	lw	x15,-20(x8)
 634:	0087a783          	lw	x15,8(x15)
 638:	00078c63          	beq	x15,x0,650 <push+0x9c>
               start->next->priority < p) { 
 63c:	fec42783          	lw	x15,-20(x8)
 640:	0087a783          	lw	x15,8(x15)
 644:	0047a783          	lw	x15,4(x15)
        while (start->next != NULL && 
 648:	fd442703          	lw	x14,-44(x8)
 64c:	fce7cce3          	blt	x15,x14,624 <push+0x70>
        temp->next = start->next; 
 650:	fec42783          	lw	x15,-20(x8)
 654:	0087a703          	lw	x14,8(x15)
 658:	fe842783          	lw	x15,-24(x8)
 65c:	00e7a423          	sw	x14,8(x15)
        start->next = temp; 
 660:	fec42783          	lw	x15,-20(x8)
 664:	fe842703          	lw	x14,-24(x8)
 668:	00e7a423          	sw	x14,8(x15)
} 
 66c:	00000013          	addi	x0,x0,0
 670:	02c12083          	lw	x1,44(x2)
 674:	02812403          	lw	x8,40(x2)
 678:	03010113          	addi	x2,x2,48
 67c:	00008067          	jalr	x0,0(x1)

00000680 <isEmpty>:
  
// Function to check is list is empty 
int isEmpty(Node** head) 
{ 
 680:	fe010113          	addi	x2,x2,-32
 684:	00812e23          	sw	x8,28(x2)
 688:	02010413          	addi	x8,x2,32
 68c:	fea42623          	sw	x10,-20(x8)
    return (*head) == NULL; 
 690:	fec42783          	lw	x15,-20(x8)
 694:	0007a783          	lw	x15,0(x15)
 698:	0017b793          	sltiu	x15,x15,1
 69c:	0ff7f793          	andi	x15,x15,255
} 
 6a0:	00078513          	addi	x10,x15,0
 6a4:	01c12403          	lw	x8,28(x2)
 6a8:	02010113          	addi	x2,x2,32
 6ac:	00008067          	jalr	x0,0(x1)

000006b0 <main>:
  
// Driver code 
int main() 
{ 
 6b0:	fe010113          	addi	x2,x2,-32
 6b4:	00112e23          	sw	x1,28(x2)
 6b8:	00812c23          	sw	x8,24(x2)
 6bc:	02010413          	addi	x8,x2,32
    // Create a Priority Queue 
    // 7->4->5->6 
    Node* pq = newNode(4, 1); 
 6c0:	00100593          	addi	x11,x0,1
 6c4:	00400513          	addi	x10,x0,4
 6c8:	00000097          	auipc	x1,0x0
 6cc:	e0c080e7          	jalr	x1,-500(x1) # 4d4 <newNode>
 6d0:	00050793          	addi	x15,x10,0
 6d4:	fef42623          	sw	x15,-20(x8)
    push(&pq, 5, 2); 
 6d8:	fec40793          	addi	x15,x8,-20
 6dc:	00200613          	addi	x12,x0,2
 6e0:	00500593          	addi	x11,x0,5
 6e4:	00078513          	addi	x10,x15,0
 6e8:	00000097          	auipc	x1,0x0
 6ec:	ecc080e7          	jalr	x1,-308(x1) # 5b4 <push>
    push(&pq, 6, 3); 
 6f0:	fec40793          	addi	x15,x8,-20
 6f4:	00300613          	addi	x12,x0,3
 6f8:	00600593          	addi	x11,x0,6
 6fc:	00078513          	addi	x10,x15,0
 700:	00000097          	auipc	x1,0x0
 704:	eb4080e7          	jalr	x1,-332(x1) # 5b4 <push>
    push(&pq, 7, 0); 
 708:	fec40793          	addi	x15,x8,-20
 70c:	00000613          	addi	x12,x0,0
 710:	00700593          	addi	x11,x0,7
 714:	00078513          	addi	x10,x15,0
 718:	00000097          	auipc	x1,0x0
 71c:	e9c080e7          	jalr	x1,-356(x1) # 5b4 <push>
  
    while (!isEmpty(&pq)) { 
 720:	0140006f          	jal	x0,734 <main+0x84>
#ifdef DEBUG
        printf("%d ", peek(&pq)); 
#endif
        pop(&pq); 
 724:	fec40793          	addi	x15,x8,-20
 728:	00078513          	addi	x10,x15,0
 72c:	00000097          	auipc	x1,0x0
 730:	e34080e7          	jalr	x1,-460(x1) # 560 <pop>
    while (!isEmpty(&pq)) { 
 734:	fec40793          	addi	x15,x8,-20
 738:	00078513          	addi	x10,x15,0
 73c:	00000097          	auipc	x1,0x0
 740:	f44080e7          	jalr	x1,-188(x1) # 680 <isEmpty>
 744:	00050793          	addi	x15,x10,0
 748:	fc078ee3          	beq	x15,x0,724 <main+0x74>
    } 
  
    return 0; 
 74c:	00000793          	addi	x15,x0,0
}
 750:	00078513          	addi	x10,x15,0
 754:	01c12083          	lw	x1,28(x2)
 758:	01812403          	lw	x8,24(x2)
 75c:	02010113          	addi	x2,x2,32
 760:	00008067          	jalr	x0,0(x1)

00000764 <memset>:
 764:	00f00313          	addi	x6,x0,15
 768:	00050713          	addi	x14,x10,0
 76c:	02c37e63          	bgeu	x6,x12,7a8 <memset+0x44>
 770:	00f77793          	andi	x15,x14,15
 774:	0a079063          	bne	x15,x0,814 <memset+0xb0>
 778:	08059263          	bne	x11,x0,7fc <memset+0x98>
 77c:	ff067693          	andi	x13,x12,-16
 780:	00f67613          	andi	x12,x12,15
 784:	00e686b3          	add	x13,x13,x14
 788:	00b72023          	sw	x11,0(x14)
 78c:	00b72223          	sw	x11,4(x14)
 790:	00b72423          	sw	x11,8(x14)
 794:	00b72623          	sw	x11,12(x14)
 798:	01070713          	addi	x14,x14,16
 79c:	fed766e3          	bltu	x14,x13,788 <memset+0x24>
 7a0:	00061463          	bne	x12,x0,7a8 <memset+0x44>
 7a4:	00008067          	jalr	x0,0(x1)
 7a8:	40c306b3          	sub	x13,x6,x12
 7ac:	00269693          	slli	x13,x13,0x2
 7b0:	00000297          	auipc	x5,0x0
 7b4:	005686b3          	add	x13,x13,x5
 7b8:	00c68067          	jalr	x0,12(x13)
 7bc:	00b70723          	sb	x11,14(x14)
 7c0:	00b706a3          	sb	x11,13(x14)
 7c4:	00b70623          	sb	x11,12(x14)
 7c8:	00b705a3          	sb	x11,11(x14)
 7cc:	00b70523          	sb	x11,10(x14)
 7d0:	00b704a3          	sb	x11,9(x14)
 7d4:	00b70423          	sb	x11,8(x14)
 7d8:	00b703a3          	sb	x11,7(x14)
 7dc:	00b70323          	sb	x11,6(x14)
 7e0:	00b702a3          	sb	x11,5(x14)
 7e4:	00b70223          	sb	x11,4(x14)
 7e8:	00b701a3          	sb	x11,3(x14)
 7ec:	00b70123          	sb	x11,2(x14)
 7f0:	00b700a3          	sb	x11,1(x14)
 7f4:	00b70023          	sb	x11,0(x14)
 7f8:	00008067          	jalr	x0,0(x1)
 7fc:	0ff5f593          	andi	x11,x11,255
 800:	00859693          	slli	x13,x11,0x8
 804:	00d5e5b3          	or	x11,x11,x13
 808:	01059693          	slli	x13,x11,0x10
 80c:	00d5e5b3          	or	x11,x11,x13
 810:	f6dff06f          	jal	x0,77c <memset+0x18>
 814:	00279693          	slli	x13,x15,0x2
 818:	00000297          	auipc	x5,0x0
 81c:	005686b3          	add	x13,x13,x5
 820:	00008293          	addi	x5,x1,0
 824:	fa0680e7          	jalr	x1,-96(x13)
 828:	00028093          	addi	x1,x5,0 # 818 <memset+0xb4>
 82c:	ff078793          	addi	x15,x15,-16
 830:	40f70733          	sub	x14,x14,x15
 834:	00f60633          	add	x12,x12,x15
 838:	f6c378e3          	bgeu	x6,x12,7a8 <memset+0x44>
 83c:	f3dff06f          	jal	x0,778 <memset+0x14>
	...

Disassembly of section .sdata:

00000880 <next_index>:
static void* next_index = (void *)heap; //the next place to be allocated
 880:	08a0                	c.addi4spn	x8,x2,88
	...

00000884 <avail_mem>:
static unsigned int avail_mem = sizeof(heap); //the most CONTIGUOUS memory available
 884:	4000                	c.lw	x8,0(x8)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
	nop
   0:	2041                	c.jal	80 <crt+0x80>
   2:	0000                	c.unimp
	la ra, exit
   4:	7200                	c.flw	f8,32(x12)
   6:	7369                	c.lui	x6,0xffffa
   8:	01007663          	bgeu	x0,x16,14 <crt+0x14>
	la sp, _sp
   c:	0016                	c.slli	x0,0x5
   e:	0000                	c.unimp
  10:	1004                	c.addi4spn	x9,x2,32
  12:	7205                	c.lui	x4,0xfffe1
	mv s0, sp
  14:	3376                	c.fldsp	f6,376(x2)
  16:	6932                	c.flwsp	f18,12(x2)
	la gp, __global_pointer$
  18:	7032                	c.flwsp	f0,44(x2)
  1a:	5f30                	c.lw	x12,120(x14)
  1c:	326d                	c.jal	fffff9c6 <_sp+0xfffef9c6>
  1e:	3070                	c.fld	f12,224(x8)
	...

Disassembly of section .comment:

00000000 <.comment>:
	nop
   0:	3a434347          	fmsub.d	f6,f6,f4,f7,rmm
	la ra, exit
   4:	2820                	c.fld	f8,80(x8)
   6:	29554e47          	fmsub.s	f28,f10,f21,f5,rmm
   a:	3920                	c.fld	f8,112(x10)
	la sp, _sp
   c:	322e                	c.fldsp	f4,232(x2)
   e:	302e                	c.fldsp	f0,232(x2)
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
	nop
   0:	0114                	c.addi4spn	x13,x2,128
   2:	0000                	c.unimp
	la ra, exit
   4:	001c0003          	lb	x0,1(x24)
   8:	0000                	c.unimp
   a:	0101                	c.addi	x2,0
	la sp, _sp
   c:	000d0efb          	0xd0efb
  10:	0101                	c.addi	x2,0
  12:	0101                	c.addi	x2,0
	mv s0, sp
  14:	0000                	c.unimp
  16:	0100                	c.addi4spn	x8,x2,128
	la gp, __global_pointer$
  18:	0000                	c.unimp
  1a:	0001                	c.addi	x0,0
  1c:	2e747263          	bgeu	x8,x7,300 <tj_malloc+0x10>
	li tp, 0
  20:	00000073          	ecall
	li t0, 0
  24:	0000                	c.unimp
  26:	0500                	c.addi4spn	x8,x2,640
	li t1, 0
  28:	0002                	c.slli64	x0
  2a:	0000                	c.unimp
	li t2, 0
  2c:	0300                	c.addi4spn	x8,x2,384
  2e:	010d                	c.addi	x2,3
	li s1, 0
  30:	04090103          	lb	x2,64(x18)
	li a0, 0
  34:	0100                	c.addi4spn	x8,x2,128
  36:	08090103          	lb	x2,128(x18)
	li a1, 0
  3a:	0100                	c.addi4spn	x8,x2,128
	li a2, 0
  3c:	08090103          	lb	x2,128(x18)
	li a3, 0
  40:	0100                	c.addi4spn	x8,x2,128
  42:	04090103          	lb	x2,64(x18)
	li a4, 0
  46:	0100                	c.addi4spn	x8,x2,128
	li a5, 0
  48:	08090103          	lb	x2,128(x18)
	li a6, 0
  4c:	0100                	c.addi4spn	x8,x2,128
  4e:	04090103          	lb	x2,64(x18)
	li a7, 0
  52:	0100                	c.addi4spn	x8,x2,128
	li s2, 0
  54:	04090103          	lb	x2,64(x18)
	li s3, 0
  58:	0100                	c.addi4spn	x8,x2,128
  5a:	04090103          	lb	x2,64(x18)
	li s4, 0
  5e:	0100                	c.addi4spn	x8,x2,128
	li s5, 0
  60:	04090103          	lb	x2,64(x18)
	li s6, 0
  64:	0100                	c.addi4spn	x8,x2,128
  66:	04090103          	lb	x2,64(x18)
	li s7, 0
  6a:	0100                	c.addi4spn	x8,x2,128
	li s8, 0
  6c:	04090103          	lb	x2,64(x18)
	li s9, 0
  70:	0100                	c.addi4spn	x8,x2,128
  72:	04090103          	lb	x2,64(x18)
	li s10, 0
  76:	0100                	c.addi4spn	x8,x2,128
	li s11, 0
  78:	04090103          	lb	x2,64(x18)
	li t3, 0
  7c:	0100                	c.addi4spn	x8,x2,128
  7e:	04090103          	lb	x2,64(x18)
	li t4, 0
  82:	0100                	c.addi4spn	x8,x2,128
	li t5, 0
  84:	04090103          	lb	x2,64(x18)
	li t6, 0
  88:	0100                	c.addi4spn	x8,x2,128
  8a:	04090103          	lb	x2,64(x18)
	j main
  8e:	0100                	c.addi4spn	x8,x2,128
  90:	04090103          	lb	x2,64(x18)
  94:	0100                	c.addi4spn	x8,x2,128
  96:	04090103          	lb	x2,64(x18)
  9a:	0100                	c.addi4spn	x8,x2,128
  9c:	04090103          	lb	x2,64(x18)
	la sp, _sp
  a0:	0100                	c.addi4spn	x8,x2,128
  a2:	04090103          	lb	x2,64(x18)
  a6:	0100                	c.addi4spn	x8,x2,128
	sw a0, -8(sp)
  a8:	04090103          	lb	x2,64(x18)
	nop
  ac:	0100                	c.addi4spn	x8,x2,128
  ae:	04090103          	lb	x2,64(x18)
	wfi
  b2:	0100                	c.addi4spn	x8,x2,128
void tj_free(void *mem) {
  b4:	04090103          	lb	x2,64(x18)
  b8:	0100                	c.addi4spn	x8,x2,128
  ba:	04090103          	lb	x2,64(x18)
  be:	0100                	c.addi4spn	x8,x2,128
  c0:	04090103          	lb	x2,64(x18)
  c4:	0100                	c.addi4spn	x8,x2,128
  c6:	04090103          	lb	x2,64(x18)
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  ca:	0100                	c.addi4spn	x8,x2,128
  cc:	04090103          	lb	x2,64(x18)
  d0:	0100                	c.addi4spn	x8,x2,128
  d2:	04090103          	lb	x2,64(x18)
  d6:	0100                	c.addi4spn	x8,x2,128
  d8:	04090103          	lb	x2,64(x18)
  dc:	0100                	c.addi4spn	x8,x2,128
  de:	04090103          	lb	x2,64(x18)
  e2:	0100                	c.addi4spn	x8,x2,128
  e4:	04090103          	lb	x2,64(x18)
		exit(1);
  e8:	0100                	c.addi4spn	x8,x2,128
  ea:	04090103          	lb	x2,64(x18)
  ee:	0100                	c.addi4spn	x8,x2,128
  f0:	0409                	c.addi	x8,2
  f2:	0000                	c.unimp
	bp = (Header *)mem - 1; //point to block header
  f4:	0101                	c.addi	x2,0
  f6:	0500                	c.addi4spn	x8,x2,640
  f8:	a002                	c.fsdsp	f0,0(x2)
  fa:	0000                	c.unimp
  fc:	0300                	c.addi4spn	x8,x2,384
  fe:	01030133          	add	x2,x6,x16
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 102:	0809                	c.addi	x16,2
 104:	0100                	c.addi4spn	x8,x2,128
 106:	04090103          	lb	x2,64(x18)
 10a:	0100                	c.addi4spn	x8,x2,128
 10c:	04090103          	lb	x2,64(x18)
		if (p >= p->next && (bp > p || bp < p->next))
 110:	0100                	c.addi4spn	x8,x2,128
 112:	0409                	c.addi	x8,2
 114:	0000                	c.unimp
 116:	0101                	c.addi	x2,0
 118:	000005eb          	0x5eb
 11c:	01160003          	lb	x0,17(x12)
 120:	0000                	c.unimp
 122:	0101                	c.addi	x2,0
 124:	000d0efb          	0xd0efb
 128:	0101                	c.addi	x2,0
 12a:	0101                	c.addi	x2,0
 12c:	0000                	c.unimp
 12e:	0100                	c.addi4spn	x8,x2,128
 130:	0000                	c.unimp
 132:	7401                	c.lui	x8,0xfffe0
 134:	7365                	c.lui	x6,0xffff9
 136:	5f74                	c.lw	x13,124(x14)
 138:	7270                	c.flw	f12,100(x12)
 13a:	0073676f          	jal	x14,36940 <_sp+0x26940>
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13e:	7273752f          	0x7273752f
 142:	2f6d752f          	0x2f6d752f
 146:	6972                	c.flwsp	f18,28(x2)
 148:	2d766373          	csrrsi	x6,0x2d7,12
 14c:	2e39                	c.jal	46a <tj_malloc+0x17a>
 14e:	2f32                	c.fldsp	f30,264(x2)
 150:	696c                	c.flw	f11,84(x10)
 152:	2f62                	c.fldsp	f30,24(x2)
 154:	2f636367          	0x2f636367
 158:	6972                	c.flwsp	f18,28(x2)
 15a:	36766373          	csrrsi	x6,0x367,12
 15e:	2d34                	c.fld	f13,88(x10)
 160:	6e75                	c.lui	x28,0x1d
 162:	776f6e6b          	0x776f6e6b
	if (bp + bp->size == p->next) { //join to upper nbr
 166:	2d6e                	c.fldsp	f26,216(x2)
 168:	6c65                	c.lui	x24,0x19
 16a:	2f66                	c.fldsp	f30,88(x2)
 16c:	2e39                	c.jal	48a <tj_calloc+0x6>
 16e:	2e32                	c.fldsp	f28,264(x2)
 170:	2f30                	c.fld	f12,88(x14)
 172:	6e69                	c.lui	x28,0x1a
 174:	64756c63          	bltu	x10,x7,7cc <memset+0x68>
 178:	0065                	c.addi	x0,25
 17a:	7273752f          	0x7273752f
 17e:	2f6d752f          	0x2f6d752f
 182:	6972                	c.flwsp	f18,28(x2)
		bp->size += p->next->size;
 184:	2d766373          	csrrsi	x6,0x2d7,12
 188:	2e39                	c.jal	4a6 <tj_calloc+0x22>
 18a:	2f32                	c.fldsp	f30,264(x2)
 18c:	6972                	c.flwsp	f18,28(x2)
 18e:	36766373          	csrrsi	x6,0x367,12
 192:	2d34                	c.fld	f13,88(x10)
 194:	6e75                	c.lui	x28,0x1d
 196:	776f6e6b          	0x776f6e6b
 19a:	2d6e                	c.fldsp	f26,216(x2)
 19c:	6c65                	c.lui	x24,0x19
 19e:	2f66                	c.fldsp	f30,88(x2)
 1a0:	6e69                	c.lui	x28,0x1a
 1a2:	64756c63          	bltu	x10,x7,7fa <memset+0x96>
		bp->next = p->next->next;
 1a6:	2f65                	c.jal	95e <heap+0xbe>
 1a8:	00737973          	csrrci	x18,0x7,6
 1ac:	7273752f          	0x7273752f
 1b0:	2f6d752f          	0x2f6d752f
 1b4:	6972                	c.flwsp	f18,28(x2)
 1b6:	2d766373          	csrrsi	x6,0x2d7,12
 1ba:	2e39                	c.jal	4d8 <newNode+0x4>
		bp->next = p->next; //insert bp after p in the linked list
 1bc:	2f32                	c.fldsp	f30,264(x2)
 1be:	6972                	c.flwsp	f18,28(x2)
 1c0:	36766373          	csrrsi	x6,0x367,12
 1c4:	2d34                	c.fld	f13,88(x10)
 1c6:	6e75                	c.lui	x28,0x1d
 1c8:	776f6e6b          	0x776f6e6b
	if (p + p->size == bp) { //join to lower nbr
 1cc:	2d6e                	c.fldsp	f26,216(x2)
 1ce:	6c65                	c.lui	x24,0x19
 1d0:	2f66                	c.fldsp	f30,88(x2)
 1d2:	6e69                	c.lui	x28,0x1a
 1d4:	64756c63          	bltu	x10,x7,82c <memset+0xc8>
 1d8:	0065                	c.addi	x0,25
 1da:	7400                	c.flw	f8,40(x8)
 1dc:	5f6a                	c.lwsp	x30,184(x2)
 1de:	616d                	c.addi16sp	x2,240
 1e0:	6c6c                	c.flw	f11,92(x8)
 1e2:	682e636f          	jal	x6,e6864 <_sp+0xd6864>
 1e6:	0100                	c.addi4spn	x8,x2,128
		p->size += bp->size;
 1e8:	0000                	c.unimp
 1ea:	7270                	c.flw	f12,100(x12)
 1ec:	6f69                	c.lui	x30,0x1a
 1ee:	6972                	c.flwsp	f18,28(x2)
 1f0:	7974                	c.flw	f13,116(x10)
 1f2:	715f 6575 6575      	0x65756575715f
 1f8:	632e                	c.flwsp	f6,200(x2)
 1fa:	0100                	c.addi4spn	x8,x2,128
 1fc:	0000                	c.unimp
 1fe:	64647473          	csrrci	x8,0x646,8
 202:	6665                	c.lui	x12,0x19
		p->next = bp->next;
 204:	682e                	c.flwsp	f16,200(x2)
 206:	0200                	c.addi4spn	x8,x2,256
 208:	0000                	c.unimp
 20a:	745f 7079 7365      	0x73657079745f
 210:	682e                	c.flwsp	f16,200(x2)
 212:	0300                	c.addi4spn	x8,x2,384
 214:	0000                	c.unimp
 216:	6572                	c.flwsp	f10,28(x2)
		p->next = bp; //again, if the free list is just the base
 218:	6e65                	c.lui	x28,0x19
 21a:	2e74                	c.fld	f13,216(x12)
 21c:	0068                	c.addi4spn	x10,x2,12
 21e:	6c000003          	lb	x0,1728(x0) # 6c0 <main+0x10>
 222:	2e6b636f          	jal	x6,b6508 <_sp+0xa6508>
	freep = p;
 226:	0068                	c.addi4spn	x10,x2,12
 228:	73000003          	lb	x0,1840(x0) # 730 <main+0x80>
 22c:	6474                	c.flw	f13,76(x8)
 22e:	696c                	c.flw	f11,84(x10)
}
 230:	2e62                	c.fldsp	f28,24(x2)
 232:	0068                	c.addi4spn	x10,x2,12
 234:	0004                	0x4
 236:	0000                	c.unimp
 238:	1905                	c.addi	x18,-31
 23a:	0500                	c.addi4spn	x8,x2,640
 23c:	b402                	c.fsdsp	f0,40(x2)
 23e:	0000                	c.unimp
 240:	0300                	c.addi4spn	x8,x2,384
 242:	0129                	c.addi	x2,10
static Header* getmoremem(unsigned int total_size) {
 244:	0505                	c.addi	x10,1
 246:	14090303          	lb	x6,320(x18)
 24a:	0100                	c.addi4spn	x8,x2,128
 24c:	2205                	c.jal	36c <tj_malloc+0x7c>
 24e:	0200                	c.addi4spn	x8,x2,256
 250:	0104                	c.addi4spn	x9,x2,128
 252:	10090003          	lb	x0,256(x18)
 256:	0100                	c.addi4spn	x8,x2,128
	if (avail_mem < total_size) return NULL; //gg, we ran out of mem :P
 258:	1905                	c.addi	x18,-31
 25a:	0200                	c.addi4spn	x8,x2,256
 25c:	0104                	c.addi4spn	x9,x2,128
 25e:	08090003          	lb	x0,128(x18)
 262:	0100                	c.addi4spn	x8,x2,128
 264:	0305                	c.addi	x6,1
 266:	08090103          	lb	x2,128(x18)
 26a:	0100                	c.addi4spn	x8,x2,128
 26c:	0505                	c.addi	x10,1
 26e:	0c090303          	lb	x6,192(x18)
	Header* up = (Header *)next_index;
 272:	0100                	c.addi4spn	x8,x2,128
 274:	0905                	c.addi	x18,1
 276:	0c090203          	lb	x4,192(x18)
 27a:	0100                	c.addi4spn	x8,x2,128
	next_index += total_size; //allocate the block
 27c:	0205                	c.addi	x4,1
 27e:	0c090003          	lb	x0,192(x18)
 282:	0100                	c.addi4spn	x8,x2,128
 284:	0d05                	c.addi	x26,1
 286:	04090303          	lb	x6,64(x18)
 28a:	0100                	c.addi4spn	x8,x2,128
 28c:	0605                	c.addi	x12,1
 28e:	08090003          	lb	x0,128(x18)
 292:	0100                	c.addi4spn	x8,x2,128
	avail_mem -= total_size; //deduct from avail mem;
 294:	1405                	c.addi	x8,-31
 296:	0200                	c.addi4spn	x8,x2,256
 298:	0104                	c.addi4spn	x9,x2,128
 29a:	08090003          	lb	x0,128(x18)
 29e:	0100                	c.addi4spn	x8,x2,128
 2a0:	2805                	c.jal	2d0 <getmoremem+0x8c>
 2a2:	0200                	c.addi4spn	x8,x2,256
 2a4:	0204                	c.addi4spn	x9,x2,256
 2a6:	0c090003          	lb	x0,192(x18)
 2aa:	0100                	c.addi4spn	x8,x2,128
	up->size = total_size - sizeof(Header); //set the size right
 2ac:	1f05                	c.addi	x30,-31
 2ae:	0200                	c.addi4spn	x8,x2,256
 2b0:	0204                	c.addi4spn	x9,x2,256
 2b2:	08090003          	lb	x0,128(x18)
 2b6:	0100                	c.addi4spn	x8,x2,128
 2b8:	2f05                	c.jal	9e8 <heap+0x148>
 2ba:	0200                	c.addi4spn	x8,x2,256
	tj_free((void *)(++up)); //append the new block to the free list first
 2bc:	0204                	c.addi4spn	x9,x2,256
 2be:	08097d03          	0x8097d03
 2c2:	0100                	c.addi4spn	x8,x2,128
 2c4:	0205                	c.addi	x4,1
 2c6:	0200                	c.addi4spn	x8,x2,256
 2c8:	0104                	c.addi4spn	x9,x2,128
 2ca:	0c090003          	lb	x0,192(x18)
 2ce:	0100                	c.addi4spn	x8,x2,128
 2d0:	2405                	c.jal	4f0 <newNode+0x1c>
 2d2:	0200                	c.addi4spn	x8,x2,256
	return freep;
 2d4:	0304                	c.addi4spn	x9,x2,384
 2d6:	0c090003          	lb	x0,192(x18)
 2da:	0100                	c.addi4spn	x8,x2,128
}
 2dc:	1205                	c.addi	x4,-31
 2de:	0200                	c.addi4spn	x8,x2,256
 2e0:	0304                	c.addi4spn	x9,x2,384
 2e2:	08090003          	lb	x0,128(x18)
 2e6:	0100                	c.addi4spn	x8,x2,128
 2e8:	0d05                	c.addi	x26,1
 2ea:	08090703          	lb	x14,128(x18)
 2ee:	0100                	c.addi4spn	x8,x2,128
void *tj_malloc(unsigned int size) {
 2f0:	0905                	c.addi	x18,1
 2f2:	08090003          	lb	x0,128(x18)
 2f6:	0100                	c.addi4spn	x8,x2,128
 2f8:	1805                	c.addi	x16,-31
 2fa:	0c090003          	lb	x0,192(x18)
 2fe:	0100                	c.addi4spn	x8,x2,128
 300:	0505                	c.addi	x10,1
 302:	08090003          	lb	x0,128(x18)
	if (size > sizeof(heap)) return NULL;
 306:	0100                	c.addi4spn	x8,x2,128
 308:	0c05                	c.addi	x24,1
 30a:	04090203          	lb	x4,64(x18)
 30e:	0100                	c.addi4spn	x8,x2,128
 310:	1005                	c.addi	x0,-31
 312:	08090003          	lb	x0,128(x18)
 316:	0100                	c.addi4spn	x8,x2,128
	if ((size & 3) != 0) {
 318:	1605                	c.addi	x12,-31
 31a:	08090003          	lb	x0,128(x18)
 31e:	0100                	c.addi4spn	x8,x2,128
 320:	0c05                	c.addi	x24,1
 322:	04090003          	lb	x0,64(x18)
		size = size + 4 - (size & 3);
 326:	0100                	c.addi4spn	x8,x2,128
 328:	0f05                	c.addi	x30,1
 32a:	0c090103          	lb	x2,192(x18)
 32e:	0100                	c.addi4spn	x8,x2,128
 330:	1505                	c.addi	x10,-31
 332:	08090003          	lb	x0,128(x18)
	unsigned int total_size = size + sizeof(Header); //need to include the header size as well
 336:	0100                	c.addi4spn	x8,x2,128
 338:	0c05                	c.addi	x24,1
 33a:	04090003          	lb	x0,64(x18)
 33e:	0100                	c.addi4spn	x8,x2,128
	prevp = freep;
 340:	0f05                	c.addi	x30,1
 342:	0c090203          	lb	x4,192(x18)
 346:	0100                	c.addi4spn	x8,x2,128
 348:	0c05                	c.addi	x24,1
 34a:	08090003          	lb	x0,128(x18)
	if (prevp == NULL) {
 34e:	0100                	c.addi4spn	x8,x2,128
 350:	0b05                	c.addi	x22,1
 352:	08090403          	lb	x8,128(x18)
		prevp = &base;
 356:	0100                	c.addi4spn	x8,x2,128
 358:	0805                	c.addi	x16,1
 35a:	08090003          	lb	x0,128(x18)
 35e:	0100                	c.addi4spn	x8,x2,128
		freep = prevp;
 360:	0505                	c.addi	x10,1
 362:	0c090003          	lb	x0,192(x18)
 366:	0100                	c.addi4spn	x8,x2,128
 368:	0b05                	c.addi	x22,1
 36a:	08090203          	lb	x4,128(x18)
		base.next = freep;
 36e:	0100                	c.addi4spn	x8,x2,128
 370:	1005                	c.addi	x0,-31
 372:	08090003          	lb	x0,128(x18)
 376:	0100                	c.addi4spn	x8,x2,128
 378:	0b05                	c.addi	x22,1
 37a:	08090003          	lb	x0,128(x18)
 37e:	0100                	c.addi4spn	x8,x2,128
		base.size = 0;
 380:	0f05                	c.addi	x30,1
 382:	0c090103          	lb	x2,192(x18)
 386:	0100                	c.addi4spn	x8,x2,128
 388:	0b05                	c.addi	x22,1
 38a:	08090003          	lb	x0,128(x18)
	for (p = prevp->next; ;prevp = p, p = p->next) {
 38e:	0100                	c.addi4spn	x8,x2,128
 390:	0c090203          	lb	x4,192(x18)
 394:	0100                	c.addi4spn	x8,x2,128
 396:	0805                	c.addi	x16,1
		if (p->size >= size) { //big enough
 398:	0c090303          	lb	x6,192(x18)
 39c:	0100                	c.addi4spn	x8,x2,128
 39e:	0105                	c.addi	x2,1
 3a0:	0c090103          	lb	x2,192(x18)
 3a4:	0100                	c.addi4spn	x8,x2,128
 3a6:	3405                	c.jal	fffffdc6 <_sp+0xfffefdc6>
			if (p->size == size) // exact size
 3a8:	14090203          	lb	x4,320(x18)
 3ac:	0100                	c.addi4spn	x8,x2,128
 3ae:	1005                	c.addi	x0,-31
 3b0:	14090103          	lb	x2,320(x18)
 3b4:	0100                	c.addi4spn	x8,x2,128
 3b6:	0505                	c.addi	x10,1
				prevp->next = p->next; // just return that block
 3b8:	08090003          	lb	x0,128(x18)
 3bc:	0100                	c.addi4spn	x8,x2,128
 3be:	2505                	c.jal	9de <heap+0x13e>
 3c0:	0200                	c.addi4spn	x8,x2,256
 3c2:	0104                	c.addi4spn	x9,x2,128
 3c4:	08090003          	lb	x0,128(x18)
 3c8:	0100                	c.addi4spn	x8,x2,128
 3ca:	0a05                	c.addi	x20,1
				p->size -= total_size; //break up the block
 3cc:	08090103          	lb	x2,128(x18)
 3d0:	0100                	c.addi4spn	x8,x2,128
 3d2:	0d05                	c.addi	x26,1
 3d4:	0c090103          	lb	x2,192(x18)
 3d8:	0100                	c.addi4spn	x8,x2,128
 3da:	0c05                	c.addi	x24,1
 3dc:	18090103          	lb	x2,384(x18)
 3e0:	0100                	c.addi4spn	x8,x2,128
 3e2:	1805                	c.addi	x16,-31
				p += p->size;
 3e4:	18090103          	lb	x2,384(x18)
 3e8:	0100                	c.addi4spn	x8,x2,128
 3ea:	0b05                	c.addi	x22,1
 3ec:	08090003          	lb	x0,128(x18)
 3f0:	0100                	c.addi4spn	x8,x2,128
 3f2:	0205                	c.addi	x4,1
 3f4:	08090103          	lb	x2,128(x18)
 3f8:	0100                	c.addi4spn	x8,x2,128
 3fa:	0905                	c.addi	x18,1
				p->size = size;
 3fc:	18090103          	lb	x2,384(x18)
 400:	0100                	c.addi4spn	x8,x2,128
 402:	0105                	c.addi	x2,1
 404:	08090103          	lb	x2,128(x18)
			freep = prevp;
 408:	0100                	c.addi4spn	x8,x2,128
 40a:	2405                	c.jal	62a <push+0x76>
 40c:	14090203          	lb	x4,320(x18)
 410:	0100                	c.addi4spn	x8,x2,128
 412:	0505                	c.addi	x10,1
			return (void *)(++p);
 414:	14090203          	lb	x4,320(x18)
 418:	0100                	c.addi4spn	x8,x2,128
 41a:	2205                	c.jal	53a <peek+0x6>
 41c:	0200                	c.addi4spn	x8,x2,256
 41e:	0104                	c.addi4spn	x9,x2,128
 420:	0c090003          	lb	x0,192(x18)
 424:	0100                	c.addi4spn	x8,x2,128
 426:	0c05                	c.addi	x24,1
		if (p == freep) //wrapped around free list
 428:	08090303          	lb	x6,128(x18)
 42c:	0100                	c.addi4spn	x8,x2,128
 42e:	0505                	c.addi	x10,1
 430:	08090003          	lb	x0,128(x18)
 434:	0100                	c.addi4spn	x8,x2,128
 436:	1305                	c.addi	x6,-31
			if ((p = getmoremem(total_size)) == NULL) //if the heap runs out
 438:	04090103          	lb	x2,64(x18)
 43c:	0100                	c.addi4spn	x8,x2,128
 43e:	0805                	c.addi	x16,1
 440:	08090003          	lb	x0,128(x18)
 444:	0100                	c.addi4spn	x8,x2,128
 446:	0f05                	c.addi	x30,1
 448:	08090603          	lb	x12,128(x18)
 44c:	0100                	c.addi4spn	x8,x2,128
 44e:	0805                	c.addi	x16,1
				return NULL; //well, you got nothing left, gg
 450:	0c090203          	lb	x4,192(x18)
 454:	0100                	c.addi4spn	x8,x2,128
 456:	0505                	c.addi	x10,1
	for (p = prevp->next; ;prevp = p, p = p->next) {
 458:	0c090203          	lb	x4,192(x18)
 45c:	0100                	c.addi4spn	x8,x2,128
 45e:	0905                	c.addi	x18,1
 460:	08090103          	lb	x2,128(x18)
 464:	0100                	c.addi4spn	x8,x2,128
 466:	0c090103          	lb	x2,192(x18)
 46a:	0100                	c.addi4spn	x8,x2,128
		if (p->size >= size) { //big enough
 46c:	0d05                	c.addi	x26,1
 46e:	0c090103          	lb	x2,192(x18)
}
 472:	0100                	c.addi4spn	x8,x2,128
 474:	14090103          	lb	x2,320(x18)
 478:	0100                	c.addi4spn	x8,x2,128
 47a:	0905                	c.addi	x18,1
 47c:	0c090303          	lb	x6,192(x18)
 480:	0100                	c.addi4spn	x8,x2,128
 482:	0805                	c.addi	x16,1
void *tj_calloc(unsigned int size) {
 484:	0c090103          	lb	x2,192(x18)
 488:	0100                	c.addi4spn	x8,x2,128
 48a:	0605                	c.addi	x12,1
 48c:	08090003          	lb	x0,128(x18)
 490:	0100                	c.addi4spn	x8,x2,128
 492:	0905                	c.addi	x18,1
 494:	08090103          	lb	x2,128(x18)
	void *mem = tj_malloc(size);
 498:	0100                	c.addi4spn	x8,x2,128
 49a:	0705                	c.addi	x14,1
 49c:	08090003          	lb	x0,128(x18)
 4a0:	0100                	c.addi4spn	x8,x2,128
 4a2:	1405                	c.addi	x8,-31
 4a4:	08090103          	lb	x2,128(x18)
	memset(mem, 0, size);
 4a8:	0100                	c.addi4spn	x8,x2,128
 4aa:	1105                	c.addi	x2,-31
 4ac:	08090003          	lb	x0,128(x18)
 4b0:	0100                	c.addi4spn	x8,x2,128
 4b2:	0d05                	c.addi	x26,1
 4b4:	0c090203          	lb	x4,192(x18)
 4b8:	0100                	c.addi4spn	x8,x2,128
 4ba:	0b05                	c.addi	x22,1
	return mem;
 4bc:	18090103          	lb	x2,384(x18)
}
 4c0:	0100                	c.addi4spn	x8,x2,128
 4c2:	0705                	c.addi	x14,1
 4c4:	08090003          	lb	x0,128(x18)
 4c8:	0100                	c.addi4spn	x8,x2,128
 4ca:	0d05                	c.addi	x26,1
 4cc:	10090103          	lb	x2,256(x18)
 4d0:	0100                	c.addi4spn	x8,x2,128
 4d2:	0a05                	c.addi	x20,1
{ 
 4d4:	0c090203          	lb	x4,192(x18)
 4d8:	0100                	c.addi4spn	x8,x2,128
 4da:	0b05                	c.addi	x22,1
 4dc:	0c090403          	lb	x8,192(x18)
 4e0:	0100                	c.addi4spn	x8,x2,128
 4e2:	0905                	c.addi	x18,1
 4e4:	14090203          	lb	x4,320(x18)
 4e8:	0100                	c.addi4spn	x8,x2,128
 4ea:	0605                	c.addi	x12,1
    Node* temp = (Node*)tj_malloc(sizeof(Node)); 
 4ec:	08090003          	lb	x0,128(x18)
 4f0:	0100                	c.addi4spn	x8,x2,128
 4f2:	0d05                	c.addi	x26,1
 4f4:	08090103          	lb	x2,128(x18)
 4f8:	0100                	c.addi4spn	x8,x2,128
 4fa:	0705                	c.addi	x14,1
    temp->data = d; 
 4fc:	10090003          	lb	x0,256(x18)
 500:	0100                	c.addi4spn	x8,x2,128
 502:	0c05                	c.addi	x24,1
 504:	08090103          	lb	x2,128(x18)
    temp->priority = p; 
 508:	0100                	c.addi4spn	x8,x2,128
 50a:	1f05                	c.addi	x30,-31
 50c:	08096f03          	0x8096f03
 510:	0100                	c.addi4spn	x8,x2,128
 512:	2605                	c.jal	832 <memset+0xce>
    temp->next = NULL; 
 514:	08090003          	lb	x0,128(x18)
 518:	0100                	c.addi4spn	x8,x2,128
 51a:	0605                	c.addi	x12,1
    return temp; 
 51c:	0c090103          	lb	x2,192(x18)
} 
 520:	0100                	c.addi4spn	x8,x2,128
 522:	0105                	c.addi	x2,1
 524:	04091203          	lh	x4,64(x18)
 528:	0100                	c.addi4spn	x8,x2,128
 52a:	2405                	c.jal	74a <main+0x9a>
 52c:	14090203          	lb	x4,320(x18)
 530:	0100                	c.addi4spn	x8,x2,128
 532:	0e05                	c.addi	x28,1
{ 
 534:	14090103          	lb	x2,320(x18)
 538:	0100                	c.addi4spn	x8,x2,128
 53a:	0205                	c.addi	x4,1
 53c:	10090103          	lb	x2,256(x18)
 540:	0100                	c.addi4spn	x8,x2,128
 542:	0905                	c.addi	x18,1
    return (*head)->data; 
 544:	14090103          	lb	x2,320(x18)
 548:	0100                	c.addi4spn	x8,x2,128
 54a:	0105                	c.addi	x2,1
 54c:	04090103          	lb	x2,64(x18)
} 
 550:	0100                	c.addi4spn	x8,x2,128
 552:	0204                	c.addi4spn	x9,x2,256
 554:	097f9103          	lh	x2,151(x31)
 558:	0014                	0x14
 55a:	0501                	c.addi	x10,0
 55c:	0319                	c.addi	x6,6
 55e:	0901                	c.addi	x18,0
{ 
 560:	0018                	0x18
 562:	0501                	c.addi	x10,0
 564:	0310                	c.addi4spn	x12,x2,384
 566:	0901                	c.addi	x18,0
 568:	0010                	0x10
 56a:	0501                	c.addi	x10,0
 56c:	0314                	c.addi4spn	x13,x2,384
 56e:	0901                	c.addi	x18,0
 570:	000c                	0xc
 572:	0501                	c.addi	x10,0
    Node* temp = *head; 
 574:	0310                	c.addi4spn	x12,x2,384
 576:	0901                	c.addi	x18,0
 578:	000c                	0xc
 57a:	0501                	c.addi	x10,0
 57c:	030c                	c.addi4spn	x11,x2,384
 57e:	0902                	c.slli64	x18
    (*head) = (*head)->next; 
 580:	0008                	0x8
 582:	0501                	c.addi	x10,0
 584:	0301                	c.addi	x6,0
 586:	0901                	c.addi	x18,0
 588:	0004                	0x4
 58a:	0301                	c.addi	x6,0
 58c:	0904                	c.addi4spn	x9,x2,144
 58e:	0014                	0x14
 590:	0501                	c.addi	x10,0
 592:	030d                	c.addi	x6,3
    tj_free(temp); 
 594:	0901                	c.addi	x18,0
 596:	0010                	0x10
 598:	0501                	c.addi	x10,0
 59a:	09000313          	addi	x6,x0,144
 59e:	0008                	0x8
} 
 5a0:	0501                	c.addi	x10,0
 5a2:	0301                	c.addi	x6,0
 5a4:	0901                	c.addi	x18,0
 5a6:	0004                	0x4
 5a8:	0301                	c.addi	x6,0
 5aa:	0905                	c.addi	x18,1
 5ac:	0010                	0x10
 5ae:	0501                	c.addi	x10,0
 5b0:	0901030b          	0x901030b
{ 
 5b4:	0014                	0x14
 5b6:	0501                	c.addi	x10,0
 5b8:	0310                	c.addi4spn	x12,x2,384
 5ba:	0901                	c.addi	x18,0
 5bc:	000c                	0xc
 5be:	0501                	c.addi	x10,0
 5c0:	0316                	c.slli	x6,0x5
 5c2:	0900                	c.addi4spn	x8,x2,144
 5c4:	0008                	0x8
 5c6:	0501                	c.addi	x10,0
 5c8:	030d                	c.addi	x6,3
 5ca:	0900                	c.addi4spn	x8,x2,144
 5cc:	0004                	0x4
 5ce:	0501                	c.addi	x10,0
    Node* start = (*head); 
 5d0:	0305                	c.addi	x6,1
 5d2:	0901                	c.addi	x18,0
 5d4:	0008                	0x8
 5d6:	0501                	c.addi	x10,0
 5d8:	0301                	c.addi	x6,0
 5da:	0901                	c.addi	x18,0
    Node* temp = newNode(d, p); 
 5dc:	000c                	0xc
 5de:	0301                	c.addi	x6,0
 5e0:	0904                	c.addi4spn	x9,x2,144
 5e2:	0014                	0x14
 5e4:	0501                	c.addi	x10,0
 5e6:	0901030b          	0x901030b
 5ea:	001c                	0x1c
 5ec:	0501                	c.addi	x10,0
 5ee:	0312                	c.slli	x6,0x4
    if ((*head)->priority > p) { 
 5f0:	000c0903          	lb	x18,0(x24) # 19000 <_sp+0x9000>
 5f4:	0501                	c.addi	x10,0
 5f6:	030a                	c.slli	x6,0x2
 5f8:	0905                	c.addi	x18,1
 5fa:	0014                	0x14
 5fc:	0501                	c.addi	x10,0
 5fe:	0310                	c.addi4spn	x12,x2,384
 600:	0900                	c.addi4spn	x8,x2,144
 602:	0008                	0x8
        temp->next = *head; 
 604:	0501                	c.addi	x10,0
 606:	0308                	c.addi4spn	x10,x2,384
 608:	0900                	c.addi4spn	x8,x2,144
 60a:	0004                	0x4
 60c:	0501                	c.addi	x10,0
 60e:	0316                	c.slli	x6,0x5
 610:	00080903          	lb	x18,0(x16)
        (*head) = temp; 
 614:	0501                	c.addi	x10,0
 616:	0314                	c.addi4spn	x13,x2,384
 618:	0900                	c.addi4spn	x8,x2,144
 61a:	0008                	0x8
 61c:	0501                	c.addi	x10,0
 61e:	0311                	c.addi	x6,4
} 
 620:	0901                	c.addi	x18,0
 622:	0008                	0x8
            start = start->next; 
 624:	0501                	c.addi	x10,0
 626:	0301                	c.addi	x6,0
 628:	0910                	c.addi4spn	x12,x2,144
 62a:	000c                	0xc
 62c:	0501                	c.addi	x10,0
 62e:	09780313          	addi	x6,x16,151
        while (start->next != NULL && 
 632:	0004                	0x4
 634:	0501                	c.addi	x10,0
 636:	0315                	c.addi	x6,5
 638:	097e                	c.slli	x18,0x1f
 63a:	000c                	0xc
               start->next->priority < p) { 
 63c:	0501                	c.addi	x10,0
 63e:	0900030f          	0x900030f
 642:	0008                	0x8
 644:	0501                	c.addi	x10,0
 646:	0015                	c.addi	x0,5
        while (start->next != NULL && 
 648:	0402                	c.slli64	x8
 64a:	0301                	c.addi	x6,0
 64c:	0901                	c.addi	x18,0
 64e:	0004                	0x4
        temp->next = start->next; 
 650:	0501                	c.addi	x10,0
 652:	0402001b          	0x402001b
 656:	0301                	c.addi	x6,0
 658:	0900                	c.addi4spn	x8,x2,144
 65a:	0008                	0x8
 65c:	0501                	c.addi	x10,0
 65e:	0024                	c.addi4spn	x9,x2,8
        start->next = temp; 
 660:	0402                	c.slli64	x8
 662:	0301                	c.addi	x6,0
 664:	097f                	0x97f
 666:	0004                	0x4
 668:	0501                	c.addi	x10,0
 66a:	0907031b          	0x907031b
} 
 66e:	0008                	0x8
 670:	0501                	c.addi	x10,0
 672:	0314                	c.addi4spn	x13,x2,384
 674:	0900                	c.addi4spn	x8,x2,144
 676:	0008                	0x8
 678:	0501                	c.addi	x10,0
 67a:	0315                	c.addi	x6,5
 67c:	0901                	c.addi	x18,0
 67e:	0008                	0x8
{ 
 680:	0501                	c.addi	x10,0
 682:	0301                	c.addi	x6,0
 684:	0902                	c.slli64	x18
 686:	000c                	0xc
 688:	0301                	c.addi	x6,0
 68a:	0904                	c.addi4spn	x9,x2,144
 68c:	0014                	0x14
 68e:	0501                	c.addi	x10,0
    return (*head) == NULL; 
 690:	030d                	c.addi	x6,3
 692:	0901                	c.addi	x18,0
 694:	0010                	0x10
 696:	0501                	c.addi	x10,0
 698:	0314                	c.addi4spn	x13,x2,384
 69a:	0900                	c.addi4spn	x8,x2,144
 69c:	0008                	0x8
 69e:	0501                	c.addi	x10,0
} 
 6a0:	0301                	c.addi	x6,0
 6a2:	0901                	c.addi	x18,0
 6a4:	0008                	0x8
 6a6:	0301                	c.addi	x6,0
 6a8:	0904                	c.addi4spn	x9,x2,144
 6aa:	0010                	0x10
 6ac:	0501                	c.addi	x10,0
 6ae:	0310                	c.addi4spn	x12,x2,384
{ 
 6b0:	00100903          	lb	x18,1(x0) # 1 <crt+0x1>
 6b4:	0501                	c.addi	x10,0
 6b6:	0900030b          	0x900030b
 6ba:	0014                	0x14
 6bc:	0501                	c.addi	x10,0
 6be:	0305                	c.addi	x6,1
    Node* pq = newNode(4, 1); 
 6c0:	0901                	c.addi	x18,0
 6c2:	0004                	0x4
 6c4:	0301                	c.addi	x6,0
 6c6:	0901                	c.addi	x18,0
 6c8:	0018                	0x18
 6ca:	0301                	c.addi	x6,0
 6cc:	0901                	c.addi	x18,0
 6ce:	0018                	0x18
 6d0:	0501                	c.addi	x10,0
 6d2:	0902030b          	0x902030b
 6d6:	0018                	0x18
    push(&pq, 5, 2); 
 6d8:	0501                	c.addi	x10,0
 6da:	0309                	c.addi	x6,2
 6dc:	0904                	c.addi4spn	x9,x2,144
 6de:	0004                	0x4
 6e0:	0501                	c.addi	x10,0
 6e2:	030d                	c.addi	x6,3
 6e4:	097c                	c.addi4spn	x15,x2,156
 6e6:	0010                	0x10
 6e8:	0501                	c.addi	x10,0
 6ea:	0900030b          	0x900030b
 6ee:	0014                	0x14
    push(&pq, 6, 3); 
 6f0:	0501                	c.addi	x10,0
 6f2:	030c                	c.addi4spn	x11,x2,384
 6f4:	00040907          	0x40907
 6f8:	0501                	c.addi	x10,0
 6fa:	0301                	c.addi	x6,0
 6fc:	0901                	c.addi	x18,0
 6fe:	0004                	0x4
 700:	0901                	c.addi	x18,0
 702:	0014                	0x14
 704:	0100                	c.addi4spn	x8,x2,128
 706:	01              	Address 0x0000000000000706 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
	nop
   0:	001e                	c.slli	x0,0x7
   2:	0000                	c.unimp
	la ra, exit
   4:	0002                	c.slli64	x0
   6:	0000                	c.unimp
   8:	0000                	c.unimp
   a:	0104                	c.addi4spn	x9,x2,128
	...
	la gp, __global_pointer$
  18:	0006                	c.slli	x0,0x1
  1a:	0000                	c.unimp
  1c:	00000027          	0x27
	li tp, 0
  20:	8001                	c.srli64	x8
  22:	00000c73          	0xc73
	li t0, 0
  26:	0004                	0x4
	li t1, 0
  28:	0012                	c.slli	x0,0x4
  2a:	0000                	c.unimp
	li t2, 0
  2c:	0104                	c.addi4spn	x9,x2,128
  2e:	0052                	c.slli	x0,0x14
	li s1, 0
  30:	0000                	c.unimp
  32:	fc0c                	c.fsw	f11,56(x8)
	li a0, 0
  34:	0002                	c.slli64	x0
  36:	0600                	c.addi4spn	x8,x2,768
	li a1, 0
  38:	0000                	c.unimp
  3a:	b400                	c.fsd	f8,40(x8)
	li a2, 0
  3c:	0000                	c.unimp
  3e:	b000                	c.fsd	f8,32(x8)
	li a3, 0
  40:	0006                	c.slli	x0,0x1
  42:	1800                	c.addi4spn	x8,x2,48
	li a4, 0
  44:	0001                	c.addi	x0,0
  46:	0200                	c.addi4spn	x8,x2,256
	li a5, 0
  48:	0601                	c.addi	x12,0
  4a:	0380                	c.addi4spn	x8,x2,448
	li a6, 0
  4c:	0000                	c.unimp
  4e:	0102                	c.slli64	x2
	li a7, 0
  50:	7e08                	c.flw	f10,56(x12)
  52:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
	li s2, 0
  56:	0502                	c.slli64	x10
	li s3, 0
  58:	03a4                	c.addi4spn	x9,x2,456
  5a:	0000                	c.unimp
	li s4, 0
  5c:	0202                	c.slli64	x4
  5e:	00028107          	0x28107
	li s5, 0
  62:	0200                	c.addi4spn	x8,x2,256
	li s6, 0
  64:	0504                	c.addi4spn	x9,x2,640
  66:	0152                	c.slli	x2,0x14
	li s7, 0
  68:	0000                	c.unimp
  6a:	0402                	c.slli64	x8
	li s8, 0
  6c:	00010107          	0x10107
	li s9, 0
  70:	0200                	c.addi4spn	x8,x2,256
  72:	0508                	c.addi4spn	x10,x2,640
	li s10, 0
  74:	014d                	c.addi	x2,19
  76:	0000                	c.unimp
	li s11, 0
  78:	0802                	c.slli64	x16
  7a:	0000fc07          	0xfc07
	li t3, 0
  7e:	0300                	c.addi4spn	x8,x2,384
	li t4, 0
  80:	0504                	c.addi4spn	x9,x2,640
  82:	6e69                	c.lui	x28,0x1a
	li t5, 0
  84:	0074                	c.addi4spn	x13,x2,12
  86:	0402                	c.slli64	x8
	li t6, 0
  88:	00010607          	0x10607
	j main
  8c:	0200                	c.addi4spn	x8,x2,256
  8e:	0410                	c.addi4spn	x12,x2,512
  90:	0318                	c.addi4spn	x14,x2,384
  92:	0000                	c.unimp
  94:	cd04                	c.sw	x9,24(x10)
  96:	0002                	c.slli64	x0
  98:	0300                	c.addi4spn	x8,x2,384
  9a:	015e                	c.slli	x2,0x17
  9c:	00006417          	auipc	x8,0x6
	la sp, _sp
  a0:	0500                	c.addi4spn	x8,x2,640
  a2:	0351                	c.addi	x6,20
  a4:	0000                	c.unimp
  a6:	2e04                	c.fld	f9,24(x12)
	sw a0, -8(sp)
  a8:	410e                	c.lwsp	x2,192(x2)
  aa:	0000                	c.unimp
	nop
  ac:	0500                	c.addi4spn	x8,x2,640
  ae:	046a                	c.slli	x8,0x1a
	wfi
  b0:	0000                	c.unimp
  b2:	7404                	c.flw	f9,40(x8)
void tj_free(void *mem) {
  b4:	410e                	c.lwsp	x2,192(x2)
  b6:	0000                	c.unimp
  b8:	0500                	c.addi4spn	x8,x2,640
  ba:	04f9                	c.addi	x9,30
  bc:	0000                	c.unimp
  be:	9304                	0x9304
  c0:	00005d17          	auipc	x26,0x5
  c4:	0600                	c.addi4spn	x8,x2,768
  c6:	0404                	c.addi4spn	x9,x2,512
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	03a5                	c.addi	x7,9
  ca:	00c5                	c.addi	x1,17
  cc:	0000                	c.unimp
  ce:	0002be07          	fld	f28,0(x5)
  d2:	0400                	c.addi4spn	x8,x2,512
  d4:	00720ca7          	0x720ca7
  d8:	0000                	c.unimp
  da:	00025807          	0x25807
  de:	0400                	c.addi4spn	x8,x2,512
  e0:	13a8                	c.addi4spn	x10,x2,488
  e2:	00c5                	c.addi	x1,17
  e4:	0000                	c.unimp
  e6:	0800                	c.addi4spn	x8,x2,16
		exit(1);
  e8:	002c                	c.addi4spn	x11,x2,8
  ea:	0000                	c.unimp
  ec:	00d5                	c.addi	x1,21
  ee:	0000                	c.unimp
  f0:	6409                	c.lui	x8,0x2
  f2:	0000                	c.unimp
	bp = (Header *)mem - 1; //point to block header
  f4:	0300                	c.addi4spn	x8,x2,384
  f6:	0a00                	c.addi4spn	x8,x2,272
  f8:	0408                	c.addi4spn	x10,x2,512
  fa:	09a2                	c.slli	x19,0x8
  fc:	00f9                	c.addi	x1,30
  fe:	0000                	c.unimp
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	0004540b          	0x4540b
 104:	0400                	c.addi4spn	x8,x2,512
 106:	07a4                	c.addi4spn	x9,x2,968
 108:	005d                	c.addi	x0,23
 10a:	0000                	c.unimp
 10c:	0b00                	c.addi4spn	x8,x2,400
 10e:	045c                	c.addi4spn	x15,x2,516
		if (p >= p->next && (bp > p || bp < p->next))
 110:	0000                	c.unimp
 112:	a904                	c.fsd	f9,16(x10)
 114:	a305                	c.j	634 <push+0x80>
 116:	0000                	c.unimp
 118:	0400                	c.addi4spn	x8,x2,512
 11a:	0500                	c.addi4spn	x8,x2,640
 11c:	03cc                	c.addi4spn	x11,x2,452
 11e:	0000                	c.unimp
 120:	aa04                	c.fsd	f9,16(x12)
 122:	0000d503          	lhu	x10,0(x1)
 126:	0c00                	c.addi4spn	x8,x2,528
 128:	0504                	c.addi4spn	x9,x2,640
 12a:	000004a7          	0x4a7
 12e:	1605                	c.addi	x12,-31
 130:	4819                	c.li	x16,6
 132:	0000                	c.unimp
 134:	0500                	c.addi4spn	x8,x2,640
 136:	036c                	c.addi4spn	x11,x2,396
 138:	0000                	c.unimp
 13a:	0c06                	c.slli	x24,0x1
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	5d0d                	c.li	x26,-29
 13e:	0000                	c.unimp
 140:	0500                	c.addi4spn	x8,x2,640
 142:	0000021b          	0x21b
 146:	2305                	c.jal	666 <push+0xb2>
 148:	0001131b          	0x1131b
 14c:	0d00                	c.addi4spn	x8,x2,656
 14e:	022c                	c.addi4spn	x11,x2,264
 150:	0000                	c.unimp
 152:	0518                	c.addi4spn	x14,x2,640
 154:	0834                	c.addi4spn	x13,x2,24
 156:	0185                	c.addi	x3,1
 158:	0000                	c.unimp
 15a:	0003ed0b          	0x3ed0b
 15e:	0500                	c.addi4spn	x8,x2,640
 160:	1336                	c.slli	x6,0x2d
 162:	0185                	c.addi	x3,1
	if (bp + bp->size == p->next) { //join to upper nbr
 164:	0000                	c.unimp
 166:	0e00                	c.addi4spn	x8,x2,784
 168:	6b5f 0500 0737      	0x73705006b5f
 16e:	005d                	c.addi	x0,23
 170:	0000                	c.unimp
 172:	0b04                	c.addi4spn	x9,x2,400
 174:	0000043f 5d0b3705 	0x5d0b37050000043f
 17c:	0000                	c.unimp
 17e:	0800                	c.addi4spn	x8,x2,16
 180:	0002150b          	0x2150b
		bp->size += p->next->size;
 184:	0500                	c.addi4spn	x8,x2,640
 186:	005d1437          	lui	x8,0x5d1
 18a:	0000                	c.unimp
 18c:	0b0c                	c.addi4spn	x11,x2,400
 18e:	04dc                	c.addi4spn	x15,x2,580
 190:	0000                	c.unimp
 192:	3705                	c.jal	b2 <exit+0x12>
 194:	00005d1b          	0x5d1b
 198:	1000                	c.addi4spn	x8,x2,32
 19a:	5f0e                	c.lwsp	x30,224(x2)
 19c:	0078                	c.addi4spn	x14,x2,12
 19e:	3805                	c.jal	fffff9ce <_sp+0xfffef9ce>
 1a0:	00018b0b          	0x18b0b
		bp->next = p->next->next;
 1a4:	1400                	c.addi4spn	x8,x2,544
 1a6:	0f00                	c.addi4spn	x8,x2,912
 1a8:	2b04                	c.fld	f9,16(x14)
 1aa:	0001                	c.addi	x0,0
 1ac:	0800                	c.addi4spn	x8,x2,16
 1ae:	00000107          	0x107
 1b2:	0000019b          	0x19b
 1b6:	6409                	c.lui	x8,0x2
 1b8:	0000                	c.unimp
 1ba:	0000                	c.unimp
		bp->next = p->next; //insert bp after p in the linked list
 1bc:	0d00                	c.addi4spn	x8,x2,656
 1be:	00000253          	fadd.s	f4,f0,f0,rne
 1c2:	0524                	c.addi4spn	x9,x2,648
 1c4:	083c                	c.addi4spn	x15,x2,24
 1c6:	021e                	c.slli	x4,0x7
 1c8:	0000                	c.unimp
 1ca:	0001440b          	0x1440b
	if (p + p->size == bp) { //join to lower nbr
 1ce:	0500                	c.addi4spn	x8,x2,640
 1d0:	093e                	c.slli	x18,0xf
 1d2:	005d                	c.addi	x0,23
 1d4:	0000                	c.unimp
 1d6:	0b00                	c.addi4spn	x8,x2,400
 1d8:	0472                	c.slli	x8,0x1c
 1da:	0000                	c.unimp
 1dc:	3f05                	c.jal	10c <tj_free+0x58>
 1de:	5d09                	c.li	x26,-30
 1e0:	0000                	c.unimp
 1e2:	0400                	c.addi4spn	x8,x2,512
 1e4:	0001670b          	0x1670b
		p->size += bp->size;
 1e8:	0500                	c.addi4spn	x8,x2,640
 1ea:	0940                	c.addi4spn	x8,x2,148
 1ec:	005d                	c.addi	x0,23
 1ee:	0000                	c.unimp
 1f0:	0b08                	c.addi4spn	x10,x2,400
 1f2:	0579                	c.addi	x10,30
 1f4:	0000                	c.unimp
 1f6:	4105                	c.li	x2,1
 1f8:	5d09                	c.li	x26,-30
 1fa:	0000                	c.unimp
 1fc:	0c00                	c.addi4spn	x8,x2,528
 1fe:	00032b0b          	0x32b0b
 202:	0500                	c.addi4spn	x8,x2,640
		p->next = bp->next;
 204:	0942                	c.slli	x18,0x10
 206:	005d                	c.addi	x0,23
 208:	0000                	c.unimp
 20a:	0b10                	c.addi4spn	x12,x2,400
 20c:	02e9                	c.addi	x5,26
 20e:	0000                	c.unimp
 210:	4305                	c.li	x6,1
 212:	5d09                	c.li	x26,-30
 214:	0000                	c.unimp
 216:	1400                	c.addi4spn	x8,x2,544
		p->next = bp; //again, if the free list is just the base
 218:	0004e10b          	0x4e10b
 21c:	0500                	c.addi4spn	x8,x2,640
 21e:	0944                	c.addi4spn	x9,x2,148
 220:	005d                	c.addi	x0,23
 222:	0000                	c.unimp
	freep = p;
 224:	0b18                	c.addi4spn	x14,x2,400
 226:	03ae                	c.slli	x7,0xb
 228:	0000                	c.unimp
 22a:	4505                	c.li	x10,1
 22c:	5d09                	c.li	x26,-30
 22e:	0000                	c.unimp
}
 230:	1c00                	c.addi4spn	x8,x2,560
 232:	0005240b          	0x5240b
 236:	0500                	c.addi4spn	x8,x2,640
 238:	0946                	c.slli	x18,0x11
 23a:	005d                	c.addi	x0,23
 23c:	0000                	c.unimp
 23e:	0020                	c.addi4spn	x8,x2,8
 240:	7610                	c.flw	f12,40(x12)
 242:	0001                	c.addi	x0,0
static Header* getmoremem(unsigned int total_size) {
 244:	0800                	c.addi4spn	x8,x2,16
 246:	0501                	c.addi	x10,0
 248:	0263084f          	fnmadd.d	f16,f6,f6,f0,rne
 24c:	0000                	c.unimp
 24e:	0002080b          	0x2080b
 252:	0500                	c.addi4spn	x8,x2,640
 254:	0a50                	c.addi4spn	x12,x2,276
 256:	00000263          	beq	x0,x0,25a <getmoremem+0x16>
	if (avail_mem < total_size) return NULL; //gg, we ran out of mem :P
 25a:	0b00                	c.addi4spn	x8,x2,400
 25c:	00000033          	add	x0,x0,x0
 260:	5105                	c.li	x2,-31
 262:	6309                	c.lui	x6,0x2
 264:	0002                	c.slli64	x0
 266:	8000                	0x8000
 268:	9411                	c.srai	x8,0x24
 26a:	0004                	0x4
 26c:	0500                	c.addi4spn	x8,x2,640
 26e:	01070a53          	fadd.s	f20,f14,f16,rne
	Header* up = (Header *)next_index;
 272:	0000                	c.unimp
 274:	0100                	c.addi4spn	x8,x2,128
 276:	b111                	c.j	fffffe7a <_sp+0xfffefe7a>
 278:	0001                	c.addi	x0,0
 27a:	0500                	c.addi4spn	x8,x2,640
	next_index += total_size; //allocate the block
 27c:	0a56                	c.slli	x20,0x15
 27e:	00000107          	0x107
 282:	0104                	c.addi4spn	x9,x2,128
 284:	0800                	c.addi4spn	x8,x2,16
 286:	0105                	c.addi	x2,1
 288:	0000                	c.unimp
 28a:	00000273          	0x273
 28e:	6409                	c.lui	x8,0x2
 290:	0000                	c.unimp
 292:	1f00                	c.addi4spn	x8,x2,944
	avail_mem -= total_size; //deduct from avail mem;
 294:	1000                	c.addi4spn	x8,x2,32
 296:	0334                	c.addi4spn	x13,x2,392
 298:	0000                	c.unimp
 29a:	0190                	c.addi4spn	x12,x2,192
 29c:	6205                	c.lui	x4,0x1
 29e:	b608                	c.fsd	f10,40(x12)
 2a0:	0002                	c.slli64	x0
 2a2:	0b00                	c.addi4spn	x8,x2,400
 2a4:	03ed                	c.addi	x7,27
 2a6:	0000                	c.unimp
 2a8:	6305                	c.lui	x6,0x1
 2aa:	b612                	c.fsdsp	f4,296(x2)
	up->size = total_size - sizeof(Header); //set the size right
 2ac:	0002                	c.slli64	x0
 2ae:	0000                	c.unimp
 2b0:	0004050b          	0x4050b
 2b4:	0500                	c.addi4spn	x8,x2,640
 2b6:	0664                	c.addi4spn	x9,x2,780
 2b8:	005d                	c.addi	x0,23
 2ba:	0000                	c.unimp
	tj_free((void *)(++up)); //append the new block to the free list first
 2bc:	0b04                	c.addi4spn	x9,x2,400
 2be:	0210                	c.addi4spn	x12,x2,256
 2c0:	0000                	c.unimp
 2c2:	6605                	c.lui	x12,0x1
 2c4:	bc09                	c.j	fffffcd6 <_sp+0xfffefcd6>
 2c6:	0002                	c.slli64	x0
 2c8:	0800                	c.addi4spn	x8,x2,16
 2ca:	0001760b          	0x1760b
 2ce:	0500                	c.addi4spn	x8,x2,640
 2d0:	021e1e67          	0x21e1e67
	return freep;
 2d4:	0000                	c.unimp
 2d6:	0088                	c.addi4spn	x10,x2,64
 2d8:	0273040f          	0x273040f
}
 2dc:	0000                	c.unimp
 2de:	cc08                	c.sw	x10,24(x8)
 2e0:	0002                	c.slli64	x0
 2e2:	cc00                	c.sw	x8,24(x8)
 2e4:	0002                	c.slli64	x0
 2e6:	0900                	c.addi4spn	x8,x2,144
 2e8:	0064                	c.addi4spn	x9,x2,12
 2ea:	0000                	c.unimp
 2ec:	001f 040f 02d2      	0x2d2040f001f
void *tj_malloc(unsigned int size) {
 2f2:	0000                	c.unimp
 2f4:	0d12                	c.slli	x26,0x4
 2f6:	03b8                	c.addi4spn	x14,x2,456
 2f8:	0000                	c.unimp
 2fa:	0508                	c.addi4spn	x10,x2,640
 2fc:	087a                	c.slli	x16,0x1e
 2fe:	000002fb          	0x2fb
 302:	0001610b          	0x1610b
	if (size > sizeof(heap)) return NULL;
 306:	0500                	c.addi4spn	x8,x2,640
 308:	02fb117b          	0x2fb117b
 30c:	0000                	c.unimp
 30e:	0b00                	c.addi4spn	x8,x2,400
 310:	01ce                	c.slli	x3,0x13
 312:	0000                	c.unimp
 314:	7c05                	c.lui	x24,0xfffe1
 316:	5d06                	c.lwsp	x26,96(x2)
	if ((size & 3) != 0) {
 318:	0000                	c.unimp
 31a:	0400                	c.addi4spn	x8,x2,512
 31c:	0f00                	c.addi4spn	x8,x2,912
 31e:	2c04                	c.fld	f9,24(x8)
 320:	0000                	c.unimp
 322:	0d00                	c.addi4spn	x8,x2,656
		size = size + 4 - (size & 3);
 324:	000003d7          	0x3d7
 328:	0568                	c.addi4spn	x10,x2,652
 32a:	08ba                	c.slli	x17,0xe
 32c:	0444                	c.addi4spn	x9,x2,516
 32e:	0000                	c.unimp
 330:	5f0e                	c.lwsp	x30,224(x2)
 332:	0070                	c.addi4spn	x12,x2,12
	unsigned int total_size = size + sizeof(Header); //need to include the header size as well
 334:	bb05                	c.j	64 <crt+0x64>
 336:	fb12                	c.fswsp	f4,180(x2)
 338:	0002                	c.slli64	x0
 33a:	0000                	c.unimp
 33c:	5f0e                	c.lwsp	x30,224(x2)
 33e:	0072                	c.slli	x0,0x1c
	prevp = freep;
 340:	bc05                	c.j	fffffd70 <_sp+0xfffefd70>
 342:	00005d07          	0x5d07
 346:	0400                	c.addi4spn	x8,x2,512
 348:	5f0e                	c.lwsp	x30,224(x2)
 34a:	bd050077          	0xbd050077
	if (prevp == NULL) {
 34e:	00005d07          	0x5d07
 352:	0800                	c.addi4spn	x8,x2,16
		prevp = &base;
 354:	0001aa0b          	0x1aa0b
 358:	0500                	c.addi4spn	x8,x2,640
 35a:	09be                	c.slli	x19,0xf
 35c:	00000033          	add	x0,x0,x0
		freep = prevp;
 360:	0b0c                	c.addi4spn	x11,x2,400
 362:	0000026f          	jal	x4,362 <tj_malloc+0x72>
 366:	bf05                	c.j	296 <getmoremem+0x52>
 368:	3309                	c.jal	6a <crt+0x6a>
 36a:	0000                	c.unimp
		base.next = freep;
 36c:	0e00                	c.addi4spn	x8,x2,784
 36e:	5f0e                	c.lwsp	x30,224(x2)
 370:	6662                	c.flwsp	f12,24(x2)
 372:	0500                	c.addi4spn	x8,x2,640
 374:	11c0                	c.addi4spn	x8,x2,228
 376:	000002d3          	fadd.s	f5,f0,f0,rne
 37a:	0b10                	c.addi4spn	x12,x2,400
 37c:	00000113          	addi	x2,x0,0
		base.size = 0;
 380:	c105                	c.beqz	x10,3a0 <tj_malloc+0xb0>
 382:	00005d07          	0x5d07
 386:	1800                	c.addi4spn	x8,x2,48
 388:	0001840b          	0x1840b
	for (p = prevp->next; ;prevp = p, p = p->next) {
 38c:	0500                	c.addi4spn	x8,x2,640
 38e:	0ac8                	c.addi4spn	x10,x2,340
 390:	0105                	c.addi	x2,1
 392:	0000                	c.unimp
 394:	0b1c                	c.addi4spn	x15,x2,400
 396:	00000243          	fmadd.s	f4,f0,f0,f0,rne
		if (p->size >= size) { //big enough
 39a:	ca05                	c.beqz	x12,3ca <tj_malloc+0xda>
 39c:	c81d                	c.beqz	x8,3d2 <tj_malloc+0xe2>
 39e:	0005                	c.addi	x0,1
 3a0:	2000                	c.fld	f8,0(x8)
 3a2:	0002e20b          	0x2e20b
 3a6:	0500                	c.addi4spn	x8,x2,640
			if (p->size == size) // exact size
 3a8:	1dcc                	c.addi4spn	x11,x2,756
 3aa:	05f2                	c.slli	x11,0x1c
 3ac:	0000                	c.unimp
 3ae:	0b24                	c.addi4spn	x9,x2,408
 3b0:	0464                	c.addi4spn	x9,x2,524
 3b2:	0000                	c.unimp
 3b4:	cf05                	c.beqz	x14,3ec <tj_malloc+0xfc>
 3b6:	160d                	c.addi	x12,-29
				prevp->next = p->next; // just return that block
 3b8:	0006                	c.slli	x0,0x1
 3ba:	2800                	c.fld	f8,16(x8)
 3bc:	00053e0b          	0x53e0b
 3c0:	0500                	c.addi4spn	x8,x2,640
 3c2:	09d0                	c.addi4spn	x12,x2,212
 3c4:	0630                	c.addi4spn	x12,x2,776
 3c6:	0000                	c.unimp
 3c8:	0e2c                	c.addi4spn	x11,x2,792
 3ca:	755f 0062 d305      	0xd3050062755f
				p->size -= total_size; //break up the block
 3d0:	d311                	c.beqz	x14,2d4 <getmoremem+0x90>
 3d2:	0002                	c.slli64	x0
 3d4:	3000                	c.fld	f8,32(x8)
 3d6:	5f0e                	c.lwsp	x30,224(x2)
 3d8:	7075                	c.lui	x0,0xffffd
 3da:	0500                	c.addi4spn	x8,x2,640
 3dc:	12d4                	c.addi4spn	x13,x2,356
 3de:	000002fb          	0x2fb
 3e2:	0e38                	c.addi4spn	x14,x2,792
				p += p->size;
 3e4:	755f 0072 d505      	0xd5050072755f
 3ea:	00005d07          	0x5d07
 3ee:	3c00                	c.fld	f8,56(x8)
 3f0:	00015b0b          	0x15b0b
 3f4:	0500                	c.addi4spn	x8,x2,640
 3f6:	11d8                	c.addi4spn	x14,x2,228
 3f8:	0636                	c.slli	x12,0xd
 3fa:	0000                	c.unimp
				p->size = size;
 3fc:	0b40                	c.addi4spn	x8,x2,404
 3fe:	0516                	c.slli	x10,0x5
 400:	0000                	c.unimp
 402:	d905                	c.beqz	x10,332 <tj_malloc+0x42>
 404:	4611                	c.li	x12,4
 406:	0006                	c.slli	x0,0x1
			freep = prevp;
 408:	4300                	c.lw	x8,0(x14)
 40a:	5f0e                	c.lwsp	x30,224(x2)
 40c:	626c                	c.flw	f11,68(x12)
 40e:	0500                	c.addi4spn	x8,x2,640
 410:	11dc                	c.addi4spn	x15,x2,228
 412:	000002d3          	fadd.s	f5,f0,f0,rne
			return (void *)(++p);
 416:	0b44                	c.addi4spn	x9,x2,404
 418:	01c0                	c.addi4spn	x8,x2,196
 41a:	0000                	c.unimp
 41c:	df05                	c.beqz	x14,354 <tj_malloc+0x64>
 41e:	00005d07          	0x5d07
 422:	4c00                	c.lw	x8,24(x8)
 424:	0001e10b          	0x1e10b
		if (p == freep) //wrapped around free list
 428:	0500                	c.addi4spn	x8,x2,640
 42a:	0ae0                	c.addi4spn	x8,x2,348
 42c:	007f                	0x7f
 42e:	0000                	c.unimp
 430:	0b50                	c.addi4spn	x12,x2,404
 432:	00d1                	c.addi	x1,20
 434:	0000                	c.unimp
 436:	e305                	c.bnez	x14,456 <tj_malloc+0x166>
			if ((p = getmoremem(total_size)) == NULL) //if the heap runs out
 438:	6212                	c.flwsp	f4,4(x2)
 43a:	0004                	0x4
 43c:	5400                	c.lw	x8,40(x8)
 43e:	0002d40b          	0x2d40b
 442:	0500                	c.addi4spn	x8,x2,640
 444:	011f0ce7          	jalr	x25,17(x30) # 1a011 <_sp+0xa011>
 448:	0000                	c.unimp
 44a:	0b58                	c.addi4spn	x14,x2,404
 44c:	03df 0000 e905      	0xe905000003df
				return NULL; //well, you got nothing left, gg
 452:	f90e                	c.fswsp	f3,176(x2)
 454:	0000                	c.unimp
 456:	5c00                	c.lw	x8,56(x8)
	for (p = prevp->next; ;prevp = p, p = p->next) {
 458:	0002da0b          	0x2da0b
 45c:	0500                	c.addi4spn	x8,x2,640
 45e:	09ea                	c.slli	x19,0x1a
 460:	005d                	c.addi	x0,23
 462:	0000                	c.unimp
 464:	0064                	c.addi4spn	x9,x2,12
 466:	00009713          	slli	x14,x1,0x0
 46a:	6200                	c.flw	f8,0(x12)
		if (p->size >= size) { //big enough
 46c:	0004                	0x4
 46e:	1400                	c.addi4spn	x8,x2,544
}
 470:	0462                	c.slli	x8,0x18
 472:	0000                	c.unimp
 474:	0514                	c.addi4spn	x13,x2,640
 476:	0001                	c.addi	x0,0
 478:	1400                	c.addi4spn	x8,x2,544
 47a:	05b6                	c.slli	x11,0xd
 47c:	0000                	c.unimp
 47e:	5d14                	c.lw	x13,56(x10)
 480:	0000                	c.unimp
 482:	0000                	c.unimp
void *tj_calloc(unsigned int size) {
 484:	046d040f          	0x46d040f
 488:	0000                	c.unimp
 48a:	6215                	c.lui	x4,0x5
 48c:	0004                	0x4
 48e:	1600                	c.addi4spn	x8,x2,800
 490:	00000447          	fmsub.s	f8,f0,f0,f0,rne
 494:	0428                	c.addi4spn	x10,x2,520
 496:	6505                	c.lui	x10,0x1
	void *mem = tj_malloc(size);
 498:	0802                	c.slli64	x16
 49a:	05b6                	c.slli	x11,0xd
 49c:	0000                	c.unimp
 49e:	00039d17          	auipc	x26,0x39
 4a2:	0500                	c.addi4spn	x8,x2,640
 4a4:	5d070267          	jalr	x4,1488(x14)
	memset(mem, 0, size);
 4a8:	0000                	c.unimp
 4aa:	0000                	c.unimp
 4ac:	0001b917          	auipc	x18,0x1b
 4b0:	0500                	c.addi4spn	x8,x2,640
 4b2:	026c                	c.addi4spn	x11,x2,268
 4b4:	0006a20b          	0x6a20b
 4b8:	0400                	c.addi4spn	x8,x2,512
 4ba:	00025f17          	auipc	x30,0x25
	return mem;
 4be:	0500                	c.addi4spn	x8,x2,640
}
 4c0:	026c                	c.addi4spn	x11,x2,268
 4c2:	a214                	c.fsd	f13,0(x12)
 4c4:	0006                	c.slli	x0,0x1
 4c6:	0800                	c.addi4spn	x8,x2,16
 4c8:	00022417          	auipc	x8,0x22
 4cc:	0500                	c.addi4spn	x8,x2,640
 4ce:	026c                	c.addi4spn	x11,x2,268
 4d0:	a21e                	c.fsdsp	f7,256(x2)
 4d2:	0006                	c.slli	x0,0x1
{ 
 4d4:	0c00                	c.addi4spn	x8,x2,528
 4d6:	00040017          	auipc	x0,0x40
 4da:	0500                	c.addi4spn	x8,x2,640
 4dc:	026e                	c.slli	x4,0x1b
 4de:	5d08                	c.lw	x10,56(x10)
 4e0:	0000                	c.unimp
 4e2:	1000                	c.addi4spn	x8,x2,32
 4e4:	0000b417          	auipc	x8,0xb
 4e8:	0500                	c.addi4spn	x8,x2,640
 4ea:	a208026f          	jal	x4,fff8070a <_sp+0xfff7070a>
    Node* temp = (Node*)tj_malloc(sizeof(Node)); 
 4ee:	0008                	0x8
 4f0:	1400                	c.addi4spn	x8,x2,544
 4f2:	00042617          	auipc	x12,0x42
 4f6:	0500                	c.addi4spn	x8,x2,640
 4f8:	0272                	c.slli	x4,0x1c
 4fa:	00005d07          	0x5d07
    temp->data = d; 
 4fe:	3000                	c.fld	f8,32(x8)
 500:	00041417          	auipc	x8,0x41
 504:	0500                	c.addi4spn	x8,x2,640
 506:	b7160273          	0xb7160273
    temp->priority = p; 
 50a:	0008                	0x8
 50c:	3400                	c.fld	f8,40(x8)
 50e:	00034617          	auipc	x12,0x34
 512:	0500                	c.addi4spn	x8,x2,640
    temp->next = NULL; 
 514:	0275                	c.addi	x4,29
 516:	00005d07          	0x5d07
 51a:	3800                	c.fld	f8,48(x8)
    return temp; 
 51c:	00041c17          	auipc	x24,0x41
} 
 520:	0500                	c.addi4spn	x8,x2,640
 522:	c80a0277          	0xc80a0277
 526:	0008                	0x8
 528:	3c00                	c.fld	f8,56(x8)
 52a:	0002b617          	auipc	x12,0x2b
 52e:	0500                	c.addi4spn	x8,x2,640
 530:	027a                	c.slli	x4,0x1e
 532:	00018513          	addi	x10,x3,0 # 1060 <__global_pointer$>
{ 
 536:	4000                	c.lw	x8,0(x8)
 538:	00024917          	auipc	x18,0x24
 53c:	0500                	c.addi4spn	x8,x2,640
 53e:	5d07027b          	0x5d07027b
 542:	0000                	c.unimp
    return (*head)->data; 
 544:	4400                	c.lw	x8,8(x8)
 546:	00056817          	auipc	x16,0x56
 54a:	0500                	c.addi4spn	x8,x2,640
 54c:	027c                	c.addi4spn	x15,x2,268
 54e:	00018513          	addi	x10,x3,0 # 1060 <__global_pointer$>
} 
 552:	4800                	c.lw	x8,16(x8)
 554:	00036217          	auipc	x4,0x36
 558:	0500                	c.addi4spn	x8,x2,640
 55a:	027d                	c.addi	x4,31
 55c:	ce14                	c.sw	x13,24(x12)
 55e:	0008                	0x8
{ 
 560:	4c00                	c.lw	x8,24(x8)
 562:	00026717          	auipc	x14,0x26
 566:	0500                	c.addi4spn	x8,x2,640
 568:	0280                	c.addi4spn	x8,x2,320
 56a:	00005d07          	0x5d07
 56e:	5000                	c.lw	x8,32(x8)
 570:	0001d917          	auipc	x18,0x1d
    Node* temp = *head; 
 574:	0500                	c.addi4spn	x8,x2,640
 576:	0281                	c.addi	x5,0
 578:	b609                	c.j	7a <crt+0x7a>
 57a:	0005                	c.addi	x0,1
 57c:	5400                	c.lw	x8,40(x8)
 57e:	00038c17          	auipc	x24,0x38
    (*head) = (*head)->next; 
 582:	0500                	c.addi4spn	x8,x2,640
 584:	02a4                	c.addi4spn	x9,x2,328
 586:	00087d07          	0x87d07
 58a:	5800                	c.lw	x8,48(x8)
 58c:	3418                	c.fld	f14,40(x8)
 58e:	05000003          	lb	x0,80(x0) # 50 <crt+0x50>
 592:	02a8                	c.addi4spn	x10,x2,328
    tj_free(temp); 
 594:	0002b613          	sltiu	x12,x5,0
 598:	4800                	c.lw	x8,16(x8)
 59a:	1801                	c.addi	x16,-32
 59c:	0294                	c.addi4spn	x13,x2,320
 59e:	0000                	c.unimp
} 
 5a0:	a905                	c.j	9d0 <heap+0x130>
 5a2:	1202                	c.slli	x4,0x20
 5a4:	00000273          	0x273
 5a8:	014c                	c.addi4spn	x11,x2,132
 5aa:	0c18                	c.addi4spn	x14,x2,528
 5ac:	0005                	c.addi	x0,1
 5ae:	0500                	c.addi4spn	x8,x2,640
 5b0:	02ad                	c.addi	x5,11
 5b2:	df0c                	c.sw	x11,56(x14)
{ 
 5b4:	0008                	0x8
 5b6:	dc00                	c.sw	x8,56(x8)
 5b8:	1802                	c.slli	x16,0x20
 5ba:	018c                	c.addi4spn	x11,x2,192
 5bc:	0000                	c.unimp
 5be:	b205                	c.j	fffffede <_sp+0xfffefede>
 5c0:	1002                	c.slli	x0,0x20
 5c2:	00000663          	beq	x0,x0,5ce <push+0x1a>
 5c6:	02e0                	c.addi4spn	x8,x2,332
 5c8:	7118                	c.flw	f14,32(x10)
 5ca:	0001                	c.addi	x0,0
 5cc:	0500                	c.addi4spn	x8,x2,640
 5ce:	02b4                	c.addi4spn	x13,x2,328
    Node* start = (*head); 
 5d0:	eb0a                	c.fswsp	f2,148(x2)
 5d2:	0008                	0x8
 5d4:	ec00                	c.fsw	f8,24(x8)
 5d6:	0002                	c.slli64	x0
 5d8:	05bc040f          	0x5bc040f
    Node* temp = newNode(d, p); 
 5dc:	0000                	c.unimp
 5de:	0102                	c.slli64	x2
 5e0:	8708                	0x8708
 5e2:	15000003          	lb	x0,336(x0) # 150 <tj_free+0x9c>
 5e6:	05bc                	c.addi4spn	x15,x2,712
 5e8:	0000                	c.unimp
 5ea:	0444040f          	0x444040f
 5ee:	0000                	c.unimp
    if ((*head)->priority > p) { 
 5f0:	00009713          	slli	x14,x1,0x0
 5f4:	ec00                	c.fsw	f8,24(x8)
 5f6:	0005                	c.addi	x0,1
 5f8:	1400                	c.addi4spn	x8,x2,544
 5fa:	0462                	c.slli	x8,0x18
 5fc:	0000                	c.unimp
 5fe:	0514                	c.addi4spn	x13,x2,640
 600:	0001                	c.addi	x0,0
 602:	1400                	c.addi4spn	x8,x2,544
        temp->next = *head; 
 604:	05ec                	c.addi4spn	x11,x2,716
 606:	0000                	c.unimp
 608:	5d14                	c.lw	x13,56(x10)
 60a:	0000                	c.unimp
 60c:	0000                	c.unimp
 60e:	05c3040f          	0x5c3040f
 612:	0000                	c.unimp
        (*head) = temp; 
 614:	05ce040f          	0x5ce040f
 618:	0000                	c.unimp
 61a:	00008b13          	addi	x22,x1,0
 61e:	1600                	c.addi4spn	x8,x2,800
} 
 620:	0006                	c.slli	x0,0x1
 622:	1400                	c.addi4spn	x8,x2,544
            start = start->next; 
 624:	0462                	c.slli	x8,0x18
 626:	0000                	c.unimp
 628:	0514                	c.addi4spn	x13,x2,640
 62a:	0001                	c.addi	x0,0
 62c:	1400                	c.addi4spn	x8,x2,544
 62e:	0000008b          	0x8b
        while (start->next != NULL && 
 632:	5d14                	c.lw	x13,56(x10)
 634:	0000                	c.unimp
 636:	0000                	c.unimp
 638:	05f8040f          	0x5f8040f
               start->next->priority < p) { 
 63c:	0000                	c.unimp
 63e:	00005d13          	srli	x26,x0,0x0
 642:	3000                	c.fld	f8,32(x8)
 644:	0006                	c.slli	x0,0x1
 646:	1400                	c.addi4spn	x8,x2,544
        while (start->next != NULL && 
 648:	0462                	c.slli	x8,0x18
 64a:	0000                	c.unimp
 64c:	0514                	c.addi4spn	x13,x2,640
 64e:	0001                	c.addi	x0,0
        temp->next = start->next; 
 650:	0000                	c.unimp
 652:	061c040f          	0x61c040f
 656:	0000                	c.unimp
 658:	2c08                	c.fld	f10,24(x8)
 65a:	0000                	c.unimp
 65c:	4600                	c.lw	x8,8(x12)
 65e:	0006                	c.slli	x0,0x1
        start->next = temp; 
 660:	0900                	c.addi4spn	x8,x2,144
 662:	0064                	c.addi4spn	x9,x2,12
 664:	0000                	c.unimp
 666:	0002                	c.slli64	x0
 668:	2c08                	c.fld	f10,24(x8)
 66a:	0000                	c.unimp
} 
 66c:	5600                	c.lw	x8,40(x12)
 66e:	0006                	c.slli	x0,0x1
 670:	0900                	c.addi4spn	x8,x2,144
 672:	0064                	c.addi4spn	x9,x2,12
 674:	0000                	c.unimp
 676:	0000                	c.unimp
 678:	c504                	c.sw	x9,8(x10)
 67a:	05000003          	lb	x0,80(x0) # 50 <crt+0x50>
 67e:	0124                	c.addi4spn	x9,x2,136
{ 
 680:	011a                	c.slli	x2,0x6
 682:	19000003          	lb	x0,400(x0) # 190 <tj_free+0xdc>
 686:	000004eb          	0x4eb
 68a:	050c                	c.addi4spn	x11,x2,640
 68c:	0128                	c.addi4spn	x10,x2,136
 68e:	9c08                	0x9c08
    return (*head) == NULL; 
 690:	0006                	c.slli	x0,0x1
 692:	1700                	c.addi4spn	x8,x2,928
 694:	03ed                	c.addi	x7,27
 696:	0000                	c.unimp
 698:	2a05                	c.jal	7c8 <memset+0x64>
 69a:	1101                	c.addi	x2,-32
 69c:	069c                	c.addi4spn	x15,x2,832
 69e:	0000                	c.unimp
} 
 6a0:	1700                	c.addi4spn	x8,x2,928
 6a2:	0275                	c.addi	x4,29
 6a4:	0000                	c.unimp
 6a6:	2b05                	c.jal	bd6 <heap+0x336>
 6a8:	0701                	c.addi	x14,0
 6aa:	005d                	c.addi	x0,23
 6ac:	0000                	c.unimp
 6ae:	1704                	c.addi4spn	x9,x2,928
{ 
 6b0:	000003bf 0b012c05 	0xb012c05000003bf
 6b8:	06a2                	c.slli	x13,0x8
 6ba:	0000                	c.unimp
 6bc:	0008                	0x8
 6be:	0663040f          	0x663040f
    Node* pq = newNode(4, 1); 
 6c2:	0000                	c.unimp
 6c4:	0656040f          	0x656040f
 6c8:	0000                	c.unimp
 6ca:	4a19                	c.li	x20,6
 6cc:	0000                	c.unimp
 6ce:	0e00                	c.addi4spn	x8,x2,784
 6d0:	4405                	c.li	x8,1
 6d2:	0801                	c.addi	x16,0
 6d4:	06e1                	c.addi	x13,24
 6d6:	0000                	c.unimp
    push(&pq, 5, 2); 
 6d8:	00044e17          	auipc	x28,0x44
 6dc:	0500                	c.addi4spn	x8,x2,640
 6de:	0145                	c.addi	x2,17
 6e0:	e112                	c.fswsp	f4,128(x2)
 6e2:	0006                	c.slli	x0,0x1
 6e4:	0000                	c.unimp
 6e6:	00048117          	auipc	x2,0x48
 6ea:	0500                	c.addi4spn	x8,x2,640
 6ec:	0146                	c.slli	x2,0x11
 6ee:	e112                	c.fswsp	f4,128(x2)
    push(&pq, 6, 3); 
 6f0:	0006                	c.slli	x0,0x1
 6f2:	0600                	c.addi4spn	x8,x2,768
 6f4:	0004a217          	auipc	x4,0x4a
 6f8:	0500                	c.addi4spn	x8,x2,640
 6fa:	3a120147          	fmsub.d	f2,f4,f1,f7,rne
 6fe:	0000                	c.unimp
 700:	0c00                	c.addi4spn	x8,x2,528
 702:	0800                	c.addi4spn	x8,x2,16
 704:	003a                	c.slli	x0,0xe
 706:	0000                	c.unimp
    push(&pq, 7, 0); 
 708:	06f1                	c.addi	x13,28
 70a:	0000                	c.unimp
 70c:	6409                	c.lui	x8,0x2
 70e:	0000                	c.unimp
 710:	0200                	c.addi4spn	x8,x2,256
 712:	1a00                	c.addi4spn	x8,x2,304
 714:	05d0                	c.addi4spn	x12,x2,708
 716:	0285                	c.addi	x5,1
 718:	00080607          	0x80607
 71c:	1700                	c.addi4spn	x8,x2,928
 71e:	000004cf          	fnmadd.s	f9,f0,f0,f0,rne
    while (!isEmpty(&pq)) { 
 722:	8705                	c.srai	x14,0x1
        pop(&pq); 
 724:	1802                	c.slli	x16,0x20
 726:	0064                	c.addi4spn	x9,x2,12
 728:	0000                	c.unimp
 72a:	1700                	c.addi4spn	x8,x2,928
 72c:	00000487          	0x487
 730:	8805                	c.andi	x8,1
 732:	1202                	c.slli	x4,0x20
    while (!isEmpty(&pq)) { 
 734:	05b6                	c.slli	x11,0xd
 736:	0000                	c.unimp
 738:	1704                	c.addi4spn	x9,x2,928
 73a:	02a9                	c.addi	x5,10
 73c:	0000                	c.unimp
 73e:	8905                	c.andi	x10,1
 740:	1002                	c.slli	x0,0x20
 742:	0806                	c.slli	x16,0x1
 744:	0000                	c.unimp
 746:	1708                	c.addi4spn	x10,x2,928
 748:	0000052f          	0x52f
    return 0; 
 74c:	8a05                	c.andi	x12,1
 74e:	1702                	c.slli	x14,0x20
}
 750:	0000019b          	0x19b
 754:	1724                	c.addi4spn	x9,x2,936
 756:	0234                	c.addi4spn	x13,x2,264
 758:	0000                	c.unimp
 75a:	8b05                	c.andi	x14,1
 75c:	0f02                	c.slli64	x30
 75e:	005d                	c.addi	x0,23
 760:	0000                	c.unimp
 762:	1748                	c.addi4spn	x10,x2,932
 764:	03e8                	c.addi4spn	x10,x2,460
 766:	0000                	c.unimp
 768:	8c05                	c.sub	x8,x9
 76a:	2c02                	c.fldsp	f24,0(x2)
 76c:	0056                	c.slli	x0,0x15
 76e:	0000                	c.unimp
 770:	1750                	c.addi4spn	x12,x2,932
 772:	0545                	c.addi	x10,17
 774:	0000                	c.unimp
 776:	8d05                	c.sub	x10,x9
 778:	1a02                	c.slli	x20,0x20
 77a:	06a8                	c.addi4spn	x10,x2,840
 77c:	0000                	c.unimp
 77e:	1758                	c.addi4spn	x14,x2,932
 780:	000003f3          	0x3f3
 784:	8e05                	c.sub	x12,x9
 786:	1602                	c.slli	x12,0x20
 788:	00f9                	c.addi	x1,30
 78a:	0000                	c.unimp
 78c:	1768                	c.addi4spn	x10,x2,940
 78e:	055a                	c.slli	x10,0x16
 790:	0000                	c.unimp
 792:	8f05                	c.sub	x14,x9
 794:	1602                	c.slli	x12,0x20
 796:	00f9                	c.addi	x1,30
 798:	0000                	c.unimp
 79a:	1770                	c.addi4spn	x12,x2,940
 79c:	0136                	c.slli	x2,0xd
 79e:	0000                	c.unimp
 7a0:	9005                	c.srli	x8,0x21
 7a2:	1602                	c.slli	x12,0x20
 7a4:	00f9                	c.addi	x1,30
 7a6:	0000                	c.unimp
 7a8:	1778                	c.addi4spn	x14,x2,940
 7aa:	0502                	c.slli64	x10
 7ac:	0000                	c.unimp
 7ae:	9105                	c.srli	x10,0x21
 7b0:	1002                	c.slli	x0,0x20
 7b2:	0816                	c.slli	x16,0x5
 7b4:	0000                	c.unimp
 7b6:	1780                	c.addi4spn	x8,x2,992
 7b8:	029d                	c.addi	x5,7
 7ba:	0000                	c.unimp
 7bc:	9205                	c.srli	x12,0x21
 7be:	1002                	c.slli	x0,0x20
 7c0:	0826                	c.slli	x16,0x9
 7c2:	0000                	c.unimp
 7c4:	1788                	c.addi4spn	x10,x2,992
 7c6:	000004af          	0x4af
 7ca:	9305                	c.srli	x14,0x21
 7cc:	0f02                	c.slli64	x30
 7ce:	005d                	c.addi	x0,23
 7d0:	0000                	c.unimp
 7d2:	17a0                	c.addi4spn	x8,x2,1000
 7d4:	01fa                	c.slli	x3,0x1e
 7d6:	0000                	c.unimp
 7d8:	9405                	c.srai	x8,0x21
 7da:	1602                	c.slli	x12,0x20
 7dc:	00f9                	c.addi	x1,30
 7de:	0000                	c.unimp
 7e0:	17a4                	c.addi4spn	x9,x2,1000
 7e2:	00000127          	0x127
 7e6:	9505                	c.srai	x10,0x21
 7e8:	1602                	c.slli	x12,0x20
 7ea:	00f9                	c.addi	x1,30
 7ec:	0000                	c.unimp
 7ee:	17ac                	c.addi4spn	x11,x2,1000
 7f0:	01e9                	c.addi	x3,26
 7f2:	0000                	c.unimp
 7f4:	9605                	c.srai	x12,0x21
 7f6:	1602                	c.slli	x12,0x20
 7f8:	00f9                	c.addi	x1,30
 7fa:	0000                	c.unimp
 7fc:	17b4                	c.addi4spn	x13,x2,1000
 7fe:	00dc                	c.addi4spn	x15,x2,68
 800:	0000                	c.unimp
 802:	9705                	c.srai	x14,0x21
 804:	1602                	c.slli	x12,0x20
 806:	00f9                	c.addi	x1,30
 808:	0000                	c.unimp
 80a:	17bc                	c.addi4spn	x15,x2,1000
 80c:	000000eb          	0xeb
 810:	9805                	c.andi	x8,-31
 812:	1602                	c.slli	x12,0x20
 814:	00f9                	c.addi	x1,30
 816:	0000                	c.unimp
 818:	17c4                	c.addi4spn	x9,x2,996
 81a:	0000039b          	0x39b
 81e:	9905                	c.andi	x10,-31
 820:	0802                	c.slli64	x16
 822:	005d                	c.addi	x0,23
 824:	0000                	c.unimp
 826:	00cc                	c.addi4spn	x11,x2,68
 828:	bc08                	c.fsd	f10,56(x8)
 82a:	0005                	c.addi	x0,1
 82c:	1600                	c.addi4spn	x8,x2,800
 82e:	0008                	0x8
 830:	0900                	c.addi4spn	x8,x2,144
 832:	0064                	c.addi4spn	x9,x2,12
 834:	0000                	c.unimp
 836:	0019                	c.addi	x0,6
 838:	bc08                	c.fsd	f10,56(x8)
 83a:	0005                	c.addi	x0,1
 83c:	2600                	c.fld	f8,8(x12)
 83e:	0008                	0x8
 840:	0900                	c.addi4spn	x8,x2,144
 842:	0064                	c.addi4spn	x9,x2,12
 844:	0000                	c.unimp
 846:	bc080007          	0xbc080007
 84a:	0005                	c.addi	x0,1
 84c:	3600                	c.fld	f8,40(x12)
 84e:	0008                	0x8
 850:	0900                	c.addi4spn	x8,x2,144
 852:	0064                	c.addi4spn	x9,x2,12
 854:	0000                	c.unimp
 856:	f01a0017          	auipc	x0,0xf01a0
 85a:	9e05                	0x9e05
 85c:	0702                	c.slli64	x14
 85e:	085d                	c.addi	x16,23
 860:	0000                	c.unimp
 862:	00032417          	auipc	x8,0x32
 866:	0500                	c.addi4spn	x8,x2,640
 868:	02a1                	c.addi	x5,8
 86a:	00085d1b          	0x85d1b
 86e:	0000                	c.unimp
 870:	0002f317          	auipc	x6,0x2f
 874:	0500                	c.addi4spn	x8,x2,640
 876:	02a2                	c.slli	x5,0x8
 878:	6d18                	c.flw	f14,24(x10)
 87a:	0008                	0x8
 87c:	7800                	c.flw	f8,48(x8)
 87e:	0800                	c.addi4spn	x8,x2,16
 880:	000002fb          	0x2fb
 884:	086d                	c.addi	x16,27
 886:	0000                	c.unimp
 888:	6409                	c.lui	x8,0x2
 88a:	0000                	c.unimp
 88c:	1d00                	c.addi4spn	x8,x2,688
 88e:	0800                	c.addi4spn	x8,x2,16
 890:	0064                	c.addi4spn	x9,x2,12
 892:	0000                	c.unimp
 894:	087d                	c.addi	x16,31
 896:	0000                	c.unimp
 898:	6409                	c.lui	x8,0x2
 89a:	0000                	c.unimp
 89c:	1d00                	c.addi4spn	x8,x2,688
 89e:	1b00                	c.addi4spn	x8,x2,432
 8a0:	05f0                	c.addi4spn	x12,x2,716
 8a2:	a2030283          	lb	x5,-1504(x6) # 2f290 <_sp+0x1f290>
 8a6:	0008                	0x8
 8a8:	1c00                	c.addi4spn	x8,x2,560
 8aa:	00000447          	fmsub.s	f8,f0,f0,f0,rne
 8ae:	9a05                	c.andi	x12,-31
 8b0:	0b02                	c.slli64	x22
 8b2:	06f1                	c.addi	x13,28
 8b4:	0000                	c.unimp
 8b6:	1c1c                	c.addi4spn	x15,x2,560
 8b8:	0005                	c.addi	x0,1
 8ba:	0500                	c.addi4spn	x8,x2,640
 8bc:	360b02a3          	sb	x0,869(x22)
 8c0:	0008                	0x8
 8c2:	0000                	c.unimp
 8c4:	bc08                	c.fsd	f10,56(x8)
 8c6:	0005                	c.addi	x0,1
 8c8:	b200                	c.fsd	f8,32(x12)
 8ca:	0008                	0x8
 8cc:	0900                	c.addi4spn	x8,x2,144
 8ce:	0064                	c.addi4spn	x9,x2,12
 8d0:	0000                	c.unimp
 8d2:	0018                	0x18
 8d4:	1c1d                	c.addi	x24,-25
 8d6:	0001                	c.addi	x0,0
 8d8:	0f00                	c.addi4spn	x8,x2,912
 8da:	b204                	c.fsd	f9,32(x12)
 8dc:	0008                	0x8
 8de:	1e00                	c.addi4spn	x8,x2,816
 8e0:	08c8                	c.addi4spn	x10,x2,84
 8e2:	0000                	c.unimp
 8e4:	6214                	c.flw	f13,0(x12)
 8e6:	0004                	0x4
 8e8:	0000                	c.unimp
 8ea:	08bd040f          	0x8bd040f
 8ee:	0000                	c.unimp
 8f0:	0185040f          	0x185040f
 8f4:	0000                	c.unimp
 8f6:	df1e                	c.swsp	x7,188(x2)
 8f8:	0008                	0x8
 8fa:	1400                	c.addi4spn	x8,x2,544
 8fc:	005d                	c.addi	x0,23
 8fe:	0000                	c.unimp
 900:	0f00                	c.addi4spn	x8,x2,912
 902:	e504                	c.fsw	f9,8(x10)
 904:	0008                	0x8
 906:	0f00                	c.addi4spn	x8,x2,912
 908:	d404                	c.sw	x9,40(x8)
 90a:	0008                	0x8
 90c:	0800                	c.addi4spn	x8,x2,16
 90e:	0656                	c.slli	x12,0x15
 910:	0000                	c.unimp
 912:	000008fb          	0x8fb
 916:	6409                	c.lui	x8,0x2
 918:	0000                	c.unimp
 91a:	0200                	c.addi4spn	x8,x2,256
 91c:	1f00                	c.addi4spn	x8,x2,944
 91e:	000004c3          	fmadd.s	f9,f0,f0,f0,rne
 922:	3305                	c.jal	642 <push+0x8e>
 924:	04621703          	lh	x14,70(x4) # 4a73a <_sp+0x3a73a>
 928:	0000                	c.unimp
 92a:	bc1f 0004 0500      	0x5000004bc1f
 930:	0334                	c.addi4spn	x13,x2,392
 932:	681d                	c.lui	x16,0x7
 934:	0004                	0x4
 936:	2000                	c.fld	f8,0(x8)
 938:	033c                	c.addi4spn	x15,x2,392
 93a:	0000                	c.unimp
 93c:	b60e6707          	0xb60e6707
 940:	0005                	c.addi	x0,1
 942:	0800                	c.addi4spn	x8,x2,16
 944:	002c                	c.addi4spn	x11,x2,8
 946:	0000                	c.unimp
 948:	0932                	c.slli	x18,0xc
 94a:	0000                	c.unimp
 94c:	6421                	c.lui	x8,0x8
 94e:	0000                	c.unimp
 950:	ff00                	c.fsw	f8,56(x14)
 952:	9d22003f 01000004 	0x10000049d22003f
 95a:	161e                	c.slli	x12,0x27
 95c:	0921                	c.addi	x18,8
 95e:	0000                	c.unimp
 960:	0305                	c.addi	x6,1
 962:	08a0                	c.addi4spn	x8,x2,88
 964:	0000                	c.unimp
 966:	3f22                	c.fldsp	f30,40(x2)
 968:	0000                	c.unimp
 96a:	0100                	c.addi4spn	x8,x2,128
 96c:	0e1f 0105 0000      	0x1050e1f
 972:	0305                	c.addi	x6,1
 974:	0880                	c.addi4spn	x8,x2,80
 976:	0000                	c.unimp
 978:	4a22                	c.lwsp	x20,8(x2)
 97a:	0005                	c.addi	x0,1
 97c:	0100                	c.addi4spn	x8,x2,128
 97e:	1520                	c.addi4spn	x8,x2,680
 980:	0064                	c.addi4spn	x9,x2,12
 982:	0000                	c.unimp
 984:	0305                	c.addi	x6,1
 986:	0884                	c.addi4spn	x9,x2,80
 988:	0000                	c.unimp
 98a:	720d                	c.lui	x4,0xfffe3
 98c:	0005                	c.addi	x0,1
 98e:	0800                	c.addi4spn	x8,x2,16
 990:	2201                	c.jal	a90 <heap+0x1f0>
 992:	9010                	0x9010
 994:	0009                	c.addi	x0,2
 996:	0b00                	c.addi4spn	x8,x2,400
 998:	03ee                	c.slli	x7,0x1b
 99a:	0000                	c.unimp
 99c:	2301                	c.jal	e9c <heap+0x5fc>
 99e:	9011                	c.srli	x8,0x24
 9a0:	0009                	c.addi	x0,2
 9a2:	0000                	c.unimp
 9a4:	0001cf0b          	0x1cf0b
 9a8:	0100                	c.addi4spn	x8,x2,128
 9aa:	0f24                	c.addi4spn	x9,x2,920
 9ac:	0064                	c.addi4spn	x9,x2,12
 9ae:	0000                	c.unimp
 9b0:	0004                	0x4
 9b2:	0968040f          	0x968040f
 9b6:	0000                	c.unimp
 9b8:	ca05                	c.beqz	x12,9e8 <heap+0x148>
 9ba:	0000                	c.unimp
 9bc:	0100                	c.addi4spn	x8,x2,128
 9be:	0325                	c.addi	x6,9
 9c0:	0968                	c.addi4spn	x10,x2,156
 9c2:	0000                	c.unimp
 9c4:	6222                	c.flwsp	f4,8(x2)
 9c6:	0001                	c.addi	x0,0
 9c8:	0100                	c.addi4spn	x8,x2,128
 9ca:	0f26                	c.slli	x30,0x9
 9cc:	0996                	c.slli	x19,0x5
 9ce:	0000                	c.unimp
 9d0:	0305                	c.addi	x6,1
 9d2:	48a0                	c.lw	x8,80(x9)
 9d4:	0000                	c.unimp
 9d6:	9422                	c.add	x8,x8
 9d8:	0001                	c.addi	x0,0
 9da:	0100                	c.addi4spn	x8,x2,128
 9dc:	09c61027          	0x9c61027
 9e0:	0000                	c.unimp
 9e2:	0305                	c.addi	x6,1
 9e4:	48a8                	c.lw	x10,80(x9)
 9e6:	0000                	c.unimp
 9e8:	0996040f          	0x996040f
 9ec:	0000                	c.unimp
 9ee:	910d                	c.srli	x10,0x23
 9f0:	0c000003          	lb	x0,192(x0) # c0 <tj_free+0xc>
 9f4:	0d02                	c.slli64	x26
 9f6:	0110                	c.addi4spn	x12,x2,128
 9f8:	000a                	c.slli	x0,0x2
 9fa:	0b00                	c.addi4spn	x8,x2,400
 9fc:	00d2                	c.slli	x1,0x14
 9fe:	0000                	c.unimp
 a00:	0e02                	c.slli64	x28
 a02:	5d09                	c.li	x26,-30
 a04:	0000                	c.unimp
 a06:	0000                	c.unimp
 a08:	0002c40b          	0x2c40b
 a0c:	0200                	c.addi4spn	x8,x2,256
 a0e:	0911                	c.addi	x18,4
 a10:	005d                	c.addi	x0,23
 a12:	0000                	c.unimp
 a14:	0b04                	c.addi4spn	x9,x2,400
 a16:	03ee                	c.slli	x7,0x1b
 a18:	0000                	c.unimp
 a1a:	1302                	c.slli	x6,0x20
 a1c:	0112                	c.slli	x2,0x4
 a1e:	000a                	c.slli	x0,0x2
 a20:	0800                	c.addi4spn	x8,x2,16
 a22:	0f00                	c.addi4spn	x8,x2,912
 a24:	cc04                	c.sw	x9,24(x8)
 a26:	0009                	c.addi	x0,2
 a28:	0500                	c.addi4spn	x8,x2,640
 a2a:	01a5                	c.addi	x3,9
 a2c:	0000                	c.unimp
 a2e:	1502                	c.slli	x10,0x20
 a30:	0009cc03          	lbu	x24,0(x19)
 a34:	2300                	c.fld	f8,0(x14)
 a36:	056d                	c.addi	x10,27
 a38:	0000                	c.unimp
 a3a:	5902                	c.lwsp	x18,32(x2)
 a3c:	5d05                	c.li	x26,-31
 a3e:	0000                	c.unimp
 a40:	b000                	c.fsd	f8,32(x8)
 a42:	0006                	c.slli	x0,0x1
 a44:	b400                	c.fsd	f8,40(x8)
 a46:	0000                	c.unimp
 a48:	0100                	c.addi4spn	x8,x2,128
 a4a:	3c9c                	c.fld	f15,56(x9)
 a4c:	000a                	c.slli	x0,0x2
 a4e:	2400                	c.fld	f8,8(x8)
 a50:	7170                	c.flw	f12,100(x10)
 a52:	0200                	c.addi4spn	x8,x2,256
 a54:	0b5d                	c.addi	x22,23
 a56:	0a3c                	c.addi4spn	x15,x2,280
 a58:	0000                	c.unimp
 a5a:	9102                	c.jalr	x2
 a5c:	006c                	c.addi4spn	x11,x2,12
 a5e:	0a07040f          	0xa07040f
 a62:	0000                	c.unimp
 a64:	9a25                	c.andi	x12,-23
 a66:	0001                	c.addi	x0,0
 a68:	0200                	c.addi4spn	x8,x2,256
 a6a:	005d0553          	fadd.s	f10,f26,f5,rne
 a6e:	0000                	c.unimp
 a70:	0680                	c.addi4spn	x8,x2,832
 a72:	0000                	c.unimp
 a74:	0030                	c.addi4spn	x12,x2,8
 a76:	0000                	c.unimp
 a78:	9c01                	0x9c01
 a7a:	0a6c                	c.addi4spn	x11,x2,284
 a7c:	0000                	c.unimp
 a7e:	d426                	c.swsp	x9,40(x2)
 a80:	0001                	c.addi	x0,0
 a82:	0200                	c.addi4spn	x8,x2,256
 a84:	0a6c1453          	fsub.d	f8,f24,f6,rtz
 a88:	0000                	c.unimp
 a8a:	9102                	c.jalr	x2
 a8c:	006c                	c.addi4spn	x11,x2,12
 a8e:	0a3c040f          	0xa3c040f
 a92:	0000                	c.unimp
 a94:	00039627          	0x39627
 a98:	0200                	c.addi4spn	x8,x2,256
 a9a:	0632                	c.slli	x12,0xc
 a9c:	05b4                	c.addi4spn	x13,x2,712
 a9e:	0000                	c.unimp
 aa0:	00cc                	c.addi4spn	x11,x2,68
 aa2:	0000                	c.unimp
 aa4:	9c01                	0x9c01
 aa6:	0ad0                	c.addi4spn	x12,x2,340
 aa8:	0000                	c.unimp
 aaa:	d426                	c.swsp	x9,40(x2)
 aac:	0001                	c.addi	x0,0
 aae:	0200                	c.addi4spn	x8,x2,256
 ab0:	1232                	c.slli	x4,0x2c
 ab2:	0a6c                	c.addi4spn	x11,x2,284
 ab4:	0000                	c.unimp
 ab6:	9102                	c.jalr	x2
 ab8:	285c                	c.fld	f15,144(x8)
 aba:	0064                	c.addi4spn	x9,x2,12
 abc:	3202                	c.fldsp	f4,32(x2)
 abe:	5d1c                	c.lw	x15,56(x10)
 ac0:	0000                	c.unimp
 ac2:	0200                	c.addi4spn	x8,x2,256
 ac4:	5891                	c.li	x17,-28
 ac6:	7028                	c.flw	f10,96(x8)
 ac8:	0200                	c.addi4spn	x8,x2,256
 aca:	2332                	c.fldsp	f6,264(x2)
 acc:	005d                	c.addi	x0,23
 ace:	0000                	c.unimp
 ad0:	9102                	c.jalr	x2
 ad2:	2254                	c.fld	f13,128(x12)
 ad4:	0554                	c.addi4spn	x13,x2,644
 ad6:	0000                	c.unimp
 ad8:	3402                	c.fldsp	f8,32(x2)
 ada:	000a3c0b          	0xa3c0b
 ade:	0200                	c.addi4spn	x8,x2,256
 ae0:	6c91                	c.lui	x25,0x4
 ae2:	d722                	c.swsp	x8,172(x2)
 ae4:	0000                	c.unimp
 ae6:	0200                	c.addi4spn	x8,x2,256
 ae8:	0a3c0b37          	lui	x22,0xa3c0
 aec:	0000                	c.unimp
 aee:	9102                	c.jalr	x2
 af0:	0068                	c.addi4spn	x10,x2,12
 af2:	7029                	c.lui	x0,0xfffea
 af4:	0200706f          	jal	x0,7b14 <_ebss+0x3268>
 af8:	062a                	c.slli	x12,0xa
 afa:	0560                	c.addi4spn	x8,x2,652
 afc:	0000                	c.unimp
 afe:	0054                	c.addi4spn	x13,x2,4
 b00:	0000                	c.unimp
 b02:	9c01                	0x9c01
 b04:	0b05                	c.addi	x22,1
 b06:	0000                	c.unimp
 b08:	d426                	c.swsp	x9,40(x2)
 b0a:	0001                	c.addi	x0,0
 b0c:	0200                	c.addi4spn	x8,x2,256
 b0e:	112a                	c.slli	x2,0x2a
 b10:	0a6c                	c.addi4spn	x11,x2,284
 b12:	0000                	c.unimp
 b14:	9102                	c.jalr	x2
 b16:	225c                	c.fld	f15,128(x12)
 b18:	000000d7          	0xd7
 b1c:	2c02                	c.fldsp	f24,0(x2)
 b1e:	000a3c0b          	0xa3c0b
 b22:	0200                	c.addi4spn	x8,x2,256
 b24:	6c91                	c.lui	x25,0x4
 b26:	2500                	c.fld	f8,8(x10)
 b28:	027c                	c.addi4spn	x15,x2,268
 b2a:	0000                	c.unimp
 b2c:	2302                	c.fldsp	f6,0(x2)
 b2e:	5d05                	c.li	x26,-31
 b30:	0000                	c.unimp
 b32:	3400                	c.fld	f8,40(x8)
 b34:	0005                	c.addi	x0,1
 b36:	2c00                	c.fld	f8,24(x8)
 b38:	0000                	c.unimp
 b3a:	0100                	c.addi4spn	x8,x2,128
 b3c:	2f9c                	c.fld	f15,24(x15)
 b3e:	2600000b          	0x2600000b
 b42:	01d4                	c.addi4spn	x13,x2,196
 b44:	0000                	c.unimp
 b46:	2302                	c.fldsp	f6,0(x2)
 b48:	6c11                	c.lui	x24,0x4
 b4a:	000a                	c.slli	x0,0x2
 b4c:	0200                	c.addi4spn	x8,x2,256
 b4e:	6c91                	c.lui	x25,0x4
 b50:	2a00                	c.fld	f8,16(x12)
 b52:	01a2                	c.slli	x3,0x8
 b54:	0000                	c.unimp
 b56:	1802                	c.slli	x16,0x20
 b58:	000a3c07          	fld	f24,0(x20)
 b5c:	d400                	c.sw	x8,40(x8)
 b5e:	0004                	0x4
 b60:	6000                	c.flw	f8,0(x8)
 b62:	0000                	c.unimp
 b64:	0100                	c.addi4spn	x8,x2,128
 b66:	739c                	c.flw	f15,32(x15)
 b68:	2800000b          	0x2800000b
 b6c:	0064                	c.addi4spn	x9,x2,12
 b6e:	1802                	c.slli	x16,0x20
 b70:	00005d13          	srli	x26,x0,0x0
 b74:	0200                	c.addi4spn	x8,x2,256
 b76:	5c91                	c.li	x25,-28
 b78:	7028                	c.flw	f10,96(x8)
 b7a:	0200                	c.addi4spn	x8,x2,256
 b7c:	1a18                	c.addi4spn	x14,x2,304
 b7e:	005d                	c.addi	x0,23
 b80:	0000                	c.unimp
 b82:	9102                	c.jalr	x2
 b84:	2258                	c.fld	f14,128(x12)
 b86:	000000d7          	0xd7
 b8a:	1a02                	c.slli	x20,0x20
 b8c:	000a3c0b          	0xa3c0b
 b90:	0200                	c.addi4spn	x8,x2,256
 b92:	6c91                	c.lui	x25,0x4
 b94:	2a00                	c.fld	f8,16(x12)
 b96:	0358                	c.addi4spn	x14,x2,388
 b98:	0000                	c.unimp
 b9a:	8401                	c.srai64	x8
 b9c:	00010507          	0x10507
 ba0:	8400                	0x8400
 ba2:	0004                	0x4
 ba4:	5000                	c.lw	x8,32(x8)
 ba6:	0000                	c.unimp
 ba8:	0100                	c.addi4spn	x8,x2,128
 baa:	ac9c                	c.fsd	f15,24(x9)
 bac:	2600000b          	0x2600000b
 bb0:	000001cf          	fnmadd.s	f3,f0,f0,f0,rne
 bb4:	8401                	c.srai64	x8
 bb6:	641e                	c.flwsp	f8,196(x2)
 bb8:	0000                	c.unimp
 bba:	0200                	c.addi4spn	x8,x2,256
 bbc:	5c91                	c.li	x25,-28
 bbe:	6d24                	c.flw	f9,88(x10)
 bc0:	6d65                	c.lui	x26,0x19
 bc2:	0100                	c.addi4spn	x8,x2,128
 bc4:	0885                	c.addi	x17,1
 bc6:	0105                	c.addi	x2,1
 bc8:	0000                	c.unimp
 bca:	9102                	c.jalr	x2
 bcc:	006c                	c.addi4spn	x11,x2,12
 bce:	0a2a                	c.slli	x20,0xa
 bd0:	0004                	0x4
 bd2:	0100                	c.addi4spn	x8,x2,128
 bd4:	0758                	c.addi4spn	x14,x2,900
 bd6:	0105                	c.addi	x2,1
 bd8:	0000                	c.unimp
 bda:	02f0                	c.addi4spn	x12,x2,332
 bdc:	0000                	c.unimp
 bde:	0194                	c.addi4spn	x13,x2,192
 be0:	0000                	c.unimp
 be2:	9c01                	0x9c01
 be4:	0c01                	c.addi	x24,0
 be6:	0000                	c.unimp
 be8:	cf26                	c.swsp	x9,156(x2)
 bea:	0001                	c.addi	x0,0
 bec:	0100                	c.addi4spn	x8,x2,128
 bee:	1e58                	c.addi4spn	x14,x2,820
 bf0:	0064                	c.addi4spn	x9,x2,12
 bf2:	0000                	c.unimp
 bf4:	9102                	c.jalr	x2
 bf6:	245c                	c.fld	f15,136(x8)
 bf8:	0070                	c.addi4spn	x12,x2,12
 bfa:	6201                	0x6201
 bfc:	c60a                	c.swsp	x2,12(x2)
 bfe:	0009                	c.addi	x0,2
 c00:	0200                	c.addi4spn	x8,x2,256
 c02:	6c91                	c.lui	x25,0x4
 c04:	7b22                	c.flwsp	f22,40(x2)
 c06:	0004                	0x4
 c08:	0100                	c.addi4spn	x8,x2,128
 c0a:	0e62                	c.slli	x28,0x18
 c0c:	09c6                	c.slli	x19,0x11
 c0e:	0000                	c.unimp
 c10:	9102                	c.jalr	x2
 c12:	2268                	c.fld	f10,192(x12)
 c14:	01c9                	c.addi	x3,18
 c16:	0000                	c.unimp
 c18:	6401                	0x6401
 c1a:	0000640f          	0x640f
 c1e:	0200                	c.addi4spn	x8,x2,256
 c20:	6491                	c.lui	x9,0x4
 c22:	2b00                	c.fld	f8,16(x14)
 c24:	000000bf c6104e01 	0xc6104e01000000bf
 c2c:	0009                	c.addi	x0,2
 c2e:	4400                	c.lw	x8,8(x8)
 c30:	0002                	c.slli64	x0
 c32:	ac00                	c.fsd	f8,24(x8)
 c34:	0000                	c.unimp
 c36:	0100                	c.addi4spn	x8,x2,128
 c38:	399c                	c.fld	f15,48(x11)
 c3a:	000c                	0xc
 c3c:	2600                	c.fld	f8,8(x12)
 c3e:	01c9                	c.addi	x3,18
 c40:	0000                	c.unimp
 c42:	4e01                	c.li	x28,0
 c44:	6428                	c.flw	f10,72(x8)
 c46:	0000                	c.unimp
 c48:	0200                	c.addi4spn	x8,x2,256
 c4a:	5c91                	c.li	x25,-28
 c4c:	7524                	c.flw	f9,104(x10)
 c4e:	0070                	c.addi4spn	x12,x2,12
 c50:	5001                	c.li	x0,-32
 c52:	c60a                	c.swsp	x2,12(x2)
 c54:	0009                	c.addi	x0,2
 c56:	0200                	c.addi4spn	x8,x2,256
 c58:	6c91                	c.lui	x25,0x4
 c5a:	2c00                	c.fld	f8,24(x8)
 c5c:	04f1                	c.addi	x9,28
 c5e:	0000                	c.unimp
 c60:	2a01                	c.jal	d70 <heap+0x4d0>
 c62:	b406                	c.fsdsp	f1,40(x2)
 c64:	0000                	c.unimp
 c66:	9000                	0x9000
 c68:	0001                	c.addi	x0,0
 c6a:	0100                	c.addi4spn	x8,x2,128
 c6c:	289c                	c.fld	f15,16(x9)
 c6e:	656d                	c.lui	x10,0x1b
 c70:	006d                	c.addi	x0,27
 c72:	2a01                	c.jal	d82 <heap+0x4e2>
 c74:	0514                	c.addi4spn	x13,x2,640
 c76:	0001                	c.addi	x0,0
 c78:	0200                	c.addi4spn	x8,x2,256
 c7a:	5c91                	c.li	x25,-28
 c7c:	6224                	c.flw	f9,64(x12)
 c7e:	0070                	c.addi4spn	x12,x2,12
 c80:	3001                	c.jal	480 <tj_malloc+0x190>
 c82:	c60a                	c.swsp	x2,12(x2)
 c84:	0009                	c.addi	x0,2
 c86:	0200                	c.addi4spn	x8,x2,256
 c88:	6891                	c.lui	x17,0x4
 c8a:	7024                	c.flw	f9,96(x8)
 c8c:	0100                	c.addi4spn	x8,x2,128
 c8e:	0f30                	c.addi4spn	x12,x2,920
 c90:	09c6                	c.slli	x19,0x11
 c92:	0000                	c.unimp
 c94:	9102                	c.jalr	x2
 c96:	006c                	c.addi4spn	x11,x2,12
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
	nop
   0:	1101                	c.addi	x2,-32
   2:	1000                	c.addi4spn	x8,x2,32
	la ra, exit
   4:	5506                	c.lwsp	x10,96(x2)
   6:	0306                	c.slli	x6,0x1
   8:	1b0e                	c.slli	x22,0x23
   a:	250e                	c.fldsp	f10,192(x2)
	la sp, _sp
   c:	130e                	c.slli	x6,0x23
   e:	0005                	c.addi	x0,1
  10:	0000                	c.unimp
  12:	1101                	c.addi	x2,-32
	mv s0, sp
  14:	2501                	c.jal	614 <push+0x60>
  16:	130e                	c.slli	x6,0x23
	la gp, __global_pointer$
  18:	1b0e030b          	0x1b0e030b
  1c:	110e                	c.slli	x2,0x23
  1e:	1201                	c.addi	x4,-32
	li tp, 0
  20:	1006                	c.slli	x0,0x21
  22:	02000017          	auipc	x0,0x2000
	li t0, 0
  26:	0024                	c.addi4spn	x9,x2,8
	li t1, 0
  28:	0b3e0b0b          	0xb3e0b0b
	li t2, 0
  2c:	00000e03          	lb	x28,0(x0) # 0 <crt>
	li s1, 0
  30:	0b002403          	lw	x8,176(x0) # b0 <exit+0x10>
	li a0, 0
  34:	030b3e0b          	0x30b3e0b
	li a1, 0
  38:	0008                	0x8
  3a:	0400                	c.addi4spn	x8,x2,512
	li a2, 0
  3c:	0016                	c.slli	x0,0x5
  3e:	0b3a0e03          	lb	x28,179(x20)
	li a3, 0
  42:	0b39053b          	0xb39053b
	li a4, 0
  46:	1349                	c.addi	x6,-14
	li a5, 0
  48:	0000                	c.unimp
  4a:	1605                	c.addi	x12,-31
	li a6, 0
  4c:	0300                	c.addi4spn	x8,x2,384
  4e:	3a0e                	c.fldsp	f20,224(x2)
	li a7, 0
  50:	390b3b0b          	0x390b3b0b
	li s2, 0
  54:	0013490b          	0x13490b
	li s3, 0
  58:	0600                	c.addi4spn	x8,x2,768
  5a:	0b0b0117          	auipc	x2,0xb0b0
	li s4, 0
  5e:	0b3a                	c.slli	x22,0xe
	li s5, 0
  60:	0b390b3b          	0xb390b3b
	li s6, 0
  64:	1301                	c.addi	x6,-32
  66:	0000                	c.unimp
	li s7, 0
  68:	03000d07          	0x3000d07
	li s8, 0
  6c:	3a0e                	c.fldsp	f20,224(x2)
  6e:	390b3b0b          	0x390b3b0b
	li s9, 0
  72:	0013490b          	0x13490b
	li s10, 0
  76:	0800                	c.addi4spn	x8,x2,16
	li s11, 0
  78:	0101                	c.addi	x2,0
  7a:	1349                	c.addi	x6,-14
	li t3, 0
  7c:	1301                	c.addi	x6,-32
  7e:	0000                	c.unimp
	li t4, 0
  80:	2109                	c.jal	482 <tj_malloc+0x192>
  82:	4900                	c.lw	x8,16(x10)
	li t5, 0
  84:	000b2f13          	slti	x30,x22,0
	li t6, 0
  88:	0a00                	c.addi4spn	x8,x2,272
  8a:	0b0b0113          	addi	x2,x22,176 # a3c00b0 <_sp+0xa3b00b0>
	j main
  8e:	0b3a                	c.slli	x22,0xe
  90:	0b390b3b          	0xb390b3b
  94:	1301                	c.addi	x6,-32
  96:	0000                	c.unimp
  98:	03000d0b          	0x3000d0b
  9c:	3a0e                	c.fldsp	f20,224(x2)
  9e:	390b3b0b          	0x390b3b0b
	la sp, _sp
  a2:	3813490b          	0x3813490b
  a6:	0c00000b          	0xc00000b
	sw a0, -8(sp)
  aa:	0b0b000f          	0xb0b000f
	nop
  ae:	0000                	c.unimp
	wfi
  b0:	130d                	c.addi	x6,-29
  b2:	0301                	c.addi	x6,0
void tj_free(void *mem) {
  b4:	0b0e                	c.slli	x22,0x3
  b6:	3b0b3a0b          	0x3b0b3a0b
  ba:	010b390b          	0x10b390b
  be:	0e000013          	addi	x0,x0,224
  c2:	000d                	c.addi	x0,3
  c4:	0b3a0803          	lb	x16,179(x20)
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	0b390b3b          	0xb390b3b
  cc:	1349                	c.addi	x6,-14
  ce:	0b38                	c.addi4spn	x14,x2,408
  d0:	0000                	c.unimp
  d2:	0b000f0f          	0xb000f0f
  d6:	0013490b          	0x13490b
  da:	1000                	c.addi4spn	x8,x2,32
  dc:	0e030113          	addi	x2,x6,224
  e0:	0b3a050b          	0xb3a050b
  e4:	0b390b3b          	0xb390b3b
		exit(1);
  e8:	1301                	c.addi	x6,-32
  ea:	0000                	c.unimp
  ec:	0d11                	c.addi	x26,4
  ee:	0300                	c.addi4spn	x8,x2,384
  f0:	3a0e                	c.fldsp	f20,224(x2)
  f2:	390b3b0b          	0x390b3b0b
	bp = (Header *)mem - 1; //point to block header
  f6:	3813490b          	0x3813490b
  fa:	0005                	c.addi	x0,1
  fc:	1200                	c.addi4spn	x8,x2,288
  fe:	0015                	c.addi	x0,5
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	00001927          	0x1927
 104:	27011513          	0x27011513
 108:	4919                	c.li	x18,6
 10a:	00130113          	addi	x2,x6,1
 10e:	1400                	c.addi4spn	x8,x2,544
		if (p >= p->next && (bp > p || bp < p->next))
 110:	0005                	c.addi	x0,1
 112:	1349                	c.addi	x6,-14
 114:	0000                	c.unimp
 116:	2615                	c.jal	43a <tj_malloc+0x14a>
 118:	4900                	c.lw	x8,16(x10)
 11a:	16000013          	addi	x0,x0,352
 11e:	0e030113          	addi	x2,x6,224
 122:	0b3a050b          	0xb3a050b
 126:	0b39053b          	0xb39053b
 12a:	1301                	c.addi	x6,-32
 12c:	0000                	c.unimp
 12e:	03000d17          	auipc	x26,0x3000
 132:	3a0e                	c.fldsp	f20,224(x2)
 134:	39053b0b          	0x39053b0b
 138:	3813490b          	0x3813490b
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	1800000b          	0x1800000b
 140:	000d                	c.addi	x0,3
 142:	0b3a0e03          	lb	x28,179(x20)
 146:	0b39053b          	0xb39053b
 14a:	1349                	c.addi	x6,-14
 14c:	0538                	c.addi4spn	x14,x2,648
 14e:	0000                	c.unimp
 150:	1319                	c.addi	x6,-26
 152:	0301                	c.addi	x6,0
 154:	0b0e                	c.slli	x22,0x3
 156:	3b0b3a0b          	0x3b0b3a0b
 15a:	3905                	c.jal	fffffd8a <_sp+0xfffefd8a>
 15c:	0013010b          	0x13010b
 160:	1a00                	c.addi4spn	x8,x2,304
 162:	0b0b0113          	addi	x2,x22,176
	if (bp + bp->size == p->next) { //join to upper nbr
 166:	0b3a                	c.slli	x22,0xe
 168:	0b39053b          	0xb39053b
 16c:	1301                	c.addi	x6,-32
 16e:	0000                	c.unimp
 170:	0b01171b          	0xb01171b
 174:	3b0b3a0b          	0x3b0b3a0b
 178:	3905                	c.jal	fffffda8 <_sp+0xfffefda8>
 17a:	0013010b          	0x13010b
 17e:	1c00                	c.addi4spn	x8,x2,560
 180:	000d                	c.addi	x0,3
 182:	0b3a0e03          	lb	x28,179(x20)
		bp->size += p->next->size;
 186:	0b39053b          	0xb39053b
 18a:	1349                	c.addi	x6,-14
 18c:	0000                	c.unimp
 18e:	131d                	c.addi	x6,-25
 190:	0300                	c.addi4spn	x8,x2,384
 192:	3c0e                	c.fldsp	f24,224(x2)
 194:	0019                	c.addi	x0,6
 196:	1e00                	c.addi4spn	x8,x2,816
 198:	0115                	c.addi	x2,5
 19a:	13011927          	0x13011927
 19e:	0000                	c.unimp
 1a0:	341f 0300 3a0e      	0x3a0e0300341f
		bp->next = p->next->next;
 1a6:	39053b0b          	0x39053b0b
 1aa:	3f13490b          	0x3f13490b
 1ae:	3c19                	c.jal	fffffbc4 <_sp+0xfffefbc4>
 1b0:	0019                	c.addi	x0,6
 1b2:	2000                	c.fld	f8,0(x8)
 1b4:	0034                	c.addi4spn	x13,x2,8
 1b6:	0b3a0e03          	lb	x28,179(x20)
 1ba:	0b390b3b          	0xb390b3b
		bp->next = p->next; //insert bp after p in the linked list
 1be:	1349                	c.addi	x6,-14
 1c0:	193c193f 21210000 	0x21210000193c193f
 1c8:	4900                	c.lw	x8,16(x10)
 1ca:	00052f13          	slti	x30,x10,0
	if (p + p->size == bp) { //join to lower nbr
 1ce:	2200                	c.fld	f8,0(x12)
 1d0:	0034                	c.addi4spn	x13,x2,8
 1d2:	0b3a0e03          	lb	x28,179(x20)
 1d6:	0b390b3b          	0xb390b3b
 1da:	1349                	c.addi	x6,-14
 1dc:	1802                	c.slli	x16,0x20
 1de:	0000                	c.unimp
 1e0:	3f012e23          	sw	x16,1020(x2) # b0b0456 <_sp+0xb0a0456>
 1e4:	0319                	c.addi	x6,6
 1e6:	3a0e                	c.fldsp	f20,224(x2)
		p->size += bp->size;
 1e8:	390b3b0b          	0x390b3b0b
 1ec:	1113490b          	0x1113490b
 1f0:	1201                	c.addi	x4,-32
 1f2:	4006                	0x4006
 1f4:	9618                	0x9618
 1f6:	1942                	c.slli	x18,0x30
 1f8:	1301                	c.addi	x6,-32
 1fa:	0000                	c.unimp
 1fc:	3424                	c.fld	f9,104(x8)
 1fe:	0300                	c.addi4spn	x8,x2,384
 200:	3a08                	c.fld	f10,48(x12)
 202:	390b3b0b          	0x390b3b0b
		p->next = bp->next;
 206:	0213490b          	0x213490b
 20a:	0018                	0x18
 20c:	2500                	c.fld	f8,8(x10)
 20e:	012e                	c.slli	x2,0xb
 210:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
		p->next = bp; //again, if the free list is just the base
 218:	0b39                	c.addi	x22,14
 21a:	13491927          	0x13491927
 21e:	0111                	c.addi	x2,4
 220:	0612                	c.slli	x12,0x4
 222:	1840                	c.addi4spn	x8,x2,52
	freep = p;
 224:	01194297          	auipc	x5,0x1194
 228:	26000013          	addi	x0,x0,608
 22c:	0005                	c.addi	x0,1
 22e:	0b3a0e03          	lb	x28,179(x20)
}
 232:	0b390b3b          	0xb390b3b
 236:	1349                	c.addi	x6,-14
 238:	1802                	c.slli	x16,0x20
 23a:	0000                	c.unimp
 23c:	3f012e27          	fsw	f16,1020(x2)
 240:	0319                	c.addi	x6,6
 242:	3a0e                	c.fldsp	f20,224(x2)
static Header* getmoremem(unsigned int total_size) {
 244:	390b3b0b          	0x390b3b0b
 248:	1119270b          	0x1119270b
 24c:	1201                	c.addi	x4,-32
 24e:	4006                	0x4006
 250:	9618                	0x9618
 252:	1942                	c.slli	x18,0x30
 254:	1301                	c.addi	x6,-32
 256:	0000                	c.unimp
	if (avail_mem < total_size) return NULL; //gg, we ran out of mem :P
 258:	0528                	c.addi4spn	x10,x2,648
 25a:	0300                	c.addi4spn	x8,x2,384
 25c:	3a08                	c.fld	f10,48(x12)
 25e:	390b3b0b          	0x390b3b0b
 262:	0213490b          	0x213490b
 266:	0018                	0x18
 268:	2900                	c.fld	f8,16(x10)
 26a:	012e                	c.slli	x2,0xb
 26c:	0803193f 0b3b0b3a 	0xb3b0b3a0803193f
	Header* up = (Header *)next_index;
 274:	0b39                	c.addi	x22,14
 276:	01111927          	0x1111927
 27a:	0612                	c.slli	x12,0x4
	next_index += total_size; //allocate the block
 27c:	1840                	c.addi4spn	x8,x2,52
 27e:	4296                	c.lwsp	x5,68(x2)
 280:	0119                	c.addi	x2,6
 282:	2a000013          	addi	x0,x0,672
 286:	012e                	c.slli	x2,0xb
 288:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
 290:	0b39                	c.addi	x22,14
 292:	13491927          	0x13491927
	avail_mem -= total_size; //deduct from avail mem;
 296:	0111                	c.addi	x2,4
 298:	0612                	c.slli	x12,0x4
 29a:	1840                	c.addi4spn	x8,x2,52
 29c:	4296                	c.lwsp	x5,68(x2)
 29e:	0119                	c.addi	x2,6
 2a0:	2b000013          	addi	x0,x0,688
 2a4:	012e                	c.slli	x2,0xb
 2a6:	0b3a0e03          	lb	x28,179(x20)
 2aa:	0b390b3b          	0xb390b3b
	up->size = total_size - sizeof(Header); //set the size right
 2ae:	13491927          	0x13491927
 2b2:	0111                	c.addi	x2,4
 2b4:	0612                	c.slli	x12,0x4
 2b6:	1840                	c.addi4spn	x8,x2,52
 2b8:	4296                	c.lwsp	x5,68(x2)
 2ba:	0119                	c.addi	x2,6
	tj_free((void *)(++up)); //append the new block to the free list first
 2bc:	2c000013          	addi	x0,x0,704
 2c0:	012e                	c.slli	x2,0xb
 2c2:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
 2ca:	0b39                	c.addi	x22,14
 2cc:	01111927          	0x1111927
 2d0:	0612                	c.slli	x12,0x4
 2d2:	1840                	c.addi4spn	x8,x2,52
	return freep;
 2d4:	4296                	c.lwsp	x5,68(x2)
 2d6:	0019                	c.addi	x0,6
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
	nop
   0:	0024                	c.addi4spn	x9,x2,8
   2:	0000                	c.unimp
	la ra, exit
   4:	0002                	c.slli64	x0
   6:	0000                	c.unimp
   8:	0000                	c.unimp
   a:	0004                	0x4
	...
	mv s0, sp
  14:	0090                	c.addi4spn	x12,x2,64
  16:	0000                	c.unimp
	la gp, __global_pointer$
  18:	00a0                	c.addi4spn	x8,x2,72
  1a:	0000                	c.unimp
  1c:	0014                	0x14
	...
	li t0, 0
  26:	0000                	c.unimp
	li t1, 0
  28:	001c                	0x1c
  2a:	0000                	c.unimp
	li t2, 0
  2c:	0002                	c.slli64	x0
  2e:	0022                	c.slli	x0,0x8
	li s1, 0
  30:	0000                	c.unimp
  32:	0004                	0x4
	li a0, 0
  34:	0000                	c.unimp
  36:	0000                	c.unimp
	li a1, 0
  38:	00b4                	c.addi4spn	x13,x2,72
  3a:	0000                	c.unimp
	li a2, 0
  3c:	06b0                	c.addi4spn	x12,x2,840
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
	nop
   0:	2e747263          	bgeu	x8,x7,2e4 <getmoremem+0xa0>
	la ra, exit
   4:	682f0073          	0x682f0073
   8:	2f656d6f          	jal	x26,562fe <_sp+0x462fe>
	la sp, _sp
   c:	79696873          	csrrsi	x16,0x796,18
  10:	6c75                	c.lui	x24,0x1d
  12:	7569                	c.lui	x10,0xffffa
	mv s0, sp
  14:	7365442f          	0x7365442f
	la gp, __global_pointer$
  18:	706f746b          	0x706f746b
  1c:	6f72672f          	0x6f72672f
	li tp, 0
  20:	7075                	c.lui	x0,0xffffd
  22:	7738                	c.flw	f14,104(x14)
	li t0, 0
  24:	3032                	c.fldsp	f0,296(x2)
  26:	4700                	c.lw	x8,8(x14)
	li t1, 0
  28:	554e                	c.lwsp	x10,240(x2)
  2a:	4120                	c.lw	x8,64(x10)
	li t2, 0
  2c:	2e322053          	0x2e322053
	li s1, 0
  30:	5f003433          	0x5f003433
	li a0, 0
  34:	7364                	c.flw	f9,100(x14)
  36:	61685f6f          	jal	x30,8564c <_sp+0x7564c>
	li a1, 0
  3a:	646e                	c.flwsp	f8,216(x2)
	li a2, 0
  3c:	656c                	c.flw	f11,76(x10)
  3e:	6e00                	c.flw	f8,24(x12)
	li a3, 0
  40:	7865                	c.lui	x16,0xffff9
  42:	5f74                	c.lw	x13,124(x14)
	li a4, 0
  44:	6e69                	c.lui	x28,0x1a
  46:	6564                	c.flw	f9,76(x10)
	li a5, 0
  48:	0078                	c.addi4spn	x14,x2,12
  4a:	725f 6e61 3464      	0x34646e61725f
	li a7, 0
  50:	0038                	c.addi4spn	x14,x2,8
  52:	20554e47          	fmsub.s	f28,f10,f5,f4,rmm
	li s2, 0
  56:	20313143          	fmadd.s	f2,f2,f3,f4,rup
	li s3, 0
  5a:	2e39                	c.jal	378 <tj_malloc+0x88>
	li s4, 0
  5c:	2e32                	c.fldsp	f28,264(x2)
  5e:	2030                	c.fld	f12,64(x8)
	li s5, 0
  60:	6d2d                	c.lui	x26,0xb
  62:	6f6e                	c.flwsp	f30,216(x2)
	li s6, 0
  64:	722d                	c.lui	x4,0xfffeb
  66:	6c65                	c.lui	x24,0x19
	li s7, 0
  68:	7861                	c.lui	x16,0xffff8
  6a:	2d20                	c.fld	f8,88(x10)
	li s8, 0
  6c:	616d                	c.addi16sp	x2,240
  6e:	6372                	c.flwsp	f6,28(x2)
	li s9, 0
  70:	3d68                	c.fld	f10,248(x10)
  72:	7672                	c.flwsp	f12,60(x2)
	li s10, 0
  74:	6d693233          	0x6d693233
	li s11, 0
  78:	2d20                	c.fld	f8,88(x10)
  7a:	616d                	c.addi16sp	x2,240
	li t3, 0
  7c:	6962                	c.flwsp	f18,24(x2)
  7e:	693d                	c.lui	x18,0xf
	li t4, 0
  80:	706c                	c.flw	f11,100(x8)
  82:	2d203233          	0x2d203233
	li t5, 0
  86:	736d                	c.lui	x6,0xffffb
	li t6, 0
  88:	7274                	c.flw	f13,100(x12)
  8a:	6369                	c.lui	x6,0x1a
	j main
  8c:	2d74                	c.fld	f13,216(x10)
  8e:	6c61                	c.lui	x24,0x18
  90:	6769                	c.lui	x14,0x1a
  92:	206e                	c.fldsp	f0,216(x2)
  94:	6d2d                	c.lui	x26,0xb
  96:	7574                	c.flw	f13,108(x10)
  98:	656e                	c.flwsp	f10,216(x2)
  9a:	723d                	c.lui	x4,0xfffef
  9c:	656b636f          	jal	x6,b66f2 <_sp+0xa66f2>
	la sp, _sp
  a0:	2074                	c.fld	f13,192(x8)
  a2:	672d                	c.lui	x14,0xb
  a4:	2d20                	c.fld	f8,88(x10)
  a6:	2d20304f          	0x2d20304f
	sw a0, -8(sp)
  aa:	3d647473          	csrrci	x8,0x3d6,8
	nop
  ae:	31756e67          	0x31756e67
	wfi
  b2:	0031                	c.addi	x0,12
void tj_free(void *mem) {
  b4:	655f 656d 6772      	0x6772656d655f
  ba:	6e65                	c.lui	x28,0x19
  bc:	67007963          	bgeu	x0,x16,72e <main+0x7e>
  c0:	7465                	c.lui	x8,0xffff9
  c2:	6f6d                	c.lui	x30,0x1b
  c4:	6572                	c.flwsp	f10,28(x2)
  c6:	656d                	c.lui	x10,0x1b
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	006d                	c.addi	x0,27
  ca:	6548                	c.flw	f10,12(x10)
  cc:	6461                	c.lui	x8,0x18
  ce:	7265                	c.lui	x4,0xffff9
  d0:	5f00                	c.lw	x8,56(x14)
  d2:	6164                	c.flw	f9,68(x10)
  d4:	6174                	c.flw	f13,68(x10)
  d6:	7400                	c.flw	f8,40(x8)
  d8:	6d65                	c.lui	x26,0x19
  da:	0070                	c.addi4spn	x12,x2,12
  dc:	775f 7263 6f74      	0x6f747263775f
  e2:	626d                	c.lui	x4,0x1b
  e4:	735f 6174 6574      	0x65746174735f
		exit(1);
  ea:	5f00                	c.lw	x8,56(x14)
  ec:	72736377          	0x72736377
  f0:	6f74                	c.flw	f13,92(x14)
  f2:	626d                	c.lui	x4,0x1b
	bp = (Header *)mem - 1; //point to block header
  f4:	74735f73          	csrrwi	x30,0x747,6
  f8:	7461                	c.lui	x8,0xffff8
  fa:	0065                	c.addi	x0,25
  fc:	6f6c                	c.flw	f11,92(x14)
  fe:	676e                	c.flwsp	f14,216(x2)
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	6c20                	c.flw	f8,88(x8)
 102:	20676e6f          	jal	x28,76308 <_sp+0x66308>
 106:	6e75                	c.lui	x28,0x1d
 108:	6e676973          	csrrsi	x18,0x6e6,14
 10c:	6465                	c.lui	x8,0x19
 10e:	6920                	c.flw	f8,80(x10)
		if (p >= p->next && (bp > p || bp < p->next))
 110:	746e                	c.flwsp	f8,248(x2)
 112:	5f00                	c.lw	x8,56(x14)
 114:	626c                	c.flw	f11,68(x12)
 116:	7366                	c.flwsp	f6,120(x2)
 118:	7a69                	c.lui	x20,0xffffa
 11a:	0065                	c.addi	x0,25
 11c:	5f5f 6f6c 6163      	0x61636f6c5f5f
 122:	656c                	c.flw	f11,76(x10)
 124:	745f 5f00 626d      	0x626d5f00745f
 12a:	7472                	c.flwsp	f8,60(x2)
 12c:	5f63776f          	jal	x14,37722 <_sp+0x27722>
 130:	74617473          	csrrci	x8,0x746,2
 134:	0065                	c.addi	x0,25
 136:	775f 7463 6d6f      	0x6d6f7463775f
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	5f62                	c.lwsp	x30,56(x2)
 13e:	74617473          	csrrci	x8,0x746,2
 142:	0065                	c.addi	x0,25
 144:	5f5f 6d74 735f      	0x735f6d745f5f
 14a:	6365                	c.lui	x6,0x19
 14c:	6c00                	c.flw	f8,24(x8)
 14e:	20676e6f          	jal	x28,76354 <_sp+0x66354>
 152:	6f6c                	c.flw	f11,92(x14)
 154:	676e                	c.flwsp	f14,216(x2)
 156:	6920                	c.flw	f8,80(x10)
 158:	746e                	c.flwsp	f8,248(x2)
 15a:	5f00                	c.lw	x8,56(x14)
 15c:	6275                	c.lui	x4,0x1d
 15e:	6675                	c.lui	x12,0x1d
 160:	5f00                	c.lw	x8,56(x14)
 162:	6162                	c.flwsp	f2,24(x2)
	if (bp + bp->size == p->next) { //join to upper nbr
 164:	5f006573          	csrrsi	x10,0x5f0,0
 168:	745f 5f6d 6f68      	0x6f685f6d745f
 16e:	7275                	c.lui	x4,0xffffd
 170:	5f00                	c.lw	x8,56(x14)
 172:	735f 0066 6f5f      	0x6f5f0066735f
 178:	5f6e                	c.lwsp	x30,248(x2)
 17a:	7865                	c.lui	x16,0xffff9
 17c:	7469                	c.lui	x8,0xffffa
 17e:	615f 6772 0073      	0x736772615f
		bp->size += p->next->size;
 184:	635f 6f6f 696b      	0x696b6f6f635f
 18a:	0065                	c.addi	x0,25
 18c:	5f5f 6773 756c      	0x756c67735f5f
 192:	0065                	c.addi	x0,25
 194:	7266                	c.flwsp	f4,120(x2)
 196:	6565                	c.lui	x10,0x19
 198:	0070                	c.addi4spn	x12,x2,12
 19a:	7369                	c.lui	x6,0xffffa
 19c:	6d45                	c.lui	x26,0x11
 19e:	7470                	c.flw	f12,108(x8)
 1a0:	0079                	c.addi	x0,30
 1a2:	656e                	c.flwsp	f10,216(x2)
		bp->next = p->next->next;
 1a4:	646f4e77          	0x646f4e77
 1a8:	0065                	c.addi	x0,25
 1aa:	665f 616c 7367      	0x7367616c665f
 1b0:	5f00                	c.lw	x8,56(x14)
 1b2:	7369                	c.lui	x6,0xffffa
 1b4:	635f 6178 5f00      	0x5f006178635f
 1ba:	69647473          	csrrci	x8,0x696,8
		bp->next = p->next; //insert bp after p in the linked list
 1be:	006e                	c.slli	x0,0x1b
 1c0:	625f 6b6c 6973      	0x69736b6c625f
 1c6:	657a                	c.flwsp	f10,156(x2)
 1c8:	7400                	c.flw	f8,40(x8)
 1ca:	6c61746f          	jal	x8,17890 <_sp+0x7890>
	if (p + p->size == bp) { //join to lower nbr
 1ce:	735f 7a69 0065      	0x657a69735f
 1d4:	6568                	c.flw	f10,76(x10)
 1d6:	6461                	c.lui	x8,0x18
 1d8:	5f00                	c.lw	x8,56(x14)
 1da:	62747663          	bgeu	x8,x7,806 <memset+0xa2>
 1de:	6675                	c.lui	x12,0x1d
 1e0:	5f00                	c.lw	x8,56(x14)
 1e2:	7366666f          	jal	x12,66918 <_sp+0x56918>
 1e6:	7465                	c.lui	x8,0xffff9
		p->size += bp->size;
 1e8:	5f00                	c.lw	x8,56(x14)
 1ea:	626d                	c.lui	x4,0x1b
 1ec:	6f747273          	csrrci	x4,0x6f7,8
 1f0:	5f736377          	0x5f736377
 1f4:	74617473          	csrrci	x8,0x746,2
 1f8:	0065                	c.addi	x0,25
 1fa:	6d5f 7262 656c      	0x656c72626d5f
 200:	5f6e                	c.lwsp	x30,248(x2)
 202:	74617473          	csrrci	x8,0x746,2
		p->next = bp->next;
 206:	0065                	c.addi	x0,25
 208:	665f 616e 6772      	0x6772616e665f
 20e:	665f0073          	0x665f0073
 212:	736e                	c.flwsp	f6,248(x2)
 214:	5f00                	c.lw	x8,56(x14)
 216:	6e676973          	csrrsi	x18,0x6e6,14
		p->next = bp; //again, if the free list is just the base
 21a:	5f00                	c.lw	x8,56(x14)
 21c:	6c66                	c.flwsp	f24,88(x2)
 21e:	5f6b636f          	jal	x6,b6814 <_sp+0xa6814>
 222:	0074                	c.addi4spn	x13,x2,12
	freep = p;
 224:	735f 6474 7265      	0x72656474735f
 22a:	0072                	c.slli	x0,0x1c
 22c:	425f 6769 6e69      	0x6e696769425f
}
 232:	0074                	c.addi4spn	x13,x2,12
 234:	675f 6d61 616d      	0x616d6d61675f
 23a:	735f 6769 676e      	0x676e6769735f
 240:	6d61                	c.lui	x26,0x18
 242:	5f00                	c.lw	x8,56(x14)
static Header* getmoremem(unsigned int total_size) {
 244:	6572                	c.flwsp	f10,28(x2)
 246:	6461                	c.lui	x8,0x18
 248:	5f00                	c.lw	x8,56(x14)
 24a:	6572                	c.flwsp	f10,28(x2)
 24c:	746c7573          	csrrci	x10,0x746,24
 250:	6b5f 5f00 745f      	0x745f5f006b5f
 256:	006d                	c.addi	x0,27
	if (avail_mem < total_size) return NULL; //gg, we ran out of mem :P
 258:	5f5f 6377 6268      	0x626863775f5f
 25e:	5f00                	c.lw	x8,56(x14)
 260:	6f647473          	csrrci	x8,0x6f6,8
 264:	7475                	c.lui	x8,0xffffd
 266:	5f00                	c.lw	x8,56(x14)
 268:	6c747663          	bgeu	x8,x7,934 <heap+0x94>
 26c:	6e65                	c.lui	x28,0x19
 26e:	5f00                	c.lw	x8,56(x14)
	Header* up = (Header *)next_index;
 270:	6966                	c.flwsp	f18,88(x2)
 272:	656c                	c.flw	f11,76(x10)
 274:	5f00                	c.lw	x8,56(x14)
 276:	696e                	c.flwsp	f18,216(x2)
 278:	0073626f          	jal	x4,36a7e <_sp+0x26a7e>
	next_index += total_size; //allocate the block
 27c:	6570                	c.flw	f12,76(x10)
 27e:	6b65                	c.lui	x22,0x19
 280:	7300                	c.flw	f8,32(x14)
 282:	6f68                	c.flw	f10,92(x14)
 284:	7472                	c.flwsp	f8,60(x2)
 286:	7520                	c.flw	f8,104(x10)
 288:	736e                	c.flwsp	f6,248(x2)
 28a:	6769                	c.lui	x14,0x1a
 28c:	656e                	c.flwsp	f10,216(x2)
 28e:	2064                	c.fld	f9,192(x8)
 290:	6e69                	c.lui	x28,0x1a
 292:	0074                	c.addi4spn	x13,x2,12
	avail_mem -= total_size; //deduct from avail mem;
 294:	615f 6574 6978      	0x69786574615f
 29a:	3074                	c.fld	f13,224(x8)
 29c:	5f00                	c.lw	x8,56(x14)
 29e:	6e676973          	csrrsi	x18,0x6e6,14
 2a2:	6c61                	c.lui	x24,0x18
 2a4:	625f 6675 5f00      	0x5f006675625f
 2aa:	7361                	c.lui	x6,0xffff8
	up->size = total_size - sizeof(Header); //set the size right
 2ac:	6d697463          	bgeu	x18,x22,974 <heap+0xd4>
 2b0:	5f65                	c.li	x30,-7
 2b2:	7562                	c.flwsp	f10,56(x2)
 2b4:	0066                	c.slli	x0,0x19
 2b6:	725f 7365 6c75      	0x6c757365725f
	tj_free((void *)(++up)); //append the new block to the free list first
 2bc:	0074                	c.addi4spn	x13,x2,12
 2be:	5f5f 6377 0068      	0x6863775f5f
 2c4:	7270                	c.flw	f12,100(x12)
 2c6:	6f69                	c.lui	x30,0x1a
 2c8:	6972                	c.flwsp	f18,28(x2)
 2ca:	7974                	c.flw	f13,116(x10)
 2cc:	7700                	c.flw	f8,40(x14)
 2ce:	6e69                	c.lui	x28,0x1a
 2d0:	5f74                	c.lw	x13,124(x14)
 2d2:	0074                	c.addi4spn	x13,x2,12
	return freep;
 2d4:	6c5f 636f 006b      	0x6b636f6c5f
 2da:	665f 616c 7367      	0x7367616c665f
}
 2e0:	0032                	c.slli	x0,0xc
 2e2:	775f 6972 6574      	0x65746972775f
 2e8:	5f00                	c.lw	x8,56(x14)
 2ea:	745f 5f6d 6579      	0x65795f6d745f
void *tj_malloc(unsigned int size) {
 2f0:	7261                	c.lui	x4,0xffff8
 2f2:	5f00                	c.lw	x8,56(x14)
 2f4:	6d6e                	c.flwsp	f26,216(x2)
 2f6:	6c61                	c.lui	x24,0x18
 2f8:	6f6c                	c.flw	f11,92(x14)
 2fa:	65740063          	beq	x8,x23,93a <heap+0x9a>
 2fe:	705f7473          	csrrci	x8,0x705,30
 302:	6f72                	c.flwsp	f30,28(x2)
	if (size > sizeof(heap)) return NULL;
 304:	702f7367          	0x702f7367
 308:	6972                	c.flwsp	f18,28(x2)
 30a:	7469726f          	jal	x4,97a50 <_sp+0x87a50>
 30e:	5f79                	c.li	x30,-2
 310:	7571                	c.lui	x10,0xffffc
 312:	7565                	c.lui	x10,0xffff9
 314:	2e65                	c.jal	6cc <main+0x1c>
 316:	6f6c0063          	beq	x24,x22,9f6 <heap+0x156>
	if ((size & 3) != 0) {
 31a:	676e                	c.flwsp	f14,216(x2)
 31c:	6420                	c.flw	f8,72(x8)
 31e:	6c62756f          	jal	x10,279e4 <_sp+0x179e4>
 322:	0065                	c.addi	x0,25
		size = size + 4 - (size & 3);
 324:	6e5f 7865 6674      	0x667478656e5f
 32a:	5f00                	c.lw	x8,56(x14)
 32c:	745f 5f6d 6f6d      	0x6f6d5f6d745f
 332:	006e                	c.slli	x0,0x1b
	unsigned int total_size = size + sizeof(Header); //need to include the header size as well
 334:	615f 6574 6978      	0x69786574615f
 33a:	0074                	c.addi4spn	x13,x2,12
 33c:	6f627573          	csrrci	x10,0x6f6,4
	prevp = freep;
 340:	7470                	c.flw	f12,108(x8)
 342:	7261                	c.lui	x4,0xffff8
 344:	5f5f0067          	jalr	x0,1525(x30) # 1a5f5 <_sp+0xa5f5>
 348:	64696473          	csrrsi	x8,0x646,18
	if (prevp == NULL) {
 34c:	6e69                	c.lui	x28,0x1a
 34e:	7469                	c.lui	x8,0xffffa
 350:	5f00                	c.lw	x8,56(x14)
 352:	5f66666f          	jal	x12,66948 <_sp+0x56948>
		prevp = &base;
 356:	0074                	c.addi4spn	x13,x2,12
 358:	6a74                	c.flw	f13,84(x12)
 35a:	635f 6c61 6f6c      	0x6f6c6c61635f
		freep = prevp;
 360:	665f0063          	beq	x30,x5,9c0 <heap+0x120>
 364:	6572                	c.flwsp	f10,28(x2)
 366:	6c65                	c.lui	x24,0x19
 368:	7369                	c.lui	x6,0xffffa
 36a:	0074                	c.addi4spn	x13,x2,12
		base.next = freep;
 36c:	4c5f 434f 5f4b      	0x5f4b434f4c5f
 372:	4552                	c.lwsp	x10,20(x2)
 374:	53525543          	fmadd.d	f10,f4,f21,f10,unknown
 378:	5649                	c.li	x12,-14
 37a:	5f45                	c.li	x30,-15
 37c:	0054                	c.addi4spn	x13,x2,4
 37e:	6e75                	c.lui	x28,0x1d
		base.size = 0;
 380:	6e676973          	csrrsi	x18,0x6e6,14
 384:	6465                	c.lui	x8,0x19
 386:	6320                	c.flw	f8,64(x14)
 388:	6168                	c.flw	f10,68(x10)
 38a:	0072                	c.slli	x0,0x1c
	for (p = prevp->next; ;prevp = p, p = p->next) {
 38c:	6e5f 7765 6e00      	0x6e0077656e5f
 392:	0065646f          	jal	x8,56398 <_sp+0x46398>
 396:	7570                	c.flw	f12,108(x10)
		if (p->size >= size) { //big enough
 398:	5f006873          	csrrsi	x16,0x5f0,0
 39c:	5f68                	c.lw	x10,124(x14)
 39e:	7265                	c.lui	x4,0xffff9
 3a0:	6e72                	c.flwsp	f28,28(x2)
 3a2:	6873006f          	jal	x0,31228 <_sp+0x21228>
 3a6:	2074726f          	jal	x4,47dac <_sp+0x37dac>
			if (p->size == size) // exact size
 3aa:	6e69                	c.lui	x28,0x1a
 3ac:	0074                	c.addi4spn	x13,x2,12
 3ae:	5f5f 6d74 795f      	0x795f6d745f5f
 3b4:	6164                	c.flw	f9,68(x10)
 3b6:	0079                	c.addi	x0,30
				prevp->next = p->next; // just return that block
 3b8:	5f5f 6273 6675      	0x667562735f5f
 3be:	5f00                	c.lw	x8,56(x14)
 3c0:	6f69                	c.lui	x30,0x1a
 3c2:	7362                	c.flwsp	f6,56(x2)
 3c4:	5f00                	c.lw	x8,56(x14)
 3c6:	465f 4c49 0045      	0x454c49465f
				p->size -= total_size; //break up the block
 3cc:	6d5f 7362 6174      	0x617473626d5f
 3d2:	6574                	c.flw	f13,76(x10)
 3d4:	745f 5f00 735f      	0x735f5f00745f
 3da:	4946                	c.lwsp	x18,80(x2)
 3dc:	454c                	c.lw	x11,12(x10)
 3de:	5f00                	c.lw	x8,56(x14)
 3e0:	626d                	c.lui	x4,0x1b
 3e2:	74617473          	csrrci	x8,0x746,2
				p += p->size;
 3e6:	0065                	c.addi	x0,25
 3e8:	725f 6e61 5f64      	0x5f646e61725f
 3ee:	656e                	c.flwsp	f10,216(x2)
 3f0:	7478                	c.flw	f14,108(x8)
 3f2:	5f00                	c.lw	x8,56(x14)
 3f4:	626d                	c.lui	x4,0x1b
 3f6:	656c                	c.flw	f11,76(x10)
 3f8:	5f6e                	c.lwsp	x30,248(x2)
 3fa:	74617473          	csrrci	x8,0x746,2
				p->size = size;
 3fe:	0065                	c.addi	x0,25
 400:	695f 636e 5f00      	0x5f00636e695f
 406:	6e69                	c.lui	x28,0x1a
			freep = prevp;
 408:	0064                	c.addi4spn	x9,x2,12
 40a:	6a74                	c.flw	f13,84(x12)
 40c:	6d5f 6c61 6f6c      	0x6f6c6c616d5f
 412:	6c5f0063          	beq	x30,x5,ad2 <heap+0x232>
			return (void *)(++p);
 416:	6c61636f          	jal	x6,16adc <_sp+0x6adc>
 41a:	0065                	c.addi	x0,25
 41c:	5f5f 6c63 6165      	0x61656c635f5f
 422:	756e                	c.flwsp	f10,248(x2)
 424:	0070                	c.addi4spn	x12,x2,12
 426:	755f 736e 6570      	0x6570736e755f
		if (p == freep) //wrapped around free list
 42c:	69666963          	bltu	x12,x22,abe <heap+0x21e>
 430:	6465                	c.lui	x8,0x19
 432:	6c5f 636f 6c61      	0x6c61636f6c5f
			if ((p = getmoremem(total_size)) == NULL) //if the heap runs out
 438:	5f65                	c.li	x30,-7
 43a:	6e69                	c.lui	x28,0x1a
 43c:	6f66                	c.flwsp	f30,88(x2)
 43e:	5f00                	c.lw	x8,56(x14)
 440:	616d                	c.addi16sp	x2,240
 442:	7778                	c.flw	f14,108(x14)
 444:	7364                	c.flw	f9,100(x14)
 446:	5f00                	c.lw	x8,56(x14)
 448:	6572                	c.flwsp	f10,28(x2)
 44a:	6e65                	c.lui	x28,0x19
 44c:	0074                	c.addi4spn	x13,x2,12
 44e:	735f 6565 0064      	0x646565735f
				return NULL; //well, you got nothing left, gg
 454:	5f5f 6f63 6e75      	0x6e756f635f5f
	for (p = prevp->next; ;prevp = p, p = p->next) {
 45a:	0074                	c.addi4spn	x13,x2,12
 45c:	5f5f 6176 756c      	0x756c61765f5f
 462:	0065                	c.addi	x0,25
 464:	735f 6565 006b      	0x6b6565735f
 46a:	665f 6f70 5f73      	0x5f736f70665f
}
 470:	0074                	c.addi4spn	x13,x2,12
 472:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
 478:	6e69                	c.lui	x28,0x1a
 47a:	7000                	c.flw	f8,32(x8)
 47c:	6572                	c.flwsp	f10,28(x2)
 47e:	7076                	c.flwsp	f0,124(x2)
 480:	5f00                	c.lw	x8,56(x14)
 482:	756d                	c.lui	x10,0xffffb
void *tj_calloc(unsigned int size) {
 484:	746c                	c.flw	f11,108(x8)
 486:	5f00                	c.lw	x8,56(x14)
 488:	74727473          	csrrci	x8,0x747,4
 48c:	6c5f6b6f          	jal	x22,f7350 <_sp+0xe7350>
 490:	7361                	c.lui	x6,0xffff8
 492:	0074                	c.addi4spn	x13,x2,12
 494:	665f 746e 7079      	0x7079746e665f
	void *mem = tj_malloc(size);
 49a:	7365                	c.lui	x6,0xffff9
 49c:	6800                	c.flw	f8,16(x8)
 49e:	6165                	c.addi16sp	x2,112
 4a0:	0070                	c.addi4spn	x12,x2,12
 4a2:	615f 6464 5f00      	0x5f006464615f
	memset(mem, 0, size);
 4a8:	555f 6f4c 676e      	0x676e6f4c555f
 4ae:	5f00                	c.lw	x8,56(x14)
 4b0:	64746567          	0x64746567
 4b4:	7461                	c.lui	x8,0xffff8
 4b6:	5f65                	c.li	x30,-7
 4b8:	7265                	c.lui	x4,0xffff9
 4ba:	0072                	c.slli	x0,0x1c
	return mem;
 4bc:	675f 6f6c 6162      	0x61626f6c675f
}
 4c2:	5f6c                	c.lw	x11,124(x14)
 4c4:	6d69                	c.lui	x26,0x1a
 4c6:	7570                	c.flw	f12,108(x10)
 4c8:	6572                	c.flwsp	f10,28(x2)
 4ca:	705f 7274 5f00      	0x5f007274705f
 4d0:	6e75                	c.lui	x28,0x1d
 4d2:	7375                	c.lui	x6,0xffffd
{ 
 4d4:	6465                	c.lui	x8,0x19
 4d6:	725f 6e61 0064      	0x646e61725f
 4dc:	775f 7364 5f00      	0x5f007364775f
 4e2:	745f 5f6d 6477      	0x64775f6d745f
 4e8:	7961                	c.lui	x18,0xffff8
 4ea:	5f00                	c.lw	x8,56(x14)
    Node* temp = (Node*)tj_malloc(sizeof(Node)); 
 4ec:	65756c67          	0x65756c67
 4f0:	7400                	c.flw	f8,40(x8)
 4f2:	5f6a                	c.lwsp	x30,184(x2)
 4f4:	7266                	c.flwsp	f4,120(x2)
 4f6:	6565                	c.lui	x10,0x19
 4f8:	5f00                	c.lw	x8,56(x14)
 4fa:	7a697373          	csrrci	x6,0x7a6,18
    temp->data = d; 
 4fe:	5f65                	c.li	x30,-7
 500:	0074                	c.addi4spn	x13,x2,12
 502:	6c5f 3436 5f61      	0x5f6134366c5f
    temp->priority = p; 
 508:	7562                	c.flwsp	f10,56(x2)
 50a:	0066                	c.slli	x0,0x19
 50c:	735f 6769 665f      	0x665f6769735f
 512:	6e75                	c.lui	x28,0x1d
    temp->next = NULL; 
 514:	6e5f0063          	beq	x30,x5,bf4 <heap+0x354>
 518:	7562                	c.flwsp	f10,56(x2)
 51a:	0066                	c.slli	x0,0x19
    return temp; 
 51c:	755f 756e 6573      	0x6573756e755f
} 
 522:	0064                	c.addi4spn	x9,x2,12
 524:	5f5f 6d74 695f      	0x695f6d745f5f
 52a:	74736473          	csrrsi	x8,0x747,6
 52e:	5f00                	c.lw	x8,56(x14)
 530:	6f6c                	c.flw	f11,92(x14)
 532:	746c6163          	bltu	x24,x6,c74 <heap+0x3d4>
{ 
 536:	6d69                	c.lui	x26,0x1a
 538:	5f65                	c.li	x30,-7
 53a:	7562                	c.flwsp	f10,56(x2)
 53c:	0066                	c.slli	x0,0x19
 53e:	635f 6f6c 6573      	0x65736f6c635f
    return (*head)->data; 
 544:	5f00                	c.lw	x8,56(x14)
 546:	3472                	c.fldsp	f8,312(x2)
 548:	0038                	c.addi4spn	x14,x2,8
 54a:	7661                	c.lui	x12,0xffff8
 54c:	6961                	c.lui	x18,0x18
 54e:	5f6c                	c.lw	x11,124(x14)
} 
 550:	656d                	c.lui	x10,0x1b
 552:	006d                	c.addi	x0,27
 554:	72617473          	csrrci	x8,0x726,2
 558:	0074                	c.addi4spn	x13,x2,12
 55a:	6d5f 7462 776f      	0x776f74626d5f
{ 
 560:	74735f63          	bge	x6,x7,cbe <heap+0x41e>
 564:	7461                	c.lui	x8,0xffff8
 566:	0065                	c.addi	x0,25
 568:	705f 7335 6d00      	0x6d007335705f
 56e:	6961                	c.lui	x18,0x18
 570:	006e                	c.slli	x0,0x1b
 572:	6568                	c.flw	f10,76(x10)
    Node* temp = *head; 
 574:	6461                	c.lui	x8,0x18
 576:	7265                	c.lui	x4,0xffff9
 578:	5f00                	c.lw	x8,56(x14)
 57a:	745f 5f6d 646d      	0x646d5f6d745f
    (*head) = (*head)->next; 
 580:	7961                	c.lui	x18,0xffff8
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
	nop
   0:	ffff                	0xffff
   2:	ffff                	0xffff
	...
	la sp, _sp
   c:	0090                	c.addi4spn	x12,x2,64
   e:	0000                	c.unimp
  10:	00a0                	c.addi4spn	x8,x2,72
  12:	0000                	c.unimp
	mv s0, sp
  14:	00b4                	c.addi4spn	x13,x2,72
	...

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
	nop
   0:	000c                	0xc
   2:	0000                	c.unimp
	la ra, exit
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	7c010003          	lb	x0,1984(x2)
	la sp, _sp
   c:	0d01                	c.addi	x26,0
   e:	0002                	c.slli64	x0
  10:	0024                	c.addi4spn	x9,x2,8
  12:	0000                	c.unimp
	mv s0, sp
  14:	0000                	c.unimp
  16:	0000                	c.unimp
	la gp, __global_pointer$
  18:	00b4                	c.addi4spn	x13,x2,72
  1a:	0000                	c.unimp
  1c:	0190                	c.addi4spn	x12,x2,192
  1e:	0000                	c.unimp
	li tp, 0
  20:	0e44                	c.addi4spn	x9,x2,788
  22:	4830                	c.lw	x12,80(x8)
	li t0, 0
  24:	0181                	c.addi	x3,0
  26:	0288                	c.addi4spn	x10,x2,320
	li t1, 0
  28:	0c44                	c.addi4spn	x9,x2,532
  2a:	0008                	0x8
	li t2, 0
  2c:	c1017403          	0xc1017403
	li s1, 0
  30:	c844                	c.sw	x9,20(x8)
  32:	020c                	c.addi4spn	x11,x2,256
	li a0, 0
  34:	4430                	c.lw	x12,72(x8)
  36:	000e                	c.slli	x0,0x3
	li a1, 0
  38:	0024                	c.addi4spn	x9,x2,8
  3a:	0000                	c.unimp
	li a2, 0
  3c:	0000                	c.unimp
  3e:	0000                	c.unimp
	li a3, 0
  40:	0244                	c.addi4spn	x9,x2,260
  42:	0000                	c.unimp
	li a4, 0
  44:	00ac                	c.addi4spn	x11,x2,72
  46:	0000                	c.unimp
	li a5, 0
  48:	0e44                	c.addi4spn	x9,x2,788
  4a:	4830                	c.lw	x12,80(x8)
	li a6, 0
  4c:	0181                	c.addi	x3,0
  4e:	0288                	c.addi4spn	x10,x2,320
	li a7, 0
  50:	0c44                	c.addi4spn	x9,x2,532
  52:	0008                	0x8
	li s2, 0
  54:	9002                	c.ebreak
  56:	44c1                	c.li	x9,16
	li s3, 0
  58:	0cc8                	c.addi4spn	x10,x2,596
  5a:	3002                	c.fldsp	f0,32(x2)
	li s4, 0
  5c:	0e44                	c.addi4spn	x9,x2,788
  5e:	0000                	c.unimp
	li s5, 0
  60:	0024                	c.addi4spn	x9,x2,8
  62:	0000                	c.unimp
	li s6, 0
  64:	0000                	c.unimp
  66:	0000                	c.unimp
	li s7, 0
  68:	02f0                	c.addi4spn	x12,x2,332
  6a:	0000                	c.unimp
	li s8, 0
  6c:	0194                	c.addi4spn	x13,x2,192
  6e:	0000                	c.unimp
	li s9, 0
  70:	0e44                	c.addi4spn	x9,x2,788
  72:	4830                	c.lw	x12,80(x8)
	li s10, 0
  74:	0181                	c.addi	x3,0
  76:	0288                	c.addi4spn	x10,x2,320
	li s11, 0
  78:	0c44                	c.addi4spn	x9,x2,532
  7a:	0008                	0x8
	li t3, 0
  7c:	c1017803          	0xc1017803
	li t4, 0
  80:	c844                	c.sw	x9,20(x8)
  82:	020c                	c.addi4spn	x11,x2,256
	li t5, 0
  84:	4430                	c.lw	x12,72(x8)
  86:	000e                	c.slli	x0,0x3
	li t6, 0
  88:	0024                	c.addi4spn	x9,x2,8
  8a:	0000                	c.unimp
	j main
  8c:	0000                	c.unimp
  8e:	0000                	c.unimp
  90:	0484                	c.addi4spn	x9,x2,576
  92:	0000                	c.unimp
  94:	0050                	c.addi4spn	x12,x2,4
  96:	0000                	c.unimp
  98:	0e44                	c.addi4spn	x9,x2,788
  9a:	4830                	c.lw	x12,80(x8)
  9c:	0181                	c.addi	x3,0
  9e:	0288                	c.addi4spn	x10,x2,320
	la sp, _sp
  a0:	0c44                	c.addi4spn	x9,x2,532
  a2:	0008                	0x8
  a4:	c174                	c.sw	x13,68(x10)
  a6:	c844                	c.sw	x9,20(x8)
	sw a0, -8(sp)
  a8:	020c                	c.addi4spn	x11,x2,256
  aa:	4430                	c.lw	x12,72(x8)
	nop
  ac:	000e                	c.slli	x0,0x3
  ae:	0000                	c.unimp
	wfi
  b0:	0024                	c.addi4spn	x9,x2,8
  b2:	0000                	c.unimp
void tj_free(void *mem) {
  b4:	0000                	c.unimp
  b6:	0000                	c.unimp
  b8:	04d4                	c.addi4spn	x13,x2,580
  ba:	0000                	c.unimp
  bc:	0060                	c.addi4spn	x8,x2,12
  be:	0000                	c.unimp
  c0:	0e44                	c.addi4spn	x9,x2,788
  c2:	4830                	c.lw	x12,80(x8)
  c4:	0181                	c.addi	x3,0
  c6:	0288                	c.addi4spn	x10,x2,320
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	0c44                	c.addi4spn	x9,x2,532
  ca:	0008                	0x8
  cc:	4402                	c.lwsp	x8,0(x2)
  ce:	44c1                	c.li	x9,16
  d0:	0cc8                	c.addi4spn	x10,x2,596
  d2:	3002                	c.fldsp	f0,32(x2)
  d4:	0e44                	c.addi4spn	x9,x2,788
  d6:	0000                	c.unimp
  d8:	0020                	c.addi4spn	x8,x2,8
  da:	0000                	c.unimp
  dc:	0000                	c.unimp
  de:	0000                	c.unimp
  e0:	0534                	c.addi4spn	x13,x2,648
  e2:	0000                	c.unimp
  e4:	002c                	c.addi4spn	x11,x2,8
  e6:	0000                	c.unimp
		exit(1);
  e8:	0e44                	c.addi4spn	x9,x2,788
  ea:	4420                	c.lw	x8,72(x8)
  ec:	0188                	c.addi4spn	x10,x2,192
  ee:	0c44                	c.addi4spn	x9,x2,532
  f0:	0008                	0x8
  f2:	c858                	c.sw	x14,20(x8)
	bp = (Header *)mem - 1; //point to block header
  f4:	020c                	c.addi4spn	x11,x2,256
  f6:	4420                	c.lw	x8,72(x8)
  f8:	000e                	c.slli	x0,0x3
  fa:	0000                	c.unimp
  fc:	0024                	c.addi4spn	x9,x2,8
  fe:	0000                	c.unimp
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	0000                	c.unimp
 102:	0000                	c.unimp
 104:	0560                	c.addi4spn	x8,x2,652
 106:	0000                	c.unimp
 108:	0054                	c.addi4spn	x13,x2,4
 10a:	0000                	c.unimp
 10c:	0e44                	c.addi4spn	x9,x2,788
 10e:	4830                	c.lw	x12,80(x8)
		if (p >= p->next && (bp > p || bp < p->next))
 110:	0181                	c.addi	x3,0
 112:	0288                	c.addi4spn	x10,x2,320
 114:	0c44                	c.addi4spn	x9,x2,532
 116:	0008                	0x8
 118:	c178                	c.sw	x14,68(x10)
 11a:	c844                	c.sw	x9,20(x8)
 11c:	020c                	c.addi4spn	x11,x2,256
 11e:	4430                	c.lw	x12,72(x8)
 120:	000e                	c.slli	x0,0x3
 122:	0000                	c.unimp
 124:	0024                	c.addi4spn	x9,x2,8
 126:	0000                	c.unimp
 128:	0000                	c.unimp
 12a:	0000                	c.unimp
 12c:	05b4                	c.addi4spn	x13,x2,712
 12e:	0000                	c.unimp
 130:	00cc                	c.addi4spn	x11,x2,68
 132:	0000                	c.unimp
 134:	0e44                	c.addi4spn	x9,x2,788
 136:	4830                	c.lw	x12,80(x8)
 138:	0181                	c.addi	x3,0
 13a:	0288                	c.addi4spn	x10,x2,320
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	0c44                	c.addi4spn	x9,x2,532
 13e:	0008                	0x8
 140:	b002                	c.fsdsp	f0,32(x2)
 142:	44c1                	c.li	x9,16
 144:	0cc8                	c.addi4spn	x10,x2,596
 146:	3002                	c.fldsp	f0,32(x2)
 148:	0e44                	c.addi4spn	x9,x2,788
 14a:	0000                	c.unimp
 14c:	0020                	c.addi4spn	x8,x2,8
 14e:	0000                	c.unimp
 150:	0000                	c.unimp
 152:	0000                	c.unimp
 154:	0680                	c.addi4spn	x8,x2,832
 156:	0000                	c.unimp
 158:	0030                	c.addi4spn	x12,x2,8
 15a:	0000                	c.unimp
 15c:	0e44                	c.addi4spn	x9,x2,788
 15e:	4420                	c.lw	x8,72(x8)
 160:	0188                	c.addi4spn	x10,x2,192
 162:	0c44                	c.addi4spn	x9,x2,532
	if (bp + bp->size == p->next) { //join to upper nbr
 164:	0008                	0x8
 166:	c85c                	c.sw	x15,20(x8)
 168:	020c                	c.addi4spn	x11,x2,256
 16a:	4420                	c.lw	x8,72(x8)
 16c:	000e                	c.slli	x0,0x3
 16e:	0000                	c.unimp
 170:	0024                	c.addi4spn	x9,x2,8
 172:	0000                	c.unimp
 174:	0000                	c.unimp
 176:	0000                	c.unimp
 178:	06b0                	c.addi4spn	x12,x2,840
 17a:	0000                	c.unimp
 17c:	00b4                	c.addi4spn	x13,x2,72
 17e:	0000                	c.unimp
 180:	0e44                	c.addi4spn	x9,x2,788
 182:	4820                	c.lw	x8,80(x8)
		bp->size += p->next->size;
 184:	0181                	c.addi	x3,0
 186:	0288                	c.addi4spn	x10,x2,320
 188:	0c44                	c.addi4spn	x9,x2,532
 18a:	0008                	0x8
 18c:	9802                	c.jalr	x16
 18e:	44c1                	c.li	x9,16
 190:	0cc8                	c.addi4spn	x10,x2,596
 192:	2002                	c.fldsp	f0,0(x2)
 194:	0e44                	c.addi4spn	x9,x2,788
	...
