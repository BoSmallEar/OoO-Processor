
program.debug.elf:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <crt>:

.global crt
.section .text.prologue, "ax"
.align 4
crt:
	nop
   0:	00000013          	addi	x0,x0,0
	la ra, exit
   4:	00000097          	auipc	x1,0x0
   8:	09c08093          	addi	x1,x1,156 # a0 <exit>
	la sp, _sp
   c:	00010117          	auipc	x2,0x10
  10:	ff410113          	addi	x2,x2,-12 # 10000 <_sp>
	mv s0, sp
  14:	00010413          	addi	x8,x2,0
	la gp, __global_pointer$
  18:	00001197          	auipc	x3,0x1
  1c:	c6818193          	addi	x3,x3,-920 # c80 <__global_pointer$>
	li tp, 0
  20:	00000213          	addi	x4,x0,0
	li t0, 0
  24:	00000293          	addi	x5,x0,0
	li t1, 0
  28:	00000313          	addi	x6,x0,0
	li t2, 0
  2c:	00000393          	addi	x7,x0,0
	li s1, 0
  30:	00000493          	addi	x9,x0,0
	li a0, 0
  34:	00000513          	addi	x10,x0,0
	li a1, 0
  38:	00000593          	addi	x11,x0,0
	li a2, 0
  3c:	00000613          	addi	x12,x0,0
	li a3, 0
  40:	00000693          	addi	x13,x0,0
	li a4, 0
  44:	00000713          	addi	x14,x0,0
	li a5, 0
  48:	00000793          	addi	x15,x0,0
	li a6, 0
  4c:	00000813          	addi	x16,x0,0
	li a7, 0
  50:	00000893          	addi	x17,x0,0
	li s2, 0
  54:	00000913          	addi	x18,x0,0
	li s3, 0
  58:	00000993          	addi	x19,x0,0
	li s4, 0
  5c:	00000a13          	addi	x20,x0,0
	li s5, 0
  60:	00000a93          	addi	x21,x0,0
	li s6, 0
  64:	00000b13          	addi	x22,x0,0
	li s7, 0
  68:	00000b93          	addi	x23,x0,0
	li s8, 0
  6c:	00000c13          	addi	x24,x0,0
	li s9, 0
  70:	00000c93          	addi	x25,x0,0
	li s10, 0
  74:	00000d13          	addi	x26,x0,0
	li s11, 0
  78:	00000d93          	addi	x27,x0,0
	li t3, 0
  7c:	00000e13          	addi	x28,x0,0
	li t4, 0
  80:	00000e93          	addi	x29,x0,0
	li t5, 0
  84:	00000f13          	addi	x30,x0,0
	li t6, 0
  88:	00000f93          	addi	x31,x0,0
	j main
  8c:	3840006f          	jal	x0,410 <main>
	...

000000a0 <exit>:

.global exit
.section .text
.align 4
exit:
	la sp, _sp
  a0:	00010117          	auipc	x2,0x10
  a4:	f6010113          	addi	x2,x2,-160 # 10000 <_sp>
	sw a0, -8(sp)
  a8:	fea12c23          	sw	x10,-8(x2)
	nop
  ac:	00000013          	addi	x0,x0,0
	wfi
  b0:	10500073          	wfi

000000b4 <isSafe>:

int solveKTUtil(int x, int y, int movei, int sol[N][N],int xMove[],  int yMove[]);

/* A utility function to check if i,j are valid indexes
   for N*N chessboard */
int isSafe(int x, int y, int sol[N][N]) {
  b4:	fe010113          	addi	x2,x2,-32
  b8:	00812e23          	sw	x8,28(x2)
  bc:	02010413          	addi	x8,x2,32
  c0:	fea42623          	sw	x10,-20(x8)
  c4:	feb42423          	sw	x11,-24(x8)
  c8:	fec42223          	sw	x12,-28(x8)
    return ( x >= 0 && x < N && y >= 0 && y < N && sol[x][y] == -1);
  cc:	fec42783          	lw	x15,-20(x8)
  d0:	0607c263          	blt	x15,x0,134 <isSafe+0x80>
  d4:	fec42703          	lw	x14,-20(x8)
  d8:	00200793          	addi	x15,x0,2
  dc:	04e7cc63          	blt	x15,x14,134 <isSafe+0x80>
  e0:	fe842783          	lw	x15,-24(x8)
  e4:	0407c863          	blt	x15,x0,134 <isSafe+0x80>
  e8:	fe842703          	lw	x14,-24(x8)
  ec:	00200793          	addi	x15,x0,2
  f0:	04e7c263          	blt	x15,x14,134 <isSafe+0x80>
  f4:	fec42703          	lw	x14,-20(x8)
  f8:	00070793          	addi	x15,x14,0
  fc:	00179793          	slli	x15,x15,0x1
 100:	00e787b3          	add	x15,x15,x14
 104:	00279793          	slli	x15,x15,0x2
 108:	00078713          	addi	x14,x15,0
 10c:	fe442783          	lw	x15,-28(x8)
 110:	00e78733          	add	x14,x15,x14
 114:	fe842783          	lw	x15,-24(x8)
 118:	00279793          	slli	x15,x15,0x2
 11c:	00f707b3          	add	x15,x14,x15
 120:	0007a703          	lw	x14,0(x15)
 124:	fff00793          	addi	x15,x0,-1
 128:	00f71663          	bne	x14,x15,134 <isSafe+0x80>
 12c:	00100793          	addi	x15,x0,1
 130:	0080006f          	jal	x0,138 <isSafe+0x84>
 134:	00000793          	addi	x15,x0,0
}
 138:	00078513          	addi	x10,x15,0
 13c:	01c12403          	lw	x8,28(x2)
 140:	02010113          	addi	x2,x2,32
 144:	00008067          	jalr	x0,0(x1)

00000148 <solveKT>:
   Backtracking.  This function mainly uses solveKTUtil()
   to solve the problem. It returns false if no complete
   tour is possible, otherwise return true and prints the
   tour.
*/
int solveKT() {
 148:	f8010113          	addi	x2,x2,-128
 14c:	06112e23          	sw	x1,124(x2)
 150:	06812c23          	sw	x8,120(x2)
 154:	08010413          	addi	x8,x2,128
    int sol[N][N];

    /* Initialization of solution matrix */
    for (int x = 0; x < N; x++)
 158:	fe042623          	sw	x0,-20(x8)
 15c:	05c0006f          	jal	x0,1b8 <solveKT+0x70>
        for (int y = 0; y < N; y++)
 160:	fe042423          	sw	x0,-24(x8)
 164:	03c0006f          	jal	x0,1a0 <solveKT+0x58>
            sol[x][y] = -1;
 168:	fec42703          	lw	x14,-20(x8)
 16c:	00070793          	addi	x15,x14,0
 170:	00179793          	slli	x15,x15,0x1
 174:	00e787b3          	add	x15,x15,x14
 178:	fe842703          	lw	x14,-24(x8)
 17c:	00e787b3          	add	x15,x15,x14
 180:	00279793          	slli	x15,x15,0x2
 184:	ff040713          	addi	x14,x8,-16
 188:	00f707b3          	add	x15,x14,x15
 18c:	fff00713          	addi	x14,x0,-1
 190:	fce7aa23          	sw	x14,-44(x15)
        for (int y = 0; y < N; y++)
 194:	fe842783          	lw	x15,-24(x8)
 198:	00178793          	addi	x15,x15,1
 19c:	fef42423          	sw	x15,-24(x8)
 1a0:	fe842703          	lw	x14,-24(x8)
 1a4:	00200793          	addi	x15,x0,2
 1a8:	fce7d0e3          	bge	x15,x14,168 <solveKT+0x20>
    for (int x = 0; x < N; x++)
 1ac:	fec42783          	lw	x15,-20(x8)
 1b0:	00178793          	addi	x15,x15,1
 1b4:	fef42623          	sw	x15,-20(x8)
 1b8:	fec42703          	lw	x14,-20(x8)
 1bc:	00200793          	addi	x15,x0,2
 1c0:	fae7d0e3          	bge	x15,x14,160 <solveKT+0x18>

    /* xMove[] and yMove[] define next move of Knight.
       xMove[] is for next value of x coordinate
       yMove[] is for next value of y coordinate */
    int xMove[8] = {  2, 1, -1, -2, -2, -1,  1,  2 };
 1c4:	000007b7          	lui	x15,0x0
 1c8:	48078793          	addi	x15,x15,1152 # 480 <main+0x70>
 1cc:	0007a883          	lw	x17,0(x15)
 1d0:	0047a803          	lw	x16,4(x15)
 1d4:	0087a503          	lw	x10,8(x15)
 1d8:	00c7a583          	lw	x11,12(x15)
 1dc:	0107a603          	lw	x12,16(x15)
 1e0:	0147a683          	lw	x13,20(x15)
 1e4:	0187a703          	lw	x14,24(x15)
 1e8:	01c7a783          	lw	x15,28(x15)
 1ec:	fb142223          	sw	x17,-92(x8)
 1f0:	fb042423          	sw	x16,-88(x8)
 1f4:	faa42623          	sw	x10,-84(x8)
 1f8:	fab42823          	sw	x11,-80(x8)
 1fc:	fac42a23          	sw	x12,-76(x8)
 200:	fad42c23          	sw	x13,-72(x8)
 204:	fae42e23          	sw	x14,-68(x8)
 208:	fcf42023          	sw	x15,-64(x8)
    int yMove[8] = {  1, 2,  2,  1, -1, -2, -2, -1 };
 20c:	000007b7          	lui	x15,0x0
 210:	4a078793          	addi	x15,x15,1184 # 4a0 <main+0x90>
 214:	0007a883          	lw	x17,0(x15)
 218:	0047a803          	lw	x16,4(x15)
 21c:	0087a503          	lw	x10,8(x15)
 220:	00c7a583          	lw	x11,12(x15)
 224:	0107a603          	lw	x12,16(x15)
 228:	0147a683          	lw	x13,20(x15)
 22c:	0187a703          	lw	x14,24(x15)
 230:	01c7a783          	lw	x15,28(x15)
 234:	f9142223          	sw	x17,-124(x8)
 238:	f9042423          	sw	x16,-120(x8)
 23c:	f8a42623          	sw	x10,-116(x8)
 240:	f8b42823          	sw	x11,-112(x8)
 244:	f8c42a23          	sw	x12,-108(x8)
 248:	f8d42c23          	sw	x13,-104(x8)
 24c:	f8e42e23          	sw	x14,-100(x8)
 250:	faf42023          	sw	x15,-96(x8)

    // Since the Knight is initially at the first block
    sol[0][0]  = 0;
 254:	fc042223          	sw	x0,-60(x8)

    /* Start from 0,0 and explore all tours using
       solveKTUtil() */
    if (solveKTUtil(0, 0, 1, sol, xMove, yMove) == 0) {
 258:	f8440793          	addi	x15,x8,-124
 25c:	fa440713          	addi	x14,x8,-92
 260:	fc440693          	addi	x13,x8,-60
 264:	00100613          	addi	x12,x0,1
 268:	00000593          	addi	x11,x0,0
 26c:	00000513          	addi	x10,x0,0
 270:	00000097          	auipc	x1,0x0
 274:	030080e7          	jalr	x1,48(x1) # 2a0 <solveKTUtil>
 278:	00050793          	addi	x15,x10,0
 27c:	00079663          	bne	x15,x0,288 <solveKT+0x140>
        //printf("Solution does not exist");
        return 0;
 280:	00000793          	addi	x15,x0,0
 284:	0080006f          	jal	x0,28c <solveKT+0x144>
    }
    else
        //printSolution(sol);

    return 1;
 288:	00100793          	addi	x15,x0,1
}
 28c:	00078513          	addi	x10,x15,0
 290:	07c12083          	lw	x1,124(x2)
 294:	07812403          	lw	x8,120(x2)
 298:	08010113          	addi	x2,x2,128
 29c:	00008067          	jalr	x0,0(x1)

000002a0 <solveKTUtil>:

/* A recursive utility function to solve Knight Tour
   problem */
int solveKTUtil(int x, int y, int movei, int sol[N][N], int xMove[N], int yMove[N]) {
 2a0:	fc010113          	addi	x2,x2,-64
 2a4:	02112e23          	sw	x1,60(x2)
 2a8:	02812c23          	sw	x8,56(x2)
 2ac:	04010413          	addi	x8,x2,64
 2b0:	fca42e23          	sw	x10,-36(x8)
 2b4:	fcb42c23          	sw	x11,-40(x8)
 2b8:	fcc42a23          	sw	x12,-44(x8)
 2bc:	fcd42823          	sw	x13,-48(x8)
 2c0:	fce42623          	sw	x14,-52(x8)
 2c4:	fcf42423          	sw	x15,-56(x8)
   int k, next_x, next_y;
   if (movei == N*N)
 2c8:	fd442703          	lw	x14,-44(x8)
 2cc:	00900793          	addi	x15,x0,9
 2d0:	00f71663          	bne	x14,x15,2dc <solveKTUtil+0x3c>
       return 1;
 2d4:	00100793          	addi	x15,x0,1
 2d8:	1240006f          	jal	x0,3fc <solveKTUtil+0x15c>

   /* Try all next moves from the current coordinate x, y */
   for (k = 0; k < 8; k++) {
 2dc:	fe042623          	sw	x0,-20(x8)
 2e0:	10c0006f          	jal	x0,3ec <solveKTUtil+0x14c>
       next_x = x + xMove[k];
 2e4:	fec42783          	lw	x15,-20(x8)
 2e8:	00279793          	slli	x15,x15,0x2
 2ec:	fcc42703          	lw	x14,-52(x8)
 2f0:	00f707b3          	add	x15,x14,x15
 2f4:	0007a783          	lw	x15,0(x15)
 2f8:	fdc42703          	lw	x14,-36(x8)
 2fc:	00f707b3          	add	x15,x14,x15
 300:	fef42423          	sw	x15,-24(x8)
       next_y = y + yMove[k];
 304:	fec42783          	lw	x15,-20(x8)
 308:	00279793          	slli	x15,x15,0x2
 30c:	fc842703          	lw	x14,-56(x8)
 310:	00f707b3          	add	x15,x14,x15
 314:	0007a783          	lw	x15,0(x15)
 318:	fd842703          	lw	x14,-40(x8)
 31c:	00f707b3          	add	x15,x14,x15
 320:	fef42223          	sw	x15,-28(x8)
       if (isSafe(next_x, next_y, sol)) {
 324:	fd042603          	lw	x12,-48(x8)
 328:	fe442583          	lw	x11,-28(x8)
 32c:	fe842503          	lw	x10,-24(x8)
 330:	00000097          	auipc	x1,0x0
 334:	d84080e7          	jalr	x1,-636(x1) # b4 <isSafe>
 338:	00050793          	addi	x15,x10,0
 33c:	0a078263          	beq	x15,x0,3e0 <solveKTUtil+0x140>
         sol[next_x][next_y] = movei;
 340:	fe842703          	lw	x14,-24(x8)
 344:	00070793          	addi	x15,x14,0
 348:	00179793          	slli	x15,x15,0x1
 34c:	00e787b3          	add	x15,x15,x14
 350:	00279793          	slli	x15,x15,0x2
 354:	00078713          	addi	x14,x15,0
 358:	fd042783          	lw	x15,-48(x8)
 35c:	00e78733          	add	x14,x15,x14
 360:	fe442783          	lw	x15,-28(x8)
 364:	00279793          	slli	x15,x15,0x2
 368:	00f707b3          	add	x15,x14,x15
 36c:	fd442703          	lw	x14,-44(x8)
 370:	00e7a023          	sw	x14,0(x15)
         if (solveKTUtil(next_x, next_y, movei+1, sol, xMove, yMove) == 1)
 374:	fd442783          	lw	x15,-44(x8)
 378:	00178613          	addi	x12,x15,1
 37c:	fc842783          	lw	x15,-56(x8)
 380:	fcc42703          	lw	x14,-52(x8)
 384:	fd042683          	lw	x13,-48(x8)
 388:	fe442583          	lw	x11,-28(x8)
 38c:	fe842503          	lw	x10,-24(x8)
 390:	00000097          	auipc	x1,0x0
 394:	f10080e7          	jalr	x1,-240(x1) # 2a0 <solveKTUtil>
 398:	00050713          	addi	x14,x10,0
 39c:	00100793          	addi	x15,x0,1
 3a0:	00f71663          	bne	x14,x15,3ac <solveKTUtil+0x10c>
             return 1;
 3a4:	00100793          	addi	x15,x0,1
 3a8:	0540006f          	jal	x0,3fc <solveKTUtil+0x15c>
         else
             sol[next_x][next_y] = -1;// backtracking
 3ac:	fe842703          	lw	x14,-24(x8)
 3b0:	00070793          	addi	x15,x14,0
 3b4:	00179793          	slli	x15,x15,0x1
 3b8:	00e787b3          	add	x15,x15,x14
 3bc:	00279793          	slli	x15,x15,0x2
 3c0:	00078713          	addi	x14,x15,0
 3c4:	fd042783          	lw	x15,-48(x8)
 3c8:	00e78733          	add	x14,x15,x14
 3cc:	fe442783          	lw	x15,-28(x8)
 3d0:	00279793          	slli	x15,x15,0x2
 3d4:	00f707b3          	add	x15,x14,x15
 3d8:	fff00713          	addi	x14,x0,-1
 3dc:	00e7a023          	sw	x14,0(x15)
   for (k = 0; k < 8; k++) {
 3e0:	fec42783          	lw	x15,-20(x8)
 3e4:	00178793          	addi	x15,x15,1
 3e8:	fef42623          	sw	x15,-20(x8)
 3ec:	fec42703          	lw	x14,-20(x8)
 3f0:	00700793          	addi	x15,x0,7
 3f4:	eee7d8e3          	bge	x15,x14,2e4 <solveKTUtil+0x44>
       }
   }

   return 0;
 3f8:	00000793          	addi	x15,x0,0
}
 3fc:	00078513          	addi	x10,x15,0
 400:	03c12083          	lw	x1,60(x2)
 404:	03812403          	lw	x8,56(x2)
 408:	04010113          	addi	x2,x2,64
 40c:	00008067          	jalr	x0,0(x1)

00000410 <main>:

/* Driver program to test above functions */
int main()
{
 410:	ff010113          	addi	x2,x2,-16
 414:	00112623          	sw	x1,12(x2)
 418:	00812423          	sw	x8,8(x2)
 41c:	01010413          	addi	x8,x2,16
    solveKT();
 420:	00000097          	auipc	x1,0x0
 424:	d28080e7          	jalr	x1,-728(x1) # 148 <solveKT>
    return 0;
 428:	00000793          	addi	x15,x0,0
}
 42c:	00078513          	addi	x10,x15,0
 430:	00c12083          	lw	x1,12(x2)
 434:	00812403          	lw	x8,8(x2)
 438:	01010113          	addi	x2,x2,16
 43c:	00008067          	jalr	x0,0(x1)
	...

Disassembly of section .rodata:

00000480 <.rodata>:
 480:	0002                	c.slli64	x0
 482:	0000                	c.unimp
 484:	0001                	c.addi	x0,0
 486:	0000                	c.unimp
 488:	ffff                	0xffff
 48a:	ffff                	0xffff
 48c:	fffe                	c.fswsp	f31,252(x2)
 48e:	ffff                	0xffff
 490:	fffe                	c.fswsp	f31,252(x2)
 492:	ffff                	0xffff
 494:	ffff                	0xffff
 496:	ffff                	0xffff
 498:	0001                	c.addi	x0,0
 49a:	0000                	c.unimp
 49c:	0002                	c.slli64	x0
 49e:	0000                	c.unimp
 4a0:	0001                	c.addi	x0,0
 4a2:	0000                	c.unimp
 4a4:	0002                	c.slli64	x0
 4a6:	0000                	c.unimp
 4a8:	0002                	c.slli64	x0
 4aa:	0000                	c.unimp
 4ac:	0001                	c.addi	x0,0
 4ae:	0000                	c.unimp
 4b0:	ffff                	0xffff
 4b2:	ffff                	0xffff
 4b4:	fffe                	c.fswsp	f31,252(x2)
 4b6:	ffff                	0xffff
 4b8:	fffe                	c.fswsp	f31,252(x2)
 4ba:	ffff                	0xffff
 4bc:	ffff                	0xffff
 4be:	ffff                	0xffff

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
	nop
   0:	2041                	c.jal	80 <crt+0x80>
   2:	0000                	c.unimp
	la ra, exit
   4:	7200                	c.flw	f8,32(x12)
   6:	7369                	c.lui	x6,0xffffa
   8:	01007663          	bgeu	x0,x16,14 <crt+0x14>
	la sp, _sp
   c:	0016                	c.slli	x0,0x5
   e:	0000                	c.unimp
  10:	1004                	c.addi4spn	x9,x2,32
  12:	7205                	c.lui	x4,0xfffe1
	mv s0, sp
  14:	3376                	c.fldsp	f6,376(x2)
  16:	6932                	c.flwsp	f18,12(x2)
	la gp, __global_pointer$
  18:	7032                	c.flwsp	f0,44(x2)
  1a:	5f30                	c.lw	x12,120(x14)
  1c:	326d                	c.jal	fffff9c6 <_sp+0xfffef9c6>
  1e:	3070                	c.fld	f12,224(x8)
	...

Disassembly of section .comment:

00000000 <.comment>:
	nop
   0:	3a434347          	fmsub.d	f6,f6,f4,f7,rmm
	la ra, exit
   4:	2820                	c.fld	f8,80(x8)
   6:	29554e47          	fmsub.s	f28,f10,f21,f5,rmm
   a:	3920                	c.fld	f8,112(x10)
	la sp, _sp
   c:	322e                	c.fldsp	f4,232(x2)
   e:	302e                	c.fldsp	f0,232(x2)
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
	nop
   0:	0114                	c.addi4spn	x13,x2,128
   2:	0000                	c.unimp
	la ra, exit
   4:	001c0003          	lb	x0,1(x24)
   8:	0000                	c.unimp
   a:	0101                	c.addi	x2,0
	la sp, _sp
   c:	000d0efb          	0xd0efb
  10:	0101                	c.addi	x2,0
  12:	0101                	c.addi	x2,0
	mv s0, sp
  14:	0000                	c.unimp
  16:	0100                	c.addi4spn	x8,x2,128
	la gp, __global_pointer$
  18:	0000                	c.unimp
  1a:	0001                	c.addi	x0,0
  1c:	2e747263          	bgeu	x8,x7,300 <solveKTUtil+0x60>
	li tp, 0
  20:	00000073          	ecall
	li t0, 0
  24:	0000                	c.unimp
  26:	0500                	c.addi4spn	x8,x2,640
	li t1, 0
  28:	0002                	c.slli64	x0
  2a:	0000                	c.unimp
	li t2, 0
  2c:	0300                	c.addi4spn	x8,x2,384
  2e:	010d                	c.addi	x2,3
	li s1, 0
  30:	04090103          	lb	x2,64(x18)
	li a0, 0
  34:	0100                	c.addi4spn	x8,x2,128
  36:	08090103          	lb	x2,128(x18)
	li a1, 0
  3a:	0100                	c.addi4spn	x8,x2,128
	li a2, 0
  3c:	08090103          	lb	x2,128(x18)
	li a3, 0
  40:	0100                	c.addi4spn	x8,x2,128
  42:	04090103          	lb	x2,64(x18)
	li a4, 0
  46:	0100                	c.addi4spn	x8,x2,128
	li a5, 0
  48:	08090103          	lb	x2,128(x18)
	li a6, 0
  4c:	0100                	c.addi4spn	x8,x2,128
  4e:	04090103          	lb	x2,64(x18)
	li a7, 0
  52:	0100                	c.addi4spn	x8,x2,128
	li s2, 0
  54:	04090103          	lb	x2,64(x18)
	li s3, 0
  58:	0100                	c.addi4spn	x8,x2,128
  5a:	04090103          	lb	x2,64(x18)
	li s4, 0
  5e:	0100                	c.addi4spn	x8,x2,128
	li s5, 0
  60:	04090103          	lb	x2,64(x18)
	li s6, 0
  64:	0100                	c.addi4spn	x8,x2,128
  66:	04090103          	lb	x2,64(x18)
	li s7, 0
  6a:	0100                	c.addi4spn	x8,x2,128
	li s8, 0
  6c:	04090103          	lb	x2,64(x18)
	li s9, 0
  70:	0100                	c.addi4spn	x8,x2,128
  72:	04090103          	lb	x2,64(x18)
	li s10, 0
  76:	0100                	c.addi4spn	x8,x2,128
	li s11, 0
  78:	04090103          	lb	x2,64(x18)
	li t3, 0
  7c:	0100                	c.addi4spn	x8,x2,128
  7e:	04090103          	lb	x2,64(x18)
	li t4, 0
  82:	0100                	c.addi4spn	x8,x2,128
	li t5, 0
  84:	04090103          	lb	x2,64(x18)
	li t6, 0
  88:	0100                	c.addi4spn	x8,x2,128
  8a:	04090103          	lb	x2,64(x18)
	j main
  8e:	0100                	c.addi4spn	x8,x2,128
  90:	04090103          	lb	x2,64(x18)
  94:	0100                	c.addi4spn	x8,x2,128
  96:	04090103          	lb	x2,64(x18)
  9a:	0100                	c.addi4spn	x8,x2,128
  9c:	04090103          	lb	x2,64(x18)
	la sp, _sp
  a0:	0100                	c.addi4spn	x8,x2,128
  a2:	04090103          	lb	x2,64(x18)
  a6:	0100                	c.addi4spn	x8,x2,128
	sw a0, -8(sp)
  a8:	04090103          	lb	x2,64(x18)
	nop
  ac:	0100                	c.addi4spn	x8,x2,128
  ae:	04090103          	lb	x2,64(x18)
	wfi
  b2:	0100                	c.addi4spn	x8,x2,128
int isSafe(int x, int y, int sol[N][N]) {
  b4:	04090103          	lb	x2,64(x18)
  b8:	0100                	c.addi4spn	x8,x2,128
  ba:	04090103          	lb	x2,64(x18)
  be:	0100                	c.addi4spn	x8,x2,128
  c0:	04090103          	lb	x2,64(x18)
  c4:	0100                	c.addi4spn	x8,x2,128
  c6:	04090103          	lb	x2,64(x18)
  ca:	0100                	c.addi4spn	x8,x2,128
    return ( x >= 0 && x < N && y >= 0 && y < N && sol[x][y] == -1);
  cc:	04090103          	lb	x2,64(x18)
  d0:	0100                	c.addi4spn	x8,x2,128
  d2:	04090103          	lb	x2,64(x18)
  d6:	0100                	c.addi4spn	x8,x2,128
  d8:	04090103          	lb	x2,64(x18)
  dc:	0100                	c.addi4spn	x8,x2,128
  de:	04090103          	lb	x2,64(x18)
  e2:	0100                	c.addi4spn	x8,x2,128
  e4:	04090103          	lb	x2,64(x18)
  e8:	0100                	c.addi4spn	x8,x2,128
  ea:	04090103          	lb	x2,64(x18)
  ee:	0100                	c.addi4spn	x8,x2,128
  f0:	0409                	c.addi	x8,2
  f2:	0000                	c.unimp
  f4:	0101                	c.addi	x2,0
  f6:	0500                	c.addi4spn	x8,x2,640
  f8:	a002                	c.fsdsp	f0,0(x2)
  fa:	0000                	c.unimp
  fc:	0300                	c.addi4spn	x8,x2,384
  fe:	01030133          	add	x2,x6,x16
 102:	0809                	c.addi	x16,2
 104:	0100                	c.addi4spn	x8,x2,128
 106:	04090103          	lb	x2,64(x18)
 10a:	0100                	c.addi4spn	x8,x2,128
 10c:	04090103          	lb	x2,64(x18)
 110:	0100                	c.addi4spn	x8,x2,128
 112:	0409                	c.addi	x8,2
 114:	0000                	c.unimp
 116:	0101                	c.addi	x2,0
 118:	02ce                	c.slli	x5,0x13
 11a:	0000                	c.unimp
 11c:	00c80003          	lb	x0,12(x16)
 120:	0000                	c.unimp
 122:	0101                	c.addi	x2,0
 124:	000d0efb          	0xd0efb
 128:	0101                	c.addi	x2,0
 12a:	0101                	c.addi	x2,0
 12c:	0000                	c.unimp
 12e:	0100                	c.addi4spn	x8,x2,128
 130:	0000                	c.unimp
 132:	7401                	c.lui	x8,0xfffe0
 134:	7365                	c.lui	x6,0xffff9
 136:	5f74                	c.lw	x13,124(x14)
}
 138:	7270                	c.flw	f12,100(x12)
 13a:	0073676f          	jal	x14,36940 <_sp+0x26940>
 13e:	7273752f          	0x7273752f
 142:	2f6d752f          	0x2f6d752f
 146:	6972                	c.flwsp	f18,28(x2)
int solveKT() {
 148:	2d766373          	csrrsi	x6,0x2d7,12
 14c:	2e39                	c.jal	46a <main+0x5a>
 14e:	2f32                	c.fldsp	f30,264(x2)
 150:	696c                	c.flw	f11,84(x10)
 152:	2f62                	c.fldsp	f30,24(x2)
 154:	2f636367          	0x2f636367
    for (int x = 0; x < N; x++)
 158:	6972                	c.flwsp	f18,28(x2)
 15a:	36766373          	csrrsi	x6,0x367,12
 15e:	2d34                	c.fld	f13,88(x10)
        for (int y = 0; y < N; y++)
 160:	6e75                	c.lui	x28,0x1d
 162:	776f6e6b          	0x776f6e6b
 166:	2d6e                	c.fldsp	f26,216(x2)
            sol[x][y] = -1;
 168:	6c65                	c.lui	x24,0x19
 16a:	2f66                	c.fldsp	f30,88(x2)
 16c:	2e39                	c.jal	48a <main+0x7a>
 16e:	2e32                	c.fldsp	f28,264(x2)
 170:	2f30                	c.fld	f12,88(x14)
 172:	6e69                	c.lui	x28,0x1a
 174:	64756c63          	bltu	x10,x7,7cc <_ebss+0x30c>
 178:	0065                	c.addi	x0,25
 17a:	7273752f          	0x7273752f
 17e:	2f6d752f          	0x2f6d752f
 182:	6972                	c.flwsp	f18,28(x2)
 184:	2d766373          	csrrsi	x6,0x2d7,12
 188:	2e39                	c.jal	4a6 <main+0x96>
 18a:	2f32                	c.fldsp	f30,264(x2)
 18c:	6972                	c.flwsp	f18,28(x2)
 18e:	36766373          	csrrsi	x6,0x367,12
 192:	2d34                	c.fld	f13,88(x10)
        for (int y = 0; y < N; y++)
 194:	6e75                	c.lui	x28,0x1d
 196:	776f6e6b          	0x776f6e6b
 19a:	2d6e                	c.fldsp	f26,216(x2)
 19c:	6c65                	c.lui	x24,0x19
 19e:	2f66                	c.fldsp	f30,88(x2)
 1a0:	6e69                	c.lui	x28,0x1a
 1a2:	64756c63          	bltu	x10,x7,7fa <_ebss+0x33a>
 1a6:	2f65                	c.jal	95e <_ebss+0x49e>
 1a8:	00737973          	csrrci	x18,0x7,6
    for (int x = 0; x < N; x++)
 1ac:	6200                	c.flw	f8,0(x12)
 1ae:	6361                	c.lui	x6,0x18
 1b0:	6172746b          	0x6172746b
 1b4:	632e6b63          	bltu	x28,x18,7ea <_ebss+0x32a>
 1b8:	0100                	c.addi4spn	x8,x2,128
 1ba:	0000                	c.unimp
 1bc:	64647473          	csrrci	x8,0x646,8
 1c0:	6665                	c.lui	x12,0x19
 1c2:	682e                	c.flwsp	f16,200(x2)
    int xMove[8] = {  2, 1, -1, -2, -2, -1,  1,  2 };
 1c4:	0200                	c.addi4spn	x8,x2,256
 1c6:	0000                	c.unimp
 1c8:	745f 7079 7365      	0x73657079745f
 1ce:	682e                	c.flwsp	f16,200(x2)
 1d0:	0300                	c.addi4spn	x8,x2,384
 1d2:	0000                	c.unimp
 1d4:	6572                	c.flwsp	f10,28(x2)
 1d6:	6e65                	c.lui	x28,0x19
 1d8:	2e74                	c.fld	f13,216(x12)
 1da:	0068                	c.addi4spn	x10,x2,12
 1dc:	6c000003          	lb	x0,1728(x0) # 6c0 <_ebss+0x200>
 1e0:	2e6b636f          	jal	x6,b64c6 <_sp+0xa64c6>
 1e4:	0068                	c.addi4spn	x10,x2,12
 1e6:	00000003          	lb	x0,0(x0) # 0 <crt>
 1ea:	2905                	c.jal	61a <_ebss+0x15a>
 1ec:	0500                	c.addi4spn	x8,x2,640
 1ee:	b402                	c.fsdsp	f0,40(x2)
 1f0:	0000                	c.unimp
 1f2:	0300                	c.addi4spn	x8,x2,384
 1f4:	31050113          	addi	x2,x10,784
 1f8:	18090103          	lb	x2,384(x18)
 1fc:	0100                	c.addi4spn	x8,x2,128
 1fe:	1505                	c.addi	x10,-31
 200:	0200                	c.addi4spn	x8,x2,256
 202:	0104                	c.addi4spn	x9,x2,128
 204:	08090003          	lb	x0,128(x18)
 208:	0100                	c.addi4spn	x8,x2,128
 20a:	1e05                	c.addi	x28,-31
    int yMove[8] = {  1, 2,  2,  1, -1, -2, -2, -1 };
 20c:	0200                	c.addi4spn	x8,x2,256
 20e:	0304                	c.addi4spn	x9,x2,384
 210:	0c090003          	lb	x0,192(x18)
 214:	0100                	c.addi4spn	x8,x2,128
 216:	2805                	c.jal	246 <solveKT+0xfe>
 218:	0200                	c.addi4spn	x8,x2,256
 21a:	0504                	c.addi4spn	x9,x2,640
 21c:	08090003          	lb	x0,128(x18)
 220:	0100                	c.addi4spn	x8,x2,128
 222:	3705                	c.jal	142 <isSafe+0x8e>
 224:	0200                	c.addi4spn	x8,x2,256
 226:	0704                	c.addi4spn	x9,x2,896
 228:	0c090003          	lb	x0,192(x18)
 22c:	0100                	c.addi4spn	x8,x2,128
 22e:	3a05                	c.jal	fffffb5e <_sp+0xfffefb5e>
 230:	0200                	c.addi4spn	x8,x2,256
 232:	0704                	c.addi4spn	x9,x2,896
 234:	20090003          	lb	x0,512(x18)
 238:	0100                	c.addi4spn	x8,x2,128
 23a:	3105                	c.jal	fffffe5a <_sp+0xfffefe5a>
 23c:	0200                	c.addi4spn	x8,x2,256
 23e:	0704                	c.addi4spn	x9,x2,896
 240:	10090003          	lb	x0,256(x18)
 244:	0100                	c.addi4spn	x8,x2,128
 246:	0200                	c.addi4spn	x8,x2,256
 248:	0904                	c.addi4spn	x9,x2,144
 24a:	0306                	c.slli	x6,0x1
 24c:	0900                	c.addi4spn	x8,x2,144
 24e:	0008                	0x8
 250:	0001                	c.addi	x0,0
 252:	0402                	c.slli64	x8
    sol[0][0]  = 0;
 254:	030a                	c.slli	x6,0x2
 256:	0900                	c.addi4spn	x8,x2,144
    if (solveKTUtil(0, 0, 1, sol, xMove, yMove) == 0) {
 258:	0008                	0x8
 25a:	0501                	c.addi	x10,0
 25c:	0001                	c.addi	x0,0
 25e:	0402                	c.slli64	x8
 260:	060d                	c.addi	x12,3
 262:	04090103          	lb	x2,64(x18)
 266:	0100                	c.addi4spn	x8,x2,128
 268:	0f05                	c.addi	x30,1
 26a:	10091103          	lh	x2,256(x18)
 26e:	0100                	c.addi4spn	x8,x2,128
 270:	0e05                	c.addi	x28,1
 272:	10090403          	lb	x8,256(x18)
 276:	0100                	c.addi4spn	x8,x2,128
 278:	0505                	c.addi	x10,1
 27a:	04090003          	lb	x0,64(x18)
 27e:	0100                	c.addi4spn	x8,x2,128
        return 0;
 280:	1205                	c.addi	x4,-31
 282:	04090103          	lb	x2,64(x18)
 286:	0100                	c.addi4spn	x8,x2,128
    return 1;
 288:	0905                	c.addi	x18,1
 28a:	04090003          	lb	x0,64(x18)
}
 28e:	0100                	c.addi4spn	x8,x2,128
 290:	1705                	c.addi	x14,-31
 292:	0200                	c.addi4spn	x8,x2,256
 294:	0304                	c.addi4spn	x9,x2,384
 296:	04090103          	lb	x2,64(x18)
 29a:	0100                	c.addi4spn	x8,x2,128
 29c:	2105                	c.jal	6bc <_ebss+0x1fc>
 29e:	0200                	c.addi4spn	x8,x2,256
int solveKTUtil(int x, int y, int movei, int sol[N][N], int xMove[N], int yMove[N]) {
 2a0:	0304                	c.addi4spn	x9,x2,384
 2a2:	2c097f03          	0x2c097f03
 2a6:	0100                	c.addi4spn	x8,x2,128
 2a8:	0905                	c.addi	x18,1
 2aa:	0200                	c.addi4spn	x8,x2,256
 2ac:	0104                	c.addi4spn	x9,x2,128
 2ae:	0c090003          	lb	x0,192(x18)
 2b2:	0100                	c.addi4spn	x8,x2,128
 2b4:	1d05                	c.addi	x26,-31
 2b6:	0200                	c.addi4spn	x8,x2,256
 2b8:	0204                	c.addi4spn	x9,x2,256
 2ba:	0c097f03          	0xc097f03
 2be:	0100                	c.addi4spn	x8,x2,128
 2c0:	0505                	c.addi	x10,1
 2c2:	0200                	c.addi4spn	x8,x2,256
 2c4:	0104                	c.addi4spn	x9,x2,128
 2c6:	0c090003          	lb	x0,192(x18)
   if (movei == N*N)
 2ca:	0100                	c.addi4spn	x8,x2,128
 2cc:	0905                	c.addi	x18,1
 2ce:	0c090703          	lb	x14,192(x18)
 2d2:	0100                	c.addi4spn	x8,x2,128
       return 1;
 2d4:	48090103          	lb	x2,1152(x18)
 2d8:	0100                	c.addi4spn	x8,x2,128
 2da:	1005                	c.addi	x0,-31
   for (k = 0; k < 8; k++) {
 2dc:	48090303          	lb	x6,1152(x18)
 2e0:	0100                	c.addi4spn	x8,x2,128
 2e2:	0905                	c.addi	x18,1
       next_x = x + xMove[k];
 2e4:	04090403          	lb	x8,64(x18)
 2e8:	0100                	c.addi4spn	x8,x2,128
 2ea:	0805                	c.addi	x16,1
 2ec:	24090003          	lb	x0,576(x18)
 2f0:	0100                	c.addi4spn	x8,x2,128
 2f2:	1005                	c.addi	x0,-31
 2f4:	04090203          	lb	x4,64(x18)
 2f8:	0100                	c.addi4spn	x8,x2,128
 2fa:	0c05                	c.addi	x24,1
 2fc:	08090503          	lb	x10,128(x18)
 300:	0100                	c.addi4spn	x8,x2,128
 302:	0105                	c.addi	x2,1
       next_y = y + yMove[k];
 304:	0200                	c.addi4spn	x8,x2,256
 306:	0104                	c.addi4spn	x9,x2,128
 308:	04090103          	lb	x2,64(x18)
 30c:	0100                	c.addi4spn	x8,x2,128
 30e:	5505                	c.li	x10,-31
 310:	14090403          	lb	x8,320(x18)
 314:	0100                	c.addi4spn	x8,x2,128
 316:	0705                	c.addi	x14,1
 318:	28090203          	lb	x4,640(x18)
 31c:	0100                	c.addi4spn	x8,x2,128
 31e:	0f05                	c.addi	x30,1
 320:	0c090103          	lb	x2,192(x18)
       if (isSafe(next_x, next_y, sol)) {
 324:	0100                	c.addi4spn	x8,x2,128
 326:	0b05                	c.addi	x22,1
 328:	08090303          	lb	x6,128(x18)
 32c:	0100                	c.addi4spn	x8,x2,128
 32e:	0405                	c.addi	x8,1
 330:	04090003          	lb	x0,64(x18)
 334:	0100                	c.addi4spn	x8,x2,128
 336:	1a05                	c.addi	x20,-31
 338:	04090103          	lb	x2,64(x18)
 33c:	0100                	c.addi4spn	x8,x2,128
 33e:	0f05                	c.addi	x30,1
         sol[next_x][next_y] = movei;
 340:	14090003          	lb	x0,320(x18)
 344:	0100                	c.addi4spn	x8,x2,128
 346:	1a05                	c.addi	x20,-31
 348:	0c090103          	lb	x2,192(x18)
 34c:	0100                	c.addi4spn	x8,x2,128
 34e:	0f05                	c.addi	x30,1
 350:	14090003          	lb	x0,320(x18)
 354:	0100                	c.addi4spn	x8,x2,128
 356:	0c05                	c.addi	x24,1
 358:	0c090103          	lb	x2,192(x18)
 35c:	0100                	c.addi4spn	x8,x2,128
 35e:	0b05                	c.addi	x22,1
 360:	18090003          	lb	x0,384(x18)
 364:	0100                	c.addi4spn	x8,x2,128
 366:	0d05                	c.addi	x26,1
 368:	04090103          	lb	x2,64(x18)
 36c:	0100                	c.addi4spn	x8,x2,128
 36e:	1e05                	c.addi	x28,-31
 370:	20090003          	lb	x0,512(x18)
         if (solveKTUtil(next_x, next_y, movei+1, sol, xMove, yMove) == 1)
 374:	0100                	c.addi4spn	x8,x2,128
 376:	0e05                	c.addi	x28,1
 378:	14090103          	lb	x2,320(x18)
 37c:	0100                	c.addi4spn	x8,x2,128
 37e:	0d05                	c.addi	x26,1
 380:	28090003          	lb	x0,640(x18)
 384:	0100                	c.addi4spn	x8,x2,128
 386:	1505                	c.addi	x10,-31
 388:	08090103          	lb	x2,128(x18)
 38c:	0100                	c.addi4spn	x8,x2,128
 38e:	1105                	c.addi	x2,-31
 390:	08090203          	lb	x4,128(x18)
 394:	0100                	c.addi4spn	x8,x2,128
 396:	2205                	c.jal	4b6 <main+0xa6>
 398:	20090003          	lb	x0,512(x18)
 39c:	0100                	c.addi4spn	x8,x2,128
 39e:	1805                	c.addi	x16,-31
 3a0:	0200                	c.addi4spn	x8,x2,256
 3a2:	0204                	c.addi4spn	x9,x2,256
             return 1;
 3a4:	14097803          	0x14097803
 3a8:	0100                	c.addi4spn	x8,x2,128
 3aa:	0405                	c.addi	x8,1
             sol[next_x][next_y] = -1;// backtracking
 3ac:	0200                	c.addi4spn	x8,x2,256
 3ae:	0104                	c.addi4spn	x9,x2,128
 3b0:	0c090003          	lb	x0,192(x18)
 3b4:	0100                	c.addi4spn	x8,x2,128
 3b6:	0b05                	c.addi	x22,1
 3b8:	0c090c03          	lb	x24,192(x18)
 3bc:	0100                	c.addi4spn	x8,x2,128
 3be:	0105                	c.addi	x2,1
 3c0:	04090103          	lb	x2,64(x18)
 3c4:	0100                	c.addi4spn	x8,x2,128
 3c6:	14090403          	lb	x8,320(x18)
 3ca:	0100                	c.addi4spn	x8,x2,128
 3cc:	0505                	c.addi	x10,1
 3ce:	10090103          	lb	x2,256(x18)
 3d2:	0100                	c.addi4spn	x8,x2,128
 3d4:	0c05                	c.addi	x24,1
 3d6:	08090103          	lb	x2,128(x18)
 3da:	0100                	c.addi4spn	x8,x2,128
 3dc:	0105                	c.addi	x2,1
 3de:	04090103          	lb	x2,64(x18)
   for (k = 0; k < 8; k++) {
 3e2:	0100                	c.addi4spn	x8,x2,128
 3e4:	1409                	c.addi	x8,-30
 3e6:	0000                	c.unimp
 3e8:	0101                	c.addi	x2,0

Disassembly of section .debug_info:

00000000 <.debug_info>:
	nop
   0:	001e                	c.slli	x0,0x7
   2:	0000                	c.unimp
	la ra, exit
   4:	0002                	c.slli64	x0
   6:	0000                	c.unimp
   8:	0000                	c.unimp
   a:	0104                	c.addi4spn	x9,x2,128
	...
	la gp, __global_pointer$
  18:	0006                	c.slli	x0,0x1
  1a:	0000                	c.unimp
  1c:	00000027          	0x27
	li tp, 0
  20:	8001                	c.srli64	x8
  22:	0abe                	c.slli	x21,0xf
	li t0, 0
  24:	0000                	c.unimp
  26:	0004                	0x4
	li t1, 0
  28:	0012                	c.slli	x0,0x4
  2a:	0000                	c.unimp
	li t2, 0
  2c:	0104                	c.addi4spn	x9,x2,128
  2e:	004d                	c.addi	x0,19
	li s1, 0
  30:	0000                	c.unimp
  32:	ba0c                	c.fsd	f11,48(x12)
	li a0, 0
  34:	0000                	c.unimp
  36:	0600                	c.addi4spn	x8,x2,768
	li a1, 0
  38:	0000                	c.unimp
  3a:	b400                	c.fsd	f8,40(x8)
	li a2, 0
  3c:	0000                	c.unimp
  3e:	8c00                	0x8c00
	li a3, 0
  40:	18000003          	lb	x0,384(x0) # 180 <solveKT+0x38>
	li a4, 0
  44:	0001                	c.addi	x0,0
  46:	0200                	c.addi4spn	x8,x2,256
	li a5, 0
  48:	0601                	c.addi	x12,0
  4a:	0346                	c.slli	x6,0x11
	li a6, 0
  4c:	0000                	c.unimp
  4e:	0102                	c.slli64	x2
	li a7, 0
  50:	4408                	c.lw	x10,8(x8)
  52:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
	li s2, 0
  56:	0502                	c.slli64	x10
	li s3, 0
  58:	0360                	c.addi4spn	x8,x2,396
  5a:	0000                	c.unimp
	li s4, 0
  5c:	0202                	c.slli64	x4
  5e:	00027407          	0x27407
	li s5, 0
  62:	0200                	c.addi4spn	x8,x2,256
	li s6, 0
  64:	0504                	c.addi4spn	x9,x2,640
  66:	014e                	c.slli	x2,0x13
	li s7, 0
  68:	0000                	c.unimp
  6a:	0402                	c.slli64	x8
	li s8, 0
  6c:	0000f607          	0xf607
	li s9, 0
  70:	0200                	c.addi4spn	x8,x2,256
  72:	0508                	c.addi4spn	x10,x2,640
	li s10, 0
  74:	0149                	c.addi	x2,18
  76:	0000                	c.unimp
	li s11, 0
  78:	0802                	c.slli64	x16
  7a:	0000f107          	0xf107
	li t3, 0
  7e:	0300                	c.addi4spn	x8,x2,384
	li t4, 0
  80:	0504                	c.addi4spn	x9,x2,640
  82:	6e69                	c.lui	x28,0x1a
	li t5, 0
  84:	0074                	c.addi4spn	x13,x2,12
  86:	0402                	c.slli64	x8
	li t6, 0
  88:	0000fb07          	0xfb07
	j main
  8c:	0200                	c.addi4spn	x8,x2,256
  8e:	0410                	c.addi4spn	x12,x2,512
  90:	02f2                	c.slli	x5,0x1c
  92:	0000                	c.unimp
  94:	b704                	c.fsd	f9,40(x14)
  96:	0002                	c.slli64	x0
  98:	0200                	c.addi4spn	x8,x2,256
  9a:	015e                	c.slli	x2,0x17
  9c:	00006417          	auipc	x8,0x6
	la sp, _sp
  a0:	0500                	c.addi4spn	x8,x2,640
  a2:	0321                	c.addi	x6,8
  a4:	0000                	c.unimp
  a6:	410e2e03          	lw	x28,1040(x28) # 1a410 <_sp+0xa410>
	sw a0, -8(sp)
  aa:	0000                	c.unimp
	nop
  ac:	0500                	c.addi4spn	x8,x2,640
  ae:	041c                	c.addi4spn	x15,x2,512
	wfi
  b0:	0000                	c.unimp
  b2:	410e7403          	0x410e7403
int isSafe(int x, int y, int sol[N][N]) {
  b6:	0000                	c.unimp
  b8:	0500                	c.addi4spn	x8,x2,640
  ba:	0498                	c.addi4spn	x14,x2,576
  bc:	0000                	c.unimp
  be:	5d179303          	lh	x6,1489(x15)
  c2:	0000                	c.unimp
  c4:	0600                	c.addi4spn	x8,x2,768
  c6:	0304                	c.addi4spn	x9,x2,384
  c8:	03a5                	c.addi	x7,9
  ca:	00c5                	c.addi	x1,17
    return ( x >= 0 && x < N && y >= 0 && y < N && sol[x][y] == -1);
  cc:	0000                	c.unimp
  ce:	0002b107          	fld	f2,0(x5)
  d2:	0300                	c.addi4spn	x8,x2,384
  d4:	00720ca7          	0x720ca7
  d8:	0000                	c.unimp
  da:	00023507          	fld	f10,0(x4) # fffe1000 <_sp+0xfffd1000>
  de:	0300                	c.addi4spn	x8,x2,384
  e0:	13a8                	c.addi4spn	x10,x2,488
  e2:	00c5                	c.addi	x1,17
  e4:	0000                	c.unimp
  e6:	0800                	c.addi4spn	x8,x2,16
  e8:	002c                	c.addi4spn	x11,x2,8
  ea:	0000                	c.unimp
  ec:	00d5                	c.addi	x1,21
  ee:	0000                	c.unimp
  f0:	6409                	c.lui	x8,0x2
  f2:	0000                	c.unimp
  f4:	0300                	c.addi4spn	x8,x2,384
  f6:	0a00                	c.addi4spn	x8,x2,272
  f8:	0308                	c.addi4spn	x10,x2,384
  fa:	09a2                	c.slli	x19,0x8
  fc:	00f9                	c.addi	x1,30
  fe:	0000                	c.unimp
 100:	0004060b          	0x4060b
 104:	0300                	c.addi4spn	x8,x2,384
 106:	07a4                	c.addi4spn	x9,x2,968
 108:	005d                	c.addi	x0,23
 10a:	0000                	c.unimp
 10c:	0b00                	c.addi4spn	x8,x2,400
 10e:	040e                	c.slli	x8,0x3
 110:	0000                	c.unimp
 112:	a305a903          	lw	x18,-1488(x11)
 116:	0000                	c.unimp
 118:	0400                	c.addi4spn	x8,x2,512
 11a:	0500                	c.addi4spn	x8,x2,640
 11c:	0388                	c.addi4spn	x10,x2,448
 11e:	0000                	c.unimp
 120:	d503aa03          	lw	x20,-688(x7)
 124:	0000                	c.unimp
 126:	0c00                	c.addi4spn	x8,x2,528
 128:	0504                	c.addi4spn	x9,x2,640
 12a:	044e                	c.slli	x8,0x13
 12c:	0000                	c.unimp
 12e:	1604                	c.addi4spn	x9,x2,800
 130:	4819                	c.li	x16,6
 132:	0000                	c.unimp
 134:	0500                	c.addi4spn	x8,x2,640
 136:	0332                	c.slli	x6,0xc
}
 138:	0000                	c.unimp
 13a:	0c05                	c.addi	x24,1
 13c:	5d0d                	c.li	x26,-29
 13e:	0000                	c.unimp
 140:	0500                	c.addi4spn	x8,x2,640
 142:	01f8                	c.addi4spn	x14,x2,204
 144:	0000                	c.unimp
 146:	2304                	c.fld	f9,0(x14)
int solveKT() {
 148:	0001131b          	0x1131b
 14c:	0d00                	c.addi4spn	x8,x2,656
 14e:	0209                	c.addi	x4,2
 150:	0000                	c.unimp
 152:	0418                	c.addi4spn	x14,x2,512
 154:	0834                	c.addi4spn	x13,x2,24
 156:	0185                	c.addi	x3,1
    for (int x = 0; x < N; x++)
 158:	0000                	c.unimp
 15a:	0003a90b          	0x3a90b
 15e:	0400                	c.addi4spn	x8,x2,512
        for (int y = 0; y < N; y++)
 160:	1336                	c.slli	x6,0x2d
 162:	0185                	c.addi	x3,1
 164:	0000                	c.unimp
 166:	0e00                	c.addi4spn	x8,x2,784
            sol[x][y] = -1;
 168:	6b5f 0400 0737      	0x73704006b5f
 16e:	005d                	c.addi	x0,23
 170:	0000                	c.unimp
 172:	0b04                	c.addi4spn	x9,x2,400
 174:	03f1                	c.addi	x7,28
 176:	0000                	c.unimp
 178:	3704                	c.fld	f9,40(x14)
 17a:	00005d0b          	0x5d0b
 17e:	0800                	c.addi4spn	x8,x2,16
 180:	0001f20b          	0x1f20b
 184:	0400                	c.addi4spn	x8,x2,512
 186:	005d1437          	lui	x8,0x5d1
 18a:	0000                	c.unimp
 18c:	0b0c                	c.addi4spn	x11,x2,400
 18e:	00000483          	lb	x9,0(x0) # 0 <crt>
 192:	3704                	c.fld	f9,40(x14)
        for (int y = 0; y < N; y++)
 194:	00005d1b          	0x5d1b
 198:	1000                	c.addi4spn	x8,x2,32
 19a:	5f0e                	c.lwsp	x30,224(x2)
 19c:	0078                	c.addi4spn	x14,x2,12
 19e:	3804                	c.fld	f9,48(x8)
 1a0:	00018b0b          	0x18b0b
 1a4:	1400                	c.addi4spn	x8,x2,544
 1a6:	0f00                	c.addi4spn	x8,x2,912
 1a8:	2b04                	c.fld	f9,16(x14)
 1aa:	0001                	c.addi	x0,0
    for (int x = 0; x < N; x++)
 1ac:	0800                	c.addi4spn	x8,x2,16
 1ae:	00000107          	0x107
 1b2:	0000019b          	0x19b
 1b6:	6409                	c.lui	x8,0x2
 1b8:	0000                	c.unimp
 1ba:	0000                	c.unimp
 1bc:	0d00                	c.addi4spn	x8,x2,656
 1be:	0230                	c.addi4spn	x12,x2,264
 1c0:	0000                	c.unimp
 1c2:	0424                	c.addi4spn	x9,x2,520
    int xMove[8] = {  2, 1, -1, -2, -2, -1,  1,  2 };
 1c4:	083c                	c.addi4spn	x15,x2,24
 1c6:	021e                	c.slli	x4,0x7
 1c8:	0000                	c.unimp
 1ca:	0001400b          	0x1400b
 1ce:	0400                	c.addi4spn	x8,x2,512
 1d0:	093e                	c.slli	x18,0xf
 1d2:	005d                	c.addi	x0,23
 1d4:	0000                	c.unimp
 1d6:	0b00                	c.addi4spn	x8,x2,400
 1d8:	0424                	c.addi4spn	x9,x2,520
 1da:	0000                	c.unimp
 1dc:	3f04                	c.fld	f9,56(x14)
 1de:	5d09                	c.li	x26,-30
 1e0:	0000                	c.unimp
 1e2:	0400                	c.addi4spn	x8,x2,512
 1e4:	0001630b          	0x1630b
 1e8:	0400                	c.addi4spn	x8,x2,512
 1ea:	0940                	c.addi4spn	x8,x2,148
 1ec:	005d                	c.addi	x0,23
 1ee:	0000                	c.unimp
 1f0:	0b08                	c.addi4spn	x10,x2,400
 1f2:	050d                	c.addi	x10,3
 1f4:	0000                	c.unimp
 1f6:	4104                	c.lw	x9,0(x10)
 1f8:	5d09                	c.li	x26,-30
 1fa:	0000                	c.unimp
 1fc:	0c00                	c.addi4spn	x8,x2,528
 1fe:	0003050b          	0x3050b
 202:	0400                	c.addi4spn	x8,x2,512
 204:	0942                	c.slli	x18,0x10
 206:	005d                	c.addi	x0,23
 208:	0000                	c.unimp
 20a:	0b10                	c.addi4spn	x12,x2,400
    int yMove[8] = {  1, 2,  2,  1, -1, -2, -2, -1 };
 20c:	02df 0000 4304      	0x4304000002df
 212:	5d09                	c.li	x26,-30
 214:	0000                	c.unimp
 216:	1400                	c.addi4spn	x8,x2,544
 218:	0004880b          	0x4880b
 21c:	0400                	c.addi4spn	x8,x2,512
 21e:	0944                	c.addi4spn	x9,x2,148
 220:	005d                	c.addi	x0,23
 222:	0000                	c.unimp
 224:	0b18                	c.addi4spn	x14,x2,400
 226:	036a                	c.slli	x6,0x1a
 228:	0000                	c.unimp
 22a:	4504                	c.lw	x9,8(x10)
 22c:	5d09                	c.li	x26,-30
 22e:	0000                	c.unimp
 230:	1c00                	c.addi4spn	x8,x2,560
 232:	0004c90b          	0x4c90b
 236:	0400                	c.addi4spn	x8,x2,512
 238:	0946                	c.slli	x18,0x11
 23a:	005d                	c.addi	x0,23
 23c:	0000                	c.unimp
 23e:	0020                	c.addi4spn	x8,x2,8
 240:	7210                	c.flw	f12,32(x12)
 242:	0001                	c.addi	x0,0
 244:	0800                	c.addi4spn	x8,x2,16
 246:	0401                	c.addi	x8,0
 248:	0263084f          	fnmadd.d	f16,f6,f6,f0,rne
 24c:	0000                	c.unimp
 24e:	0001e50b          	0x1e50b
 252:	0400                	c.addi4spn	x8,x2,512
    sol[0][0]  = 0;
 254:	0a50                	c.addi4spn	x12,x2,276
 256:	00000263          	beq	x0,x0,25a <solveKT+0x112>
    if (solveKTUtil(0, 0, 1, sol, xMove, yMove) == 0) {
 25a:	0b00                	c.addi4spn	x8,x2,400
 25c:	00000033          	add	x0,x0,x0
 260:	5104                	c.lw	x9,32(x10)
 262:	6309                	c.lui	x6,0x2
 264:	0002                	c.slli64	x0
 266:	8000                	0x8000
 268:	4011                	c.li	x0,4
 26a:	0004                	0x4
 26c:	0400                	c.addi4spn	x8,x2,512
 26e:	01070a53          	fadd.s	f20,f14,f16,rne
 272:	0000                	c.unimp
 274:	0100                	c.addi4spn	x8,x2,128
 276:	9e11                	0x9e11
 278:	0001                	c.addi	x0,0
 27a:	0400                	c.addi4spn	x8,x2,512
 27c:	0a56                	c.slli	x20,0x15
 27e:	00000107          	0x107
        return 0;
 282:	0104                	c.addi4spn	x9,x2,128
 284:	0800                	c.addi4spn	x8,x2,16
 286:	0105                	c.addi	x2,1
    return 1;
 288:	0000                	c.unimp
 28a:	00000273          	0x273
}
 28e:	6409                	c.lui	x8,0x2
 290:	0000                	c.unimp
 292:	1f00                	c.addi4spn	x8,x2,944
 294:	1000                	c.addi4spn	x8,x2,32
 296:	030e                	c.slli	x6,0x3
 298:	0000                	c.unimp
 29a:	0190                	c.addi4spn	x12,x2,192
 29c:	6204                	c.flw	f9,0(x12)
 29e:	b608                	c.fsd	f10,40(x12)
int solveKTUtil(int x, int y, int movei, int sol[N][N], int xMove[N], int yMove[N]) {
 2a0:	0002                	c.slli64	x0
 2a2:	0b00                	c.addi4spn	x8,x2,400
 2a4:	03a9                	c.addi	x7,10
 2a6:	0000                	c.unimp
 2a8:	6304                	c.flw	f9,0(x14)
 2aa:	b612                	c.fsdsp	f4,296(x2)
 2ac:	0002                	c.slli64	x0
 2ae:	0000                	c.unimp
 2b0:	0003c10b          	0x3c10b
 2b4:	0400                	c.addi4spn	x8,x2,512
 2b6:	0664                	c.addi4spn	x9,x2,780
 2b8:	005d                	c.addi	x0,23
 2ba:	0000                	c.unimp
 2bc:	0b04                	c.addi4spn	x9,x2,400
 2be:	01ed                	c.addi	x3,27
 2c0:	0000                	c.unimp
 2c2:	6604                	c.flw	f9,8(x12)
 2c4:	bc09                	c.j	fffffcd6 <_sp+0xfffefcd6>
 2c6:	0002                	c.slli64	x0
   if (movei == N*N)
 2c8:	0800                	c.addi4spn	x8,x2,16
 2ca:	0001720b          	0x1720b
 2ce:	0400                	c.addi4spn	x8,x2,512
 2d0:	021e1e67          	0x21e1e67
       return 1;
 2d4:	0000                	c.unimp
 2d6:	0088                	c.addi4spn	x10,x2,64
 2d8:	0273040f          	0x273040f
   for (k = 0; k < 8; k++) {
 2dc:	0000                	c.unimp
 2de:	cc08                	c.sw	x10,24(x8)
 2e0:	0002                	c.slli64	x0
 2e2:	cc00                	c.sw	x8,24(x8)
       next_x = x + xMove[k];
 2e4:	0002                	c.slli64	x0
 2e6:	0900                	c.addi4spn	x8,x2,144
 2e8:	0064                	c.addi4spn	x9,x2,12
 2ea:	0000                	c.unimp
 2ec:	001f 040f 02d2      	0x2d2040f001f
 2f2:	0000                	c.unimp
 2f4:	0d12                	c.slli	x26,0x4
 2f6:	0374                	c.addi4spn	x13,x2,396
 2f8:	0000                	c.unimp
 2fa:	0408                	c.addi4spn	x10,x2,512
 2fc:	087a                	c.slli	x16,0x1e
 2fe:	000002fb          	0x2fb
 302:	00015d0b          	0x15d0b
       next_y = y + yMove[k];
 306:	0400                	c.addi4spn	x8,x2,512
 308:	02fb117b          	0x2fb117b
 30c:	0000                	c.unimp
 30e:	0b00                	c.addi4spn	x8,x2,400
 310:	0000003f 5d067c04 	0x5d067c040000003f
 318:	0000                	c.unimp
 31a:	0400                	c.addi4spn	x8,x2,512
 31c:	0f00                	c.addi4spn	x8,x2,912
 31e:	2c04                	c.fld	f9,24(x8)
 320:	0000                	c.unimp
 322:	0d00                	c.addi4spn	x8,x2,656
       if (isSafe(next_x, next_y, sol)) {
 324:	00000393          	addi	x7,x0,0
 328:	0468                	c.addi4spn	x10,x2,524
 32a:	08ba                	c.slli	x17,0xe
 32c:	0444                	c.addi4spn	x9,x2,516
 32e:	0000                	c.unimp
 330:	5f0e                	c.lwsp	x30,224(x2)
 332:	0070                	c.addi4spn	x12,x2,12
 334:	bb04                	c.fsd	f9,48(x14)
 336:	fb12                	c.fswsp	f4,180(x2)
 338:	0002                	c.slli64	x0
 33a:	0000                	c.unimp
 33c:	5f0e                	c.lwsp	x30,224(x2)
 33e:	0072                	c.slli	x0,0x1c
         sol[next_x][next_y] = movei;
 340:	bc04                	c.fsd	f9,56(x8)
 342:	00005d07          	0x5d07
 346:	0400                	c.addi4spn	x8,x2,512
 348:	5f0e                	c.lwsp	x30,224(x2)
 34a:	bd040077          	0xbd040077
 34e:	00005d07          	0x5d07
 352:	0800                	c.addi4spn	x8,x2,16
 354:	0001970b          	0x1970b
 358:	0400                	c.addi4spn	x8,x2,512
 35a:	09be                	c.slli	x19,0xf
 35c:	00000033          	add	x0,x0,x0
 360:	0b0c                	c.addi4spn	x11,x2,400
 362:	024c                	c.addi4spn	x11,x2,260
 364:	0000                	c.unimp
 366:	bf04                	c.fsd	f9,56(x14)
 368:	3309                	c.jal	6a <crt+0x6a>
 36a:	0000                	c.unimp
 36c:	0e00                	c.addi4spn	x8,x2,784
 36e:	5f0e                	c.lwsp	x30,224(x2)
 370:	6662                	c.flwsp	f12,24(x2)
 372:	0400                	c.addi4spn	x8,x2,512
         if (solveKTUtil(next_x, next_y, movei+1, sol, xMove, yMove) == 1)
 374:	11c0                	c.addi4spn	x8,x2,228
 376:	000002d3          	fadd.s	f5,f0,f0,rne
 37a:	0b10                	c.addi4spn	x12,x2,400
 37c:	0108                	c.addi4spn	x10,x2,128
 37e:	0000                	c.unimp
 380:	c104                	c.sw	x9,0(x10)
 382:	00005d07          	0x5d07
 386:	1800                	c.addi4spn	x8,x2,48
 388:	0001800b          	0x1800b
 38c:	0400                	c.addi4spn	x8,x2,512
 38e:	0ac8                	c.addi4spn	x10,x2,340
 390:	0105                	c.addi	x2,1
 392:	0000                	c.unimp
 394:	0b1c                	c.addi4spn	x15,x2,400
 396:	0220                	c.addi4spn	x8,x2,264
 398:	0000                	c.unimp
 39a:	ca04                	c.sw	x9,16(x12)
 39c:	c81d                	c.beqz	x8,3d2 <solveKTUtil+0x132>
 39e:	0005                	c.addi	x0,1
 3a0:	2000                	c.fld	f8,0(x8)
 3a2:	0002d80b          	0x2d80b
             return 1;
 3a6:	0400                	c.addi4spn	x8,x2,512
 3a8:	1dcc                	c.addi4spn	x11,x2,756
 3aa:	05f2                	c.slli	x11,0x1c
             sol[next_x][next_y] = -1;// backtracking
 3ac:	0000                	c.unimp
 3ae:	0b24                	c.addi4spn	x9,x2,408
 3b0:	0416                	c.slli	x8,0x5
 3b2:	0000                	c.unimp
 3b4:	cf04                	c.sw	x9,24(x14)
 3b6:	160d                	c.addi	x12,-29
 3b8:	0006                	c.slli	x0,0x1
 3ba:	2800                	c.fld	f8,16(x8)
 3bc:	0004e30b          	0x4e30b
 3c0:	0400                	c.addi4spn	x8,x2,512
 3c2:	09d0                	c.addi4spn	x12,x2,212
 3c4:	0630                	c.addi4spn	x12,x2,776
 3c6:	0000                	c.unimp
 3c8:	0e2c                	c.addi4spn	x11,x2,792
 3ca:	755f 0062 d304      	0xd3040062755f
 3d0:	d311                	c.beqz	x14,2d4 <solveKTUtil+0x34>
 3d2:	0002                	c.slli64	x0
 3d4:	3000                	c.fld	f8,32(x8)
 3d6:	5f0e                	c.lwsp	x30,224(x2)
 3d8:	7075                	c.lui	x0,0xffffd
 3da:	0400                	c.addi4spn	x8,x2,512
 3dc:	12d4                	c.addi4spn	x13,x2,356
 3de:	000002fb          	0x2fb
   for (k = 0; k < 8; k++) {
 3e2:	0e38                	c.addi4spn	x14,x2,792
 3e4:	755f 0072 d504      	0xd5040072755f
 3ea:	00005d07          	0x5d07
 3ee:	3c00                	c.fld	f8,56(x8)
 3f0:	0001570b          	0x1570b
 3f4:	0400                	c.addi4spn	x8,x2,512
 3f6:	11d8                	c.addi4spn	x14,x2,228
   return 0;
 3f8:	0636                	c.slli	x12,0xd
 3fa:	0000                	c.unimp
}
 3fc:	0b40                	c.addi4spn	x8,x2,404
 3fe:	000004bb          	0x4bb
 402:	d904                	c.sw	x9,48(x10)
 404:	4611                	c.li	x12,4
 406:	0006                	c.slli	x0,0x1
 408:	4300                	c.lw	x8,0(x14)
 40a:	5f0e                	c.lwsp	x30,224(x2)
 40c:	626c                	c.flw	f11,68(x12)
 40e:	0400                	c.addi4spn	x8,x2,512
{
 410:	11dc                	c.addi4spn	x15,x2,228
 412:	000002d3          	fadd.s	f5,f0,f0,rne
 416:	0b44                	c.addi4spn	x9,x2,404
 418:	01ad                	c.addi	x3,11
 41a:	0000                	c.unimp
 41c:	df04                	c.sw	x9,56(x14)
 41e:	00005d07          	0x5d07
    solveKT();
 422:	4c00                	c.lw	x8,24(x8)
 424:	0001be0b          	0x1be0b
    return 0;
 428:	0400                	c.addi4spn	x8,x2,512
 42a:	0ae0                	c.addi4spn	x8,x2,348
}
 42c:	007f                	0x7f
 42e:	0000                	c.unimp
 430:	0b50                	c.addi4spn	x12,x2,404
 432:	0258                	c.addi4spn	x14,x2,260
 434:	0000                	c.unimp
 436:	e304                	c.fsw	f9,0(x14)
 438:	6212                	c.flwsp	f4,4(x2)
 43a:	0004                	0x4
 43c:	5400                	c.lw	x8,40(x8)
 43e:	0002ca0b          	0x2ca0b
 442:	0400                	c.addi4spn	x8,x2,512
 444:	011f0ce7          	jalr	x25,17(x30)
 448:	0000                	c.unimp
 44a:	0b58                	c.addi4spn	x14,x2,404
 44c:	0000039b          	0x39b
 450:	e904                	c.fsw	f9,16(x10)
 452:	f90e                	c.fswsp	f3,176(x2)
 454:	0000                	c.unimp
 456:	5c00                	c.lw	x8,56(x8)
 458:	0002d00b          	0x2d00b
 45c:	0400                	c.addi4spn	x8,x2,512
 45e:	09ea                	c.slli	x19,0x1a
 460:	005d                	c.addi	x0,23
 462:	0000                	c.unimp
 464:	0064                	c.addi4spn	x9,x2,12
 466:	00009713          	slli	x14,x1,0x0
 46a:	6200                	c.flw	f8,0(x12)
 46c:	0004                	0x4
 46e:	1400                	c.addi4spn	x8,x2,544
 470:	0462                	c.slli	x8,0x18
 472:	0000                	c.unimp
 474:	0514                	c.addi4spn	x13,x2,640
 476:	0001                	c.addi	x0,0
 478:	1400                	c.addi4spn	x8,x2,544
 47a:	05b6                	c.slli	x11,0xd
 47c:	0000                	c.unimp
 47e:	5d14                	c.lw	x13,56(x10)
 480:	0000                	c.unimp
 482:	0000                	c.unimp
 484:	046d040f          	0x46d040f
 488:	0000                	c.unimp
 48a:	6215                	c.lui	x4,0x5
 48c:	0004                	0x4
 48e:	1600                	c.addi4spn	x8,x2,800
 490:	03f9                	c.addi	x7,30
 492:	0000                	c.unimp
 494:	0428                	c.addi4spn	x10,x2,520
 496:	6504                	c.flw	f9,8(x10)
 498:	0802                	c.slli64	x16
 49a:	05b6                	c.slli	x11,0xd
 49c:	0000                	c.unimp
 49e:	00035917          	auipc	x18,0x35
 4a2:	0400                	c.addi4spn	x8,x2,512
 4a4:	5d070267          	jalr	x4,1488(x14)
 4a8:	0000                	c.unimp
 4aa:	0000                	c.unimp
 4ac:	0001a617          	auipc	x12,0x1a
 4b0:	0400                	c.addi4spn	x8,x2,512
 4b2:	026c                	c.addi4spn	x11,x2,268
 4b4:	0006a20b          	0x6a20b
 4b8:	0400                	c.addi4spn	x8,x2,512
 4ba:	00023c17          	auipc	x24,0x23
 4be:	0400                	c.addi4spn	x8,x2,512
 4c0:	026c                	c.addi4spn	x11,x2,268
 4c2:	a214                	c.fsd	f13,0(x12)
 4c4:	0006                	c.slli	x0,0x1
 4c6:	0800                	c.addi4spn	x8,x2,16
 4c8:	00020117          	auipc	x2,0x20
 4cc:	0400                	c.addi4spn	x8,x2,512
 4ce:	026c                	c.addi4spn	x11,x2,268
 4d0:	a21e                	c.fsdsp	f7,256(x2)
 4d2:	0006                	c.slli	x0,0x1
 4d4:	0c00                	c.addi4spn	x8,x2,528
 4d6:	0003bc17          	auipc	x24,0x3b
 4da:	0400                	c.addi4spn	x8,x2,512
 4dc:	026e                	c.slli	x4,0x1b
 4de:	5d08                	c.lw	x10,56(x10)
 4e0:	0000                	c.unimp
 4e2:	1000                	c.addi4spn	x8,x2,32
 4e4:	0000af17          	auipc	x30,0xa
 4e8:	0400                	c.addi4spn	x8,x2,512
 4ea:	a208026f          	jal	x4,fff8070a <_sp+0xfff7070a>
 4ee:	0008                	0x8
 4f0:	1400                	c.addi4spn	x8,x2,544
 4f2:	0003d817          	auipc	x16,0x3d
 4f6:	0400                	c.addi4spn	x8,x2,512
 4f8:	0272                	c.slli	x4,0x1c
 4fa:	00005d07          	0x5d07
 4fe:	3000                	c.fld	f8,32(x8)
 500:	0003c617          	auipc	x12,0x3c
 504:	0400                	c.addi4spn	x8,x2,512
 506:	b7160273          	0xb7160273
 50a:	0008                	0x8
 50c:	3400                	c.fld	f8,40(x8)
 50e:	00031617          	auipc	x12,0x31
 512:	0400                	c.addi4spn	x8,x2,512
 514:	0275                	c.addi	x4,29
 516:	00005d07          	0x5d07
 51a:	3800                	c.fld	f8,48(x8)
 51c:	0003ce17          	auipc	x28,0x3c
 520:	0400                	c.addi4spn	x8,x2,512
 522:	c80a0277          	0xc80a0277
 526:	0008                	0x8
 528:	3c00                	c.fld	f8,56(x8)
 52a:	0002a917          	auipc	x18,0x2a
 52e:	0400                	c.addi4spn	x8,x2,512
 530:	027a                	c.slli	x4,0x1e
 532:	00018513          	addi	x10,x3,0 # c80 <__global_pointer$>
 536:	4000                	c.lw	x8,0(x8)
 538:	00022617          	auipc	x12,0x22
 53c:	0400                	c.addi4spn	x8,x2,512
 53e:	5d07027b          	0x5d07027b
 542:	0000                	c.unimp
 544:	4400                	c.lw	x8,8(x8)
 546:	0004fd17          	auipc	x26,0x4f
 54a:	0400                	c.addi4spn	x8,x2,512
 54c:	027c                	c.addi4spn	x15,x2,268
 54e:	00018513          	addi	x10,x3,0 # c80 <__global_pointer$>
 552:	4800                	c.lw	x8,16(x8)
 554:	00032817          	auipc	x16,0x32
 558:	0400                	c.addi4spn	x8,x2,512
 55a:	027d                	c.addi	x4,31
 55c:	ce14                	c.sw	x13,24(x12)
 55e:	0008                	0x8
 560:	4c00                	c.lw	x8,24(x8)
 562:	00024417          	auipc	x8,0x24
 566:	0400                	c.addi4spn	x8,x2,512
 568:	0280                	c.addi4spn	x8,x2,320
 56a:	00005d07          	0x5d07
 56e:	5000                	c.lw	x8,32(x8)
 570:	0001b617          	auipc	x12,0x1b
 574:	0400                	c.addi4spn	x8,x2,512
 576:	0281                	c.addi	x5,0
 578:	b609                	c.j	7a <crt+0x7a>
 57a:	0005                	c.addi	x0,1
 57c:	5400                	c.lw	x8,40(x8)
 57e:	00035217          	auipc	x4,0x35
 582:	0400                	c.addi4spn	x8,x2,512
 584:	02a4                	c.addi4spn	x9,x2,328
 586:	00087d07          	0x87d07
 58a:	5800                	c.lw	x8,48(x8)
 58c:	0e18                	c.addi4spn	x14,x2,784
 58e:	04000003          	lb	x0,64(x0) # 40 <crt+0x40>
 592:	02a8                	c.addi4spn	x10,x2,328
 594:	0002b613          	sltiu	x12,x5,0
 598:	4800                	c.lw	x8,16(x8)
 59a:	1801                	c.addi	x16,-32
 59c:	00000287          	0x287
 5a0:	a904                	c.fsd	f9,16(x10)
 5a2:	1202                	c.slli	x4,0x20
 5a4:	00000273          	0x273
 5a8:	014c                	c.addi4spn	x11,x2,132
 5aa:	b118                	c.fsd	f14,32(x10)
 5ac:	0004                	0x4
 5ae:	0400                	c.addi4spn	x8,x2,512
 5b0:	02ad                	c.addi	x5,11
 5b2:	df0c                	c.sw	x11,56(x14)
 5b4:	0008                	0x8
 5b6:	dc00                	c.sw	x8,56(x8)
 5b8:	1802                	c.slli	x16,0x20
 5ba:	0188                	c.addi4spn	x10,x2,192
 5bc:	0000                	c.unimp
 5be:	b204                	c.fsd	f9,32(x12)
 5c0:	1002                	c.slli	x0,0x20
 5c2:	00000663          	beq	x0,x0,5ce <_ebss+0x10e>
 5c6:	02e0                	c.addi4spn	x8,x2,332
 5c8:	6d18                	c.flw	f14,24(x10)
 5ca:	0001                	c.addi	x0,0
 5cc:	0400                	c.addi4spn	x8,x2,512
 5ce:	02b4                	c.addi4spn	x13,x2,328
 5d0:	eb0a                	c.fswsp	f2,148(x2)
 5d2:	0008                	0x8
 5d4:	ec00                	c.fsw	f8,24(x8)
 5d6:	0002                	c.slli64	x0
 5d8:	05bc040f          	0x5bc040f
 5dc:	0000                	c.unimp
 5de:	0102                	c.slli64	x2
 5e0:	4d08                	c.lw	x10,24(x10)
 5e2:	15000003          	lb	x0,336(x0) # 150 <solveKT+0x8>
 5e6:	05bc                	c.addi4spn	x15,x2,712
 5e8:	0000                	c.unimp
 5ea:	0444040f          	0x444040f
 5ee:	0000                	c.unimp
 5f0:	00009713          	slli	x14,x1,0x0
 5f4:	ec00                	c.fsw	f8,24(x8)
 5f6:	0005                	c.addi	x0,1
 5f8:	1400                	c.addi4spn	x8,x2,544
 5fa:	0462                	c.slli	x8,0x18
 5fc:	0000                	c.unimp
 5fe:	0514                	c.addi4spn	x13,x2,640
 600:	0001                	c.addi	x0,0
 602:	1400                	c.addi4spn	x8,x2,544
 604:	05ec                	c.addi4spn	x11,x2,716
 606:	0000                	c.unimp
 608:	5d14                	c.lw	x13,56(x10)
 60a:	0000                	c.unimp
 60c:	0000                	c.unimp
 60e:	05c3040f          	0x5c3040f
 612:	0000                	c.unimp
 614:	05ce040f          	0x5ce040f
 618:	0000                	c.unimp
 61a:	00008b13          	addi	x22,x1,0
 61e:	1600                	c.addi4spn	x8,x2,800
 620:	0006                	c.slli	x0,0x1
 622:	1400                	c.addi4spn	x8,x2,544
 624:	0462                	c.slli	x8,0x18
 626:	0000                	c.unimp
 628:	0514                	c.addi4spn	x13,x2,640
 62a:	0001                	c.addi	x0,0
 62c:	1400                	c.addi4spn	x8,x2,544
 62e:	0000008b          	0x8b
 632:	5d14                	c.lw	x13,56(x10)
 634:	0000                	c.unimp
 636:	0000                	c.unimp
 638:	05f8040f          	0x5f8040f
 63c:	0000                	c.unimp
 63e:	00005d13          	srli	x26,x0,0x0
 642:	3000                	c.fld	f8,32(x8)
 644:	0006                	c.slli	x0,0x1
 646:	1400                	c.addi4spn	x8,x2,544
 648:	0462                	c.slli	x8,0x18
 64a:	0000                	c.unimp
 64c:	0514                	c.addi4spn	x13,x2,640
 64e:	0001                	c.addi	x0,0
 650:	0000                	c.unimp
 652:	061c040f          	0x61c040f
 656:	0000                	c.unimp
 658:	2c08                	c.fld	f10,24(x8)
 65a:	0000                	c.unimp
 65c:	4600                	c.lw	x8,8(x12)
 65e:	0006                	c.slli	x0,0x1
 660:	0900                	c.addi4spn	x8,x2,144
 662:	0064                	c.addi4spn	x9,x2,12
 664:	0000                	c.unimp
 666:	0002                	c.slli64	x0
 668:	2c08                	c.fld	f10,24(x8)
 66a:	0000                	c.unimp
 66c:	5600                	c.lw	x8,40(x12)
 66e:	0006                	c.slli	x0,0x1
 670:	0900                	c.addi4spn	x8,x2,144
 672:	0064                	c.addi4spn	x9,x2,12
 674:	0000                	c.unimp
 676:	0000                	c.unimp
 678:	8104                	0x8104
 67a:	04000003          	lb	x0,64(x0) # 40 <crt+0x40>
 67e:	0124                	c.addi4spn	x9,x2,136
 680:	011a                	c.slli	x2,0x6
 682:	19000003          	lb	x0,400(x0) # 190 <solveKT+0x48>
 686:	0492                	c.slli	x9,0x4
 688:	0000                	c.unimp
 68a:	040c                	c.addi4spn	x11,x2,512
 68c:	0128                	c.addi4spn	x10,x2,136
 68e:	9c08                	0x9c08
 690:	0006                	c.slli	x0,0x1
 692:	1700                	c.addi4spn	x8,x2,928
 694:	03a9                	c.addi	x7,10
 696:	0000                	c.unimp
 698:	2a04                	c.fld	f9,16(x12)
 69a:	1101                	c.addi	x2,-32
 69c:	069c                	c.addi4spn	x15,x2,832
 69e:	0000                	c.unimp
 6a0:	1700                	c.addi4spn	x8,x2,928
 6a2:	0265                	c.addi	x4,25
 6a4:	0000                	c.unimp
 6a6:	2b04                	c.fld	f9,16(x14)
 6a8:	0701                	c.addi	x14,0
 6aa:	005d                	c.addi	x0,23
 6ac:	0000                	c.unimp
 6ae:	1704                	c.addi4spn	x9,x2,928
 6b0:	0000037b          	0x37b
 6b4:	2c04                	c.fld	f9,24(x8)
 6b6:	0b01                	c.addi	x22,0
 6b8:	06a2                	c.slli	x13,0x8
 6ba:	0000                	c.unimp
 6bc:	0008                	0x8
 6be:	0663040f          	0x663040f
 6c2:	0000                	c.unimp
 6c4:	0656040f          	0x656040f
 6c8:	0000                	c.unimp
 6ca:	4519                	c.li	x10,6
 6cc:	0000                	c.unimp
 6ce:	0e00                	c.addi4spn	x8,x2,784
 6d0:	4404                	c.lw	x9,8(x8)
 6d2:	0801                	c.addi	x16,0
 6d4:	06e1                	c.addi	x13,24
 6d6:	0000                	c.unimp
 6d8:	00040017          	auipc	x0,0x40
 6dc:	0400                	c.addi4spn	x8,x2,512
 6de:	0145                	c.addi	x2,17
 6e0:	e112                	c.fswsp	f4,128(x2)
 6e2:	0006                	c.slli	x0,0x1
 6e4:	0000                	c.unimp
 6e6:	00042d17          	auipc	x26,0x42
 6ea:	0400                	c.addi4spn	x8,x2,512
 6ec:	0146                	c.slli	x2,0x11
 6ee:	e112                	c.fswsp	f4,128(x2)
 6f0:	0006                	c.slli	x0,0x1
 6f2:	0600                	c.addi4spn	x8,x2,768
 6f4:	00044917          	auipc	x18,0x44
 6f8:	0400                	c.addi4spn	x8,x2,512
 6fa:	3a120147          	fmsub.d	f2,f4,f1,f7,rne
 6fe:	0000                	c.unimp
 700:	0c00                	c.addi4spn	x8,x2,528
 702:	0800                	c.addi4spn	x8,x2,16
 704:	003a                	c.slli	x0,0xe
 706:	0000                	c.unimp
 708:	06f1                	c.addi	x13,28
 70a:	0000                	c.unimp
 70c:	6409                	c.lui	x8,0x2
 70e:	0000                	c.unimp
 710:	0200                	c.addi4spn	x8,x2,256
 712:	1a00                	c.addi4spn	x8,x2,304
 714:	04d0                	c.addi4spn	x12,x2,580
 716:	0285                	c.addi	x5,1
 718:	00080607          	0x80607
 71c:	1700                	c.addi4spn	x8,x2,928
 71e:	0476                	c.slli	x8,0x1d
 720:	0000                	c.unimp
 722:	8704                	0x8704
 724:	1802                	c.slli	x16,0x20
 726:	0064                	c.addi4spn	x9,x2,12
 728:	0000                	c.unimp
 72a:	1700                	c.addi4spn	x8,x2,928
 72c:	00000433          	add	x8,x0,x0
 730:	8804                	0x8804
 732:	1202                	c.slli	x4,0x20
 734:	05b6                	c.slli	x11,0xd
 736:	0000                	c.unimp
 738:	1704                	c.addi4spn	x9,x2,928
 73a:	029c                	c.addi4spn	x15,x2,320
 73c:	0000                	c.unimp
 73e:	8904                	0x8904
 740:	1002                	c.slli	x0,0x20
 742:	0806                	c.slli	x16,0x1
 744:	0000                	c.unimp
 746:	1708                	c.addi4spn	x10,x2,928
 748:	04d4                	c.addi4spn	x13,x2,580
 74a:	0000                	c.unimp
 74c:	8a04                	0x8a04
 74e:	1702                	c.slli	x14,0x20
 750:	0000019b          	0x19b
 754:	1724                	c.addi4spn	x9,x2,936
 756:	0211                	c.addi	x4,4
 758:	0000                	c.unimp
 75a:	8b04                	0x8b04
 75c:	0f02                	c.slli64	x30
 75e:	005d                	c.addi	x0,23
 760:	0000                	c.unimp
 762:	1748                	c.addi4spn	x10,x2,932
 764:	03a4                	c.addi4spn	x9,x2,456
 766:	0000                	c.unimp
 768:	8c04                	0x8c04
 76a:	2c02                	c.fldsp	f24,0(x2)
 76c:	0056                	c.slli	x0,0x15
 76e:	0000                	c.unimp
 770:	1750                	c.addi4spn	x12,x2,932
 772:	04ea                	c.slli	x9,0x1a
 774:	0000                	c.unimp
 776:	8d04                	0x8d04
 778:	1a02                	c.slli	x20,0x20
 77a:	06a8                	c.addi4spn	x10,x2,840
 77c:	0000                	c.unimp
 77e:	1758                	c.addi4spn	x14,x2,932
 780:	000003af          	0x3af
 784:	8e04                	0x8e04
 786:	1602                	c.slli	x12,0x20
 788:	00f9                	c.addi	x1,30
 78a:	0000                	c.unimp
 78c:	1768                	c.addi4spn	x10,x2,940
 78e:	000004ef          	jal	x9,78e <_ebss+0x2ce>
 792:	8f04                	0x8f04
 794:	1602                	c.slli	x12,0x20
 796:	00f9                	c.addi	x1,30
 798:	0000                	c.unimp
 79a:	1770                	c.addi4spn	x12,x2,940
 79c:	0132                	c.slli	x2,0xc
 79e:	0000                	c.unimp
 7a0:	9004                	0x9004
 7a2:	1602                	c.slli	x12,0x20
 7a4:	00f9                	c.addi	x1,30
 7a6:	0000                	c.unimp
 7a8:	1778                	c.addi4spn	x14,x2,940
 7aa:	04a1                	c.addi	x9,8
 7ac:	0000                	c.unimp
 7ae:	9104                	0x9104
 7b0:	1002                	c.slli	x0,0x20
 7b2:	0816                	c.slli	x16,0x5
 7b4:	0000                	c.unimp
 7b6:	1780                	c.addi4spn	x8,x2,992
 7b8:	0290                	c.addi4spn	x12,x2,320
 7ba:	0000                	c.unimp
 7bc:	9204                	0x9204
 7be:	1002                	c.slli	x0,0x20
 7c0:	0826                	c.slli	x16,0x9
 7c2:	0000                	c.unimp
 7c4:	1788                	c.addi4spn	x10,x2,992
 7c6:	0456                	c.slli	x8,0x15
 7c8:	0000                	c.unimp
 7ca:	9304                	0x9304
 7cc:	0f02                	c.slli64	x30
 7ce:	005d                	c.addi	x0,23
 7d0:	0000                	c.unimp
 7d2:	17a0                	c.addi4spn	x8,x2,1000
 7d4:	000001d7          	0x1d7
 7d8:	9404                	0x9404
 7da:	1602                	c.slli	x12,0x20
 7dc:	00f9                	c.addi	x1,30
 7de:	0000                	c.unimp
 7e0:	17a4                	c.addi4spn	x9,x2,1000
 7e2:	00000123          	sb	x0,2(x0) # 2 <crt+0x2>
 7e6:	9504                	0x9504
 7e8:	1602                	c.slli	x12,0x20
 7ea:	00f9                	c.addi	x1,30
 7ec:	0000                	c.unimp
 7ee:	17ac                	c.addi4spn	x11,x2,1000
 7f0:	01c6                	c.slli	x3,0x11
 7f2:	0000                	c.unimp
 7f4:	9604                	0x9604
 7f6:	1602                	c.slli	x12,0x20
 7f8:	00f9                	c.addi	x1,30
 7fa:	0000                	c.unimp
 7fc:	17b4                	c.addi4spn	x13,x2,1000
 7fe:	00d1                	c.addi	x1,20
 800:	0000                	c.unimp
 802:	9704                	0x9704
 804:	1602                	c.slli	x12,0x20
 806:	00f9                	c.addi	x1,30
 808:	0000                	c.unimp
 80a:	17bc                	c.addi4spn	x15,x2,1000
 80c:	00e0                	c.addi4spn	x8,x2,76
 80e:	0000                	c.unimp
 810:	9804                	0x9804
 812:	1602                	c.slli	x12,0x20
 814:	00f9                	c.addi	x1,30
 816:	0000                	c.unimp
 818:	17c4                	c.addi4spn	x9,x2,996
 81a:	00000357          	0x357
 81e:	9904                	0x9904
 820:	0802                	c.slli64	x16
 822:	005d                	c.addi	x0,23
 824:	0000                	c.unimp
 826:	00cc                	c.addi4spn	x11,x2,68
 828:	bc08                	c.fsd	f10,56(x8)
 82a:	0005                	c.addi	x0,1
 82c:	1600                	c.addi4spn	x8,x2,800
 82e:	0008                	0x8
 830:	0900                	c.addi4spn	x8,x2,144
 832:	0064                	c.addi4spn	x9,x2,12
 834:	0000                	c.unimp
 836:	0019                	c.addi	x0,6
 838:	bc08                	c.fsd	f10,56(x8)
 83a:	0005                	c.addi	x0,1
 83c:	2600                	c.fld	f8,8(x12)
 83e:	0008                	0x8
 840:	0900                	c.addi4spn	x8,x2,144
 842:	0064                	c.addi4spn	x9,x2,12
 844:	0000                	c.unimp
 846:	bc080007          	0xbc080007
 84a:	0005                	c.addi	x0,1
 84c:	3600                	c.fld	f8,40(x12)
 84e:	0008                	0x8
 850:	0900                	c.addi4spn	x8,x2,144
 852:	0064                	c.addi4spn	x9,x2,12
 854:	0000                	c.unimp
 856:	f01a0017          	auipc	x0,0xf01a0
 85a:	9e04                	0x9e04
 85c:	0702                	c.slli64	x14
 85e:	085d                	c.addi	x16,23
 860:	0000                	c.unimp
 862:	0002fe17          	auipc	x28,0x2f
 866:	0400                	c.addi4spn	x8,x2,512
 868:	02a1                	c.addi	x5,8
 86a:	00085d1b          	0x85d1b
 86e:	0000                	c.unimp
 870:	0002e917          	auipc	x18,0x2e
 874:	0400                	c.addi4spn	x8,x2,512
 876:	02a2                	c.slli	x5,0x8
 878:	6d18                	c.flw	f14,24(x10)
 87a:	0008                	0x8
 87c:	7800                	c.flw	f8,48(x8)
 87e:	0800                	c.addi4spn	x8,x2,16
 880:	000002fb          	0x2fb
 884:	086d                	c.addi	x16,27
 886:	0000                	c.unimp
 888:	6409                	c.lui	x8,0x2
 88a:	0000                	c.unimp
 88c:	1d00                	c.addi4spn	x8,x2,688
 88e:	0800                	c.addi4spn	x8,x2,16
 890:	0064                	c.addi4spn	x9,x2,12
 892:	0000                	c.unimp
 894:	087d                	c.addi	x16,31
 896:	0000                	c.unimp
 898:	6409                	c.lui	x8,0x2
 89a:	0000                	c.unimp
 89c:	1d00                	c.addi4spn	x8,x2,688
 89e:	1b00                	c.addi4spn	x8,x2,432
 8a0:	04f0                	c.addi4spn	x12,x2,588
 8a2:	a2030283          	lb	x5,-1504(x6) # 1a20 <__global_pointer$+0xda0>
 8a6:	0008                	0x8
 8a8:	1c00                	c.addi4spn	x8,x2,560
 8aa:	03f9                	c.addi	x7,30
 8ac:	0000                	c.unimp
 8ae:	9a04                	0x9a04
 8b0:	0b02                	c.slli64	x22
 8b2:	06f1                	c.addi	x13,28
 8b4:	0000                	c.unimp
 8b6:	c11c                	c.sw	x15,0(x10)
 8b8:	0004                	0x4
 8ba:	0400                	c.addi4spn	x8,x2,512
 8bc:	360b02a3          	sb	x0,869(x22)
 8c0:	0008                	0x8
 8c2:	0000                	c.unimp
 8c4:	bc08                	c.fsd	f10,56(x8)
 8c6:	0005                	c.addi	x0,1
 8c8:	b200                	c.fsd	f8,32(x12)
 8ca:	0008                	0x8
 8cc:	0900                	c.addi4spn	x8,x2,144
 8ce:	0064                	c.addi4spn	x9,x2,12
 8d0:	0000                	c.unimp
 8d2:	0018                	0x18
 8d4:	111d                	c.addi	x2,-25
 8d6:	0001                	c.addi	x0,0
 8d8:	0f00                	c.addi4spn	x8,x2,912
 8da:	b204                	c.fsd	f9,32(x12)
 8dc:	0008                	0x8
 8de:	1e00                	c.addi4spn	x8,x2,816
 8e0:	08c8                	c.addi4spn	x10,x2,84
 8e2:	0000                	c.unimp
 8e4:	6214                	c.flw	f13,0(x12)
 8e6:	0004                	0x4
 8e8:	0000                	c.unimp
 8ea:	08bd040f          	0x8bd040f
 8ee:	0000                	c.unimp
 8f0:	0185040f          	0x185040f
 8f4:	0000                	c.unimp
 8f6:	df1e                	c.swsp	x7,188(x2)
 8f8:	0008                	0x8
 8fa:	1400                	c.addi4spn	x8,x2,544
 8fc:	005d                	c.addi	x0,23
 8fe:	0000                	c.unimp
 900:	0f00                	c.addi4spn	x8,x2,912
 902:	e504                	c.fsw	f9,8(x10)
 904:	0008                	0x8
 906:	0f00                	c.addi4spn	x8,x2,912
 908:	d404                	c.sw	x9,40(x8)
 90a:	0008                	0x8
 90c:	0800                	c.addi4spn	x8,x2,16
 90e:	0656                	c.slli	x12,0x15
 910:	0000                	c.unimp
 912:	000008fb          	0x8fb
 916:	6409                	c.lui	x8,0x2
 918:	0000                	c.unimp
 91a:	0200                	c.addi4spn	x8,x2,256
 91c:	1f00                	c.addi4spn	x8,x2,944
 91e:	046a                	c.slli	x8,0x1a
 920:	0000                	c.unimp
 922:	3304                	c.fld	f9,32(x14)
 924:	04621703          	lh	x14,70(x4) # 355c4 <_sp+0x255c4>
 928:	0000                	c.unimp
 92a:	631f 0004 0400      	0x4000004631f
 930:	0334                	c.addi4spn	x13,x2,392
 932:	681d                	c.lui	x16,0x7
 934:	0004                	0x4
 936:	2000                	c.fld	f8,0(x8)
 938:	0502                	c.slli64	x10
 93a:	0000                	c.unimp
 93c:	5c01                	c.li	x24,-32
 93e:	5d05                	c.li	x26,-31
 940:	0000                	c.unimp
 942:	1000                	c.addi4spn	x8,x2,32
 944:	0004                	0x4
 946:	3000                	c.fld	f8,32(x8)
 948:	0000                	c.unimp
 94a:	0100                	c.addi4spn	x8,x2,128
 94c:	219c                	c.fld	f15,0(x11)
 94e:	02be                	c.slli	x5,0xf
 950:	0000                	c.unimp
 952:	4601                	c.li	x12,0
 954:	5d05                	c.li	x26,-31
 956:	0000                	c.unimp
 958:	a000                	c.fsd	f8,0(x8)
 95a:	0002                	c.slli64	x0
 95c:	7000                	c.flw	f8,32(x8)
 95e:	0001                	c.addi	x0,0
 960:	0100                	c.addi4spn	x8,x2,128
 962:	c79c                	c.sw	x15,8(x15)
 964:	0009                	c.addi	x0,2
 966:	2200                	c.fld	f8,0(x12)
 968:	0078                	c.addi4spn	x14,x2,12
 96a:	4601                	c.li	x12,0
 96c:	5d15                	c.li	x26,-27
 96e:	0000                	c.unimp
 970:	0200                	c.addi4spn	x8,x2,256
 972:	5c91                	c.li	x25,-28
 974:	7922                	c.flwsp	f18,40(x2)
 976:	0100                	c.addi4spn	x8,x2,128
 978:	1c46                	c.slli	x24,0x31
 97a:	005d                	c.addi	x0,23
 97c:	0000                	c.unimp
 97e:	9102                	c.jalr	x2
 980:	2358                	c.fld	f14,128(x14)
 982:	000004ab          	0x4ab
 986:	4601                	c.li	x12,0
 988:	00005d23          	0x5d23
 98c:	0200                	c.addi4spn	x8,x2,256
 98e:	5491                	c.li	x9,-28
 990:	7322                	c.flwsp	f6,40(x2)
 992:	01006c6f          	jal	x24,69a2 <__global_pointer$+0x5d22>
 996:	2e46                	c.fldsp	f28,80(x2)
 998:	000009d7          	0x9d7
 99c:	9102                	c.jalr	x2
 99e:	2350                	c.fld	f12,128(x14)
 9a0:	0252                	c.slli	x4,0x14
 9a2:	0000                	c.unimp
 9a4:	4601                	c.li	x12,0
 9a6:	dd3d                	c.beqz	x10,924 <_ebss+0x464>
 9a8:	0009                	c.addi	x0,2
 9aa:	0200                	c.addi4spn	x8,x2,256
 9ac:	4c91                	c.li	x25,4
 9ae:	00050723          	sb	x0,14(x10)
 9b2:	0100                	c.addi4spn	x8,x2,128
 9b4:	4b46                	c.lwsp	x22,80(x2)
 9b6:	09dd                	c.addi	x19,23
 9b8:	0000                	c.unimp
 9ba:	9102                	c.jalr	x2
 9bc:	2448                	c.fld	f10,136(x8)
 9be:	4701006b          	0x4701006b
 9c2:	5d08                	c.lw	x10,56(x10)
 9c4:	0000                	c.unimp
 9c6:	0200                	c.addi4spn	x8,x2,256
 9c8:	6c91                	c.lui	x25,0x4
 9ca:	1c25                	c.addi	x24,-23
 9cc:	0001                	c.addi	x0,0
 9ce:	0100                	c.addi4spn	x8,x2,128
 9d0:	005d0b47          	fmsub.s	f22,f26,f5,f0,rne
 9d4:	0000                	c.unimp
 9d6:	9102                	c.jalr	x2
 9d8:	2568                	c.fld	f10,200(x10)
 9da:	0190                	c.addi4spn	x12,x2,192
 9dc:	0000                	c.unimp
 9de:	4701                	c.li	x14,0
 9e0:	00005d13          	srli	x26,x0,0x0
 9e4:	0200                	c.addi4spn	x8,x2,256
 9e6:	6491                	c.lui	x9,0x4
 9e8:	0800                	c.addi4spn	x8,x2,16
 9ea:	005d                	c.addi	x0,23
 9ec:	0000                	c.unimp
 9ee:	000009d7          	0x9d7
 9f2:	6409                	c.lui	x8,0x2
 9f4:	0000                	c.unimp
 9f6:	0200                	c.addi4spn	x8,x2,256
 9f8:	0f00                	c.addi4spn	x8,x2,912
 9fa:	c704                	c.sw	x9,8(x14)
 9fc:	0009                	c.addi	x0,2
 9fe:	0f00                	c.addi4spn	x8,x2,912
 a00:	5d04                	c.lw	x9,56(x10)
 a02:	0000                	c.unimp
 a04:	2600                	c.fld	f8,8(x12)
 a06:	026c                	c.addi4spn	x11,x2,268
 a08:	0000                	c.unimp
 a0a:	2701                	c.jal	110a <__global_pointer$+0x48a>
 a0c:	5d05                	c.li	x26,-31
 a0e:	0000                	c.unimp
 a10:	4800                	c.lw	x8,16(x8)
 a12:	0001                	c.addi	x0,0
 a14:	5800                	c.lw	x8,48(x8)
 a16:	0001                	c.addi	x0,0
 a18:	0100                	c.addi4spn	x8,x2,128
 a1a:	5b9c                	c.lw	x15,48(x15)
 a1c:	000a                	c.slli	x0,0x2
 a1e:	2400                	c.fld	f8,8(x8)
 a20:	006c6f73          	csrrsi	x30,0x6,24
 a24:	2801                	c.jal	a34 <_ebss+0x574>
 a26:	5b09                	c.li	x22,-30
 a28:	000a                	c.slli	x0,0x2
 a2a:	0200                	c.addi4spn	x8,x2,256
 a2c:	4491                	c.li	x9,4
 a2e:	5225                	c.li	x4,-23
 a30:	0002                	c.slli64	x0
 a32:	0100                	c.addi4spn	x8,x2,128
 a34:	0932                	c.slli	x18,0xc
 a36:	0a71                	c.addi	x20,28
 a38:	0000                	c.unimp
 a3a:	7fa49103          	lh	x2,2042(x9) # 47fa <__global_pointer$+0x3b7a>
 a3e:	0725                	c.addi	x14,9
 a40:	0005                	c.addi	x0,1
 a42:	0100                	c.addi4spn	x8,x2,128
 a44:	0a710933          	0xa710933
 a48:	0000                	c.unimp
 a4a:	7f849103          	lh	x2,2040(x9)
 a4e:	00015827          	0x15827
 a52:	6c00                	c.flw	f8,24(x8)
 a54:	0000                	c.unimp
 a56:	2400                	c.fld	f8,8(x8)
 a58:	0078                	c.addi4spn	x14,x2,12
 a5a:	2b01                	c.jal	f6a <__global_pointer$+0x2ea>
 a5c:	5d0e                	c.lwsp	x26,224(x2)
 a5e:	0000                	c.unimp
 a60:	0200                	c.addi4spn	x8,x2,256
 a62:	6c91                	c.lui	x25,0x4
 a64:	00016027          	0x16027
 a68:	4c00                	c.lw	x8,24(x8)
 a6a:	0000                	c.unimp
 a6c:	2400                	c.fld	f8,8(x8)
 a6e:	0079                	c.addi	x0,30
 a70:	2c01                	c.jal	c80 <__global_pointer$>
 a72:	5d12                	c.lwsp	x26,36(x2)
 a74:	0000                	c.unimp
 a76:	0200                	c.addi4spn	x8,x2,256
 a78:	6891                	c.lui	x17,0x4
 a7a:	0000                	c.unimp
 a7c:	0800                	c.addi4spn	x8,x2,16
 a7e:	005d                	c.addi	x0,23
 a80:	0000                	c.unimp
 a82:	0a71                	c.addi	x20,28
 a84:	0000                	c.unimp
 a86:	6409                	c.lui	x8,0x2
 a88:	0000                	c.unimp
 a8a:	0200                	c.addi4spn	x8,x2,256
 a8c:	6409                	c.lui	x8,0x2
 a8e:	0000                	c.unimp
 a90:	0200                	c.addi4spn	x8,x2,256
 a92:	0800                	c.addi4spn	x8,x2,16
 a94:	005d                	c.addi	x0,23
 a96:	0000                	c.unimp
 a98:	0a81                	c.addi	x21,0
 a9a:	0000                	c.unimp
 a9c:	6409                	c.lui	x8,0x2
 a9e:	0000                	c.unimp
 aa0:	0700                	c.addi4spn	x8,x2,896
 aa2:	2800                	c.fld	f8,16(x8)
 aa4:	025e                	c.slli	x4,0x17
 aa6:	0000                	c.unimp
 aa8:	1401                	c.addi	x8,-32
 aaa:	5d05                	c.li	x26,-31
 aac:	0000                	c.unimp
 aae:	b400                	c.fsd	f8,40(x8)
 ab0:	0000                	c.unimp
 ab2:	9400                	0x9400
 ab4:	0000                	c.unimp
 ab6:	0100                	c.addi4spn	x8,x2,128
 ab8:	229c                	c.fld	f15,0(x13)
 aba:	0078                	c.addi4spn	x14,x2,12
 abc:	1401                	c.addi	x8,-32
 abe:	5d10                	c.lw	x12,56(x10)
 ac0:	0000                	c.unimp
 ac2:	0200                	c.addi4spn	x8,x2,256
 ac4:	6c91                	c.lui	x25,0x4
 ac6:	7922                	c.flwsp	f18,40(x2)
 ac8:	0100                	c.addi4spn	x8,x2,128
 aca:	1714                	c.addi4spn	x13,x2,928
 acc:	005d                	c.addi	x0,23
 ace:	0000                	c.unimp
 ad0:	9102                	c.jalr	x2
 ad2:	2268                	c.fld	f10,192(x12)
 ad4:	006c6f73          	csrrsi	x30,0x6,24
 ad8:	1401                	c.addi	x8,-32
 ada:	d71e                	c.swsp	x7,172(x2)
 adc:	0009                	c.addi	x0,2
 ade:	0200                	c.addi4spn	x8,x2,256
 ae0:	6491                	c.lui	x9,0x4
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
	nop
   0:	1101                	c.addi	x2,-32
   2:	1000                	c.addi4spn	x8,x2,32
	la ra, exit
   4:	5506                	c.lwsp	x10,96(x2)
   6:	0306                	c.slli	x6,0x1
   8:	1b0e                	c.slli	x22,0x23
   a:	250e                	c.fldsp	f10,192(x2)
	la sp, _sp
   c:	130e                	c.slli	x6,0x23
   e:	0005                	c.addi	x0,1
  10:	0000                	c.unimp
  12:	1101                	c.addi	x2,-32
	mv s0, sp
  14:	2501                	c.jal	614 <_ebss+0x154>
  16:	130e                	c.slli	x6,0x23
	la gp, __global_pointer$
  18:	1b0e030b          	0x1b0e030b
  1c:	110e                	c.slli	x2,0x23
  1e:	1201                	c.addi	x4,-32
	li tp, 0
  20:	1006                	c.slli	x0,0x21
  22:	02000017          	auipc	x0,0x2000
	li t0, 0
  26:	0024                	c.addi4spn	x9,x2,8
	li t1, 0
  28:	0b3e0b0b          	0xb3e0b0b
	li t2, 0
  2c:	00000e03          	lb	x28,0(x0) # 0 <crt>
	li s1, 0
  30:	0b002403          	lw	x8,176(x0) # b0 <exit+0x10>
	li a0, 0
  34:	030b3e0b          	0x30b3e0b
	li a1, 0
  38:	0008                	0x8
  3a:	0400                	c.addi4spn	x8,x2,512
	li a2, 0
  3c:	0016                	c.slli	x0,0x5
  3e:	0b3a0e03          	lb	x28,179(x20)
	li a3, 0
  42:	0b39053b          	0xb39053b
	li a4, 0
  46:	1349                	c.addi	x6,-14
	li a5, 0
  48:	0000                	c.unimp
  4a:	1605                	c.addi	x12,-31
	li a6, 0
  4c:	0300                	c.addi4spn	x8,x2,384
  4e:	3a0e                	c.fldsp	f20,224(x2)
	li a7, 0
  50:	390b3b0b          	0x390b3b0b
	li s2, 0
  54:	0013490b          	0x13490b
	li s3, 0
  58:	0600                	c.addi4spn	x8,x2,768
  5a:	0b0b0117          	auipc	x2,0xb0b0
	li s4, 0
  5e:	0b3a                	c.slli	x22,0xe
	li s5, 0
  60:	0b390b3b          	0xb390b3b
	li s6, 0
  64:	1301                	c.addi	x6,-32
  66:	0000                	c.unimp
	li s7, 0
  68:	03000d07          	0x3000d07
	li s8, 0
  6c:	3a0e                	c.fldsp	f20,224(x2)
  6e:	390b3b0b          	0x390b3b0b
	li s9, 0
  72:	0013490b          	0x13490b
	li s10, 0
  76:	0800                	c.addi4spn	x8,x2,16
	li s11, 0
  78:	0101                	c.addi	x2,0
  7a:	1349                	c.addi	x6,-14
	li t3, 0
  7c:	1301                	c.addi	x6,-32
  7e:	0000                	c.unimp
	li t4, 0
  80:	2109                	c.jal	482 <main+0x72>
  82:	4900                	c.lw	x8,16(x10)
	li t5, 0
  84:	000b2f13          	slti	x30,x22,0
	li t6, 0
  88:	0a00                	c.addi4spn	x8,x2,272
  8a:	0b0b0113          	addi	x2,x22,176
	j main
  8e:	0b3a                	c.slli	x22,0xe
  90:	0b390b3b          	0xb390b3b
  94:	1301                	c.addi	x6,-32
  96:	0000                	c.unimp
  98:	03000d0b          	0x3000d0b
  9c:	3a0e                	c.fldsp	f20,224(x2)
  9e:	390b3b0b          	0x390b3b0b
	la sp, _sp
  a2:	3813490b          	0x3813490b
  a6:	0c00000b          	0xc00000b
	sw a0, -8(sp)
  aa:	0b0b000f          	0xb0b000f
	nop
  ae:	0000                	c.unimp
	wfi
  b0:	130d                	c.addi	x6,-29
  b2:	0301                	c.addi	x6,0
int isSafe(int x, int y, int sol[N][N]) {
  b4:	0b0e                	c.slli	x22,0x3
  b6:	3b0b3a0b          	0x3b0b3a0b
  ba:	010b390b          	0x10b390b
  be:	0e000013          	addi	x0,x0,224
  c2:	000d                	c.addi	x0,3
  c4:	0b3a0803          	lb	x16,179(x20)
  c8:	0b390b3b          	0xb390b3b
    return ( x >= 0 && x < N && y >= 0 && y < N && sol[x][y] == -1);
  cc:	1349                	c.addi	x6,-14
  ce:	0b38                	c.addi4spn	x14,x2,408
  d0:	0000                	c.unimp
  d2:	0b000f0f          	0xb000f0f
  d6:	0013490b          	0x13490b
  da:	1000                	c.addi4spn	x8,x2,32
  dc:	0e030113          	addi	x2,x6,224
  e0:	0b3a050b          	0xb3a050b
  e4:	0b390b3b          	0xb390b3b
  e8:	1301                	c.addi	x6,-32
  ea:	0000                	c.unimp
  ec:	0d11                	c.addi	x26,4
  ee:	0300                	c.addi4spn	x8,x2,384
  f0:	3a0e                	c.fldsp	f20,224(x2)
  f2:	390b3b0b          	0x390b3b0b
  f6:	3813490b          	0x3813490b
  fa:	0005                	c.addi	x0,1
  fc:	1200                	c.addi4spn	x8,x2,288
  fe:	0015                	c.addi	x0,5
 100:	00001927          	0x1927
 104:	27011513          	0x27011513
 108:	4919                	c.li	x18,6
 10a:	00130113          	addi	x2,x6,1
 10e:	1400                	c.addi4spn	x8,x2,544
 110:	0005                	c.addi	x0,1
 112:	1349                	c.addi	x6,-14
 114:	0000                	c.unimp
 116:	2615                	c.jal	43a <main+0x2a>
 118:	4900                	c.lw	x8,16(x10)
 11a:	16000013          	addi	x0,x0,352
 11e:	0e030113          	addi	x2,x6,224
 122:	0b3a050b          	0xb3a050b
 126:	0b39053b          	0xb39053b
 12a:	1301                	c.addi	x6,-32
 12c:	0000                	c.unimp
 12e:	03000d17          	auipc	x26,0x3000
 132:	3a0e                	c.fldsp	f20,224(x2)
 134:	39053b0b          	0x39053b0b
}
 138:	3813490b          	0x3813490b
 13c:	1800000b          	0x1800000b
 140:	000d                	c.addi	x0,3
 142:	0b3a0e03          	lb	x28,179(x20)
 146:	0b39053b          	0xb39053b
int solveKT() {
 14a:	1349                	c.addi	x6,-14
 14c:	0538                	c.addi4spn	x14,x2,648
 14e:	0000                	c.unimp
 150:	1319                	c.addi	x6,-26
 152:	0301                	c.addi	x6,0
 154:	0b0e                	c.slli	x22,0x3
 156:	3b0b3a0b          	0x3b0b3a0b
    for (int x = 0; x < N; x++)
 15a:	3905                	c.jal	fffffd8a <_sp+0xfffefd8a>
 15c:	0013010b          	0x13010b
        for (int y = 0; y < N; y++)
 160:	1a00                	c.addi4spn	x8,x2,304
 162:	0b0b0113          	addi	x2,x22,176
 166:	0b3a                	c.slli	x22,0xe
            sol[x][y] = -1;
 168:	0b39053b          	0xb39053b
 16c:	1301                	c.addi	x6,-32
 16e:	0000                	c.unimp
 170:	0b01171b          	0xb01171b
 174:	3b0b3a0b          	0x3b0b3a0b
 178:	3905                	c.jal	fffffda8 <_sp+0xfffefda8>
 17a:	0013010b          	0x13010b
 17e:	1c00                	c.addi4spn	x8,x2,560
 180:	000d                	c.addi	x0,3
 182:	0b3a0e03          	lb	x28,179(x20)
 186:	0b39053b          	0xb39053b
 18a:	1349                	c.addi	x6,-14
 18c:	0000                	c.unimp
 18e:	131d                	c.addi	x6,-25
 190:	0300                	c.addi4spn	x8,x2,384
 192:	3c0e                	c.fldsp	f24,224(x2)
        for (int y = 0; y < N; y++)
 194:	0019                	c.addi	x0,6
 196:	1e00                	c.addi4spn	x8,x2,816
 198:	0115                	c.addi	x2,5
 19a:	13011927          	0x13011927
 19e:	0000                	c.unimp
 1a0:	341f 0300 3a0e      	0x3a0e0300341f
 1a6:	39053b0b          	0x39053b0b
 1aa:	3f13490b          	0x3f13490b
    for (int x = 0; x < N; x++)
 1ae:	3c19                	c.jal	fffffbc4 <_sp+0xfffefbc4>
 1b0:	0019                	c.addi	x0,6
 1b2:	2000                	c.fld	f8,0(x8)
 1b4:	002e                	c.slli	x0,0xb
 1b6:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
 1be:	0b39                	c.addi	x22,14
 1c0:	1349                	c.addi	x6,-14
 1c2:	0111                	c.addi	x2,4
    int xMove[8] = {  2, 1, -1, -2, -2, -1,  1,  2 };
 1c4:	0612                	c.slli	x12,0x4
 1c6:	1840                	c.addi4spn	x8,x2,52
 1c8:	4296                	c.lwsp	x5,68(x2)
 1ca:	0019                	c.addi	x0,6
 1cc:	2100                	c.fld	f8,0(x10)
 1ce:	012e                	c.slli	x2,0xb
 1d0:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
 1d8:	0b39                	c.addi	x22,14
 1da:	13491927          	0x13491927
 1de:	0111                	c.addi	x2,4
 1e0:	0612                	c.slli	x12,0x4
 1e2:	1840                	c.addi4spn	x8,x2,52
 1e4:	4296                	c.lwsp	x5,68(x2)
 1e6:	0119                	c.addi	x2,6
 1e8:	22000013          	addi	x0,x0,544
 1ec:	0005                	c.addi	x0,1
 1ee:	0b3a0803          	lb	x16,179(x20)
 1f2:	0b390b3b          	0xb390b3b
 1f6:	1349                	c.addi	x6,-14
 1f8:	1802                	c.slli	x16,0x20
 1fa:	0000                	c.unimp
 1fc:	03000523          	sb	x16,42(x0) # 2a <crt+0x2a>
 200:	3a0e                	c.fldsp	f20,224(x2)
 202:	390b3b0b          	0x390b3b0b
 206:	0213490b          	0x213490b
 20a:	0018                	0x18
    int yMove[8] = {  1, 2,  2,  1, -1, -2, -2, -1 };
 20c:	2400                	c.fld	f8,8(x8)
 20e:	0034                	c.addi4spn	x13,x2,8
 210:	0b3a0803          	lb	x16,179(x20)
 214:	0b390b3b          	0xb390b3b
 218:	1349                	c.addi	x6,-14
 21a:	1802                	c.slli	x16,0x20
 21c:	0000                	c.unimp
 21e:	3425                	c.jal	fffffc46 <_sp+0xfffefc46>
 220:	0300                	c.addi4spn	x8,x2,384
 222:	3a0e                	c.fldsp	f20,224(x2)
 224:	390b3b0b          	0x390b3b0b
 228:	0213490b          	0x213490b
 22c:	0018                	0x18
 22e:	2600                	c.fld	f8,8(x12)
 230:	012e                	c.slli	x2,0xb
 232:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
 23a:	0b39                	c.addi	x22,14
 23c:	1349                	c.addi	x6,-14
 23e:	0111                	c.addi	x2,4
 240:	0612                	c.slli	x12,0x4
 242:	1840                	c.addi4spn	x8,x2,52
 244:	4296                	c.lwsp	x5,68(x2)
 246:	0119                	c.addi	x2,6
 248:	27000013          	addi	x0,x0,624
 24c:	0111010b          	0x111010b
 250:	0612                	c.slli	x12,0x4
 252:	0000                	c.unimp
    sol[0][0]  = 0;
 254:	2e28                	c.fld	f10,88(x12)
 256:	3f01                	c.jal	166 <solveKT+0x1e>
    if (solveKTUtil(0, 0, 1, sol, xMove, yMove) == 0) {
 258:	0319                	c.addi	x6,6
 25a:	3a0e                	c.fldsp	f20,224(x2)
 25c:	390b3b0b          	0x390b3b0b
 260:	4919270b          	0x4919270b
 264:	12011113          	0x12011113
 268:	4006                	0x4006
 26a:	9718                	0x9718
 26c:	1942                	c.slli	x18,0x30
 26e:	0000                	c.unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
	nop
   0:	0024                	c.addi4spn	x9,x2,8
   2:	0000                	c.unimp
	la ra, exit
   4:	0002                	c.slli64	x0
   6:	0000                	c.unimp
   8:	0000                	c.unimp
   a:	0004                	0x4
	...
	mv s0, sp
  14:	0090                	c.addi4spn	x12,x2,64
  16:	0000                	c.unimp
	la gp, __global_pointer$
  18:	00a0                	c.addi4spn	x8,x2,72
  1a:	0000                	c.unimp
  1c:	0014                	0x14
	...
	li t0, 0
  26:	0000                	c.unimp
	li t1, 0
  28:	001c                	0x1c
  2a:	0000                	c.unimp
	li t2, 0
  2c:	0002                	c.slli64	x0
  2e:	0022                	c.slli	x0,0x8
	li s1, 0
  30:	0000                	c.unimp
  32:	0004                	0x4
	li a0, 0
  34:	0000                	c.unimp
  36:	0000                	c.unimp
	li a1, 0
  38:	00b4                	c.addi4spn	x13,x2,72
  3a:	0000                	c.unimp
	li a2, 0
  3c:	038c                	c.addi4spn	x11,x2,448
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
	nop
   0:	2e747263          	bgeu	x8,x7,2e4 <solveKTUtil+0x44>
	la ra, exit
   4:	682f0073          	0x682f0073
   8:	2f656d6f          	jal	x26,562fe <_sp+0x462fe>
	la sp, _sp
   c:	79696873          	csrrsi	x16,0x796,18
  10:	6c75                	c.lui	x24,0x1d
  12:	7569                	c.lui	x10,0xffffa
	mv s0, sp
  14:	7365442f          	0x7365442f
	la gp, __global_pointer$
  18:	706f746b          	0x706f746b
  1c:	6f72672f          	0x6f72672f
	li tp, 0
  20:	7075                	c.lui	x0,0xffffd
  22:	7738                	c.flw	f14,104(x14)
	li t0, 0
  24:	3032                	c.fldsp	f0,296(x2)
  26:	4700                	c.lw	x8,8(x14)
	li t1, 0
  28:	554e                	c.lwsp	x10,240(x2)
  2a:	4120                	c.lw	x8,64(x10)
	li t2, 0
  2c:	2e322053          	0x2e322053
	li s1, 0
  30:	5f003433          	0x5f003433
	li a0, 0
  34:	7364                	c.flw	f9,100(x14)
  36:	61685f6f          	jal	x30,8564c <_sp+0x7564c>
	li a1, 0
  3a:	646e                	c.flwsp	f8,216(x2)
	li a2, 0
  3c:	656c                	c.flw	f11,76(x10)
  3e:	5f00                	c.lw	x8,56(x14)
	li a3, 0
  40:	657a6973          	csrrsi	x18,0x657,20
	li a4, 0
  44:	5f00                	c.lw	x8,56(x14)
  46:	6172                	c.flwsp	f2,28(x2)
	li a5, 0
  48:	646e                	c.flwsp	f8,216(x2)
  4a:	3834                	c.fld	f13,112(x8)
	li a6, 0
  4c:	4700                	c.lw	x8,8(x14)
  4e:	554e                	c.lwsp	x10,240(x2)
	li a7, 0
  50:	4320                	c.lw	x8,64(x14)
  52:	3131                	c.jal	fffffc5e <_sp+0xfffefc5e>
	li s2, 0
  54:	3920                	c.fld	f8,112(x10)
  56:	322e                	c.fldsp	f4,232(x2)
	li s3, 0
  58:	302e                	c.fldsp	f0,232(x2)
  5a:	2d20                	c.fld	f8,88(x10)
	li s4, 0
  5c:	6e6d                	c.lui	x28,0x1b
  5e:	65722d6f          	jal	x26,22eb4 <_sp+0x12eb4>
	li s5, 0
  62:	616c                	c.flw	f11,68(x10)
	li s6, 0
  64:	2078                	c.fld	f14,192(x8)
  66:	6d2d                	c.lui	x26,0xb
	li s7, 0
  68:	7261                	c.lui	x4,0xffff8
  6a:	723d6863          	bltu	x26,x3,79a <_ebss+0x2da>
	li s8, 0
  6e:	3376                	c.fldsp	f6,376(x2)
	li s9, 0
  70:	6932                	c.flwsp	f18,12(x2)
  72:	206d                	c.jal	11c <isSafe+0x68>
	li s10, 0
  74:	6d2d                	c.lui	x26,0xb
  76:	6261                	c.lui	x4,0x18
	li s11, 0
  78:	3d69                	c.jal	ffffff12 <_sp+0xfffeff12>
  7a:	6c69                	c.lui	x24,0x1a
	li t3, 0
  7c:	3370                	c.fld	f12,224(x14)
  7e:	2032                	c.fldsp	f0,264(x2)
	li t4, 0
  80:	6d2d                	c.lui	x26,0xb
  82:	69727473          	csrrci	x8,0x697,4
	li t5, 0
  86:	612d7463          	bgeu	x26,x18,68e <_ebss+0x1ce>
	li t6, 0
  8a:	696c                	c.flw	f11,84(x10)
	j main
  8c:	2d206e67          	0x2d206e67
  90:	746d                	c.lui	x8,0xffffb
  92:	6e75                	c.lui	x28,0x1d
  94:	3d65                	c.jal	ffffff4c <_sp+0xfffeff4c>
  96:	6f72                	c.flwsp	f30,28(x2)
  98:	74656b63          	bltu	x10,x6,7ee <_ebss+0x32e>
  9c:	2d20                	c.fld	f8,88(x10)
  9e:	4f2d2067          	0x4f2d2067
	la sp, _sp
  a2:	2030                	c.fld	f12,64(x8)
  a4:	732d                	c.lui	x6,0xfffeb
  a6:	6474                	c.flw	f13,76(x8)
	sw a0, -8(sp)
  a8:	673d                	c.lui	x14,0xf
  aa:	756e                	c.flwsp	f10,248(x2)
	nop
  ac:	3131                	c.jal	fffffcb8 <_sp+0xfffefcb8>
  ae:	5f00                	c.lw	x8,56(x14)
	wfi
  b0:	6d65                	c.lui	x26,0x19
  b2:	7265                	c.lui	x4,0xffff9
int isSafe(int x, int y, int sol[N][N]) {
  b4:	636e6567          	0x636e6567
  b8:	0079                	c.addi	x0,30
  ba:	6574                	c.flw	f13,76(x10)
  bc:	705f7473          	csrrci	x8,0x705,30
  c0:	6f72                	c.flwsp	f30,28(x2)
  c2:	622f7367          	0x622f7367
  c6:	6361                	c.lui	x6,0x18
  c8:	6172746b          	0x6172746b
    return ( x >= 0 && x < N && y >= 0 && y < N && sol[x][y] == -1);
  cc:	632e6b63          	bltu	x28,x18,702 <_ebss+0x242>
  d0:	5f00                	c.lw	x8,56(x14)
  d2:	74726377          	0x74726377
  d6:	5f626d6f          	jal	x26,266cc <_sp+0x166cc>
  da:	74617473          	csrrci	x8,0x746,2
  de:	0065                	c.addi	x0,25
  e0:	775f 7363 7472      	0x74727363775f
  e6:	73626d6f          	jal	x26,2681c <_sp+0x1681c>
  ea:	735f 6174 6574      	0x65746174735f
  f0:	6c00                	c.flw	f8,24(x8)
  f2:	20676e6f          	jal	x28,762f8 <_sp+0x662f8>
  f6:	6f6c                	c.flw	f11,92(x14)
  f8:	676e                	c.flwsp	f14,216(x2)
  fa:	7520                	c.flw	f8,104(x10)
  fc:	736e                	c.flwsp	f6,248(x2)
  fe:	6769                	c.lui	x14,0x1a
 100:	656e                	c.flwsp	f10,216(x2)
 102:	2064                	c.fld	f9,192(x8)
 104:	6e69                	c.lui	x28,0x1a
 106:	0074                	c.addi4spn	x13,x2,12
 108:	6c5f 6662 6973      	0x697366626c5f
 10e:	657a                	c.flwsp	f10,156(x2)
 110:	5f00                	c.lw	x8,56(x14)
 112:	6c5f 636f 6c61      	0x6c61636f6c5f
 118:	5f65                	c.li	x30,-7
 11a:	0074                	c.addi4spn	x13,x2,12
 11c:	656e                	c.flwsp	f10,216(x2)
 11e:	7478                	c.flw	f14,108(x8)
 120:	785f 5f00 626d      	0x626d5f00785f
 126:	7472                	c.flwsp	f8,60(x2)
 128:	5f63776f          	jal	x14,3771e <_sp+0x2771e>
 12c:	74617473          	csrrci	x8,0x746,2
 130:	0065                	c.addi	x0,25
 132:	775f 7463 6d6f      	0x6d6f7463775f
}
 138:	5f62                	c.lwsp	x30,56(x2)
 13a:	74617473          	csrrci	x8,0x746,2
 13e:	0065                	c.addi	x0,25
 140:	5f5f 6d74 735f      	0x735f6d745f5f
 146:	6365                	c.lui	x6,0x19
int solveKT() {
 148:	6c00                	c.flw	f8,24(x8)
 14a:	20676e6f          	jal	x28,76350 <_sp+0x66350>
 14e:	6f6c                	c.flw	f11,92(x14)
 150:	676e                	c.flwsp	f14,216(x2)
 152:	6920                	c.flw	f8,80(x10)
 154:	746e                	c.flwsp	f8,248(x2)
 156:	5f00                	c.lw	x8,56(x14)
    for (int x = 0; x < N; x++)
 158:	6275                	c.lui	x4,0x1d
 15a:	6675                	c.lui	x12,0x1d
 15c:	5f00                	c.lw	x8,56(x14)
 15e:	6162                	c.flwsp	f2,24(x2)
        for (int y = 0; y < N; y++)
 160:	5f006573          	csrrsi	x10,0x5f0,0
 164:	745f 5f6d 6f68      	0x6f685f6d745f
            sol[x][y] = -1;
 16a:	7275                	c.lui	x4,0xffffd
 16c:	5f00                	c.lw	x8,56(x14)
 16e:	735f 0066 6f5f      	0x6f5f0066735f
 174:	5f6e                	c.lwsp	x30,248(x2)
 176:	7865                	c.lui	x16,0xffff9
 178:	7469                	c.lui	x8,0xffffa
 17a:	615f 6772 0073      	0x736772615f
 180:	635f 6f6f 696b      	0x696b6f6f635f
 186:	0065                	c.addi	x0,25
 188:	5f5f 6773 756c      	0x756c67735f5f
 18e:	0065                	c.addi	x0,25
 190:	656e                	c.flwsp	f10,216(x2)
 192:	7478                	c.flw	f14,108(x8)
        for (int y = 0; y < N; y++)
 194:	795f 5f00 6c66      	0x6c665f00795f
 19a:	6761                	c.lui	x14,0x18
 19c:	695f0073          	0x695f0073
 1a0:	78635f73          	csrrwi	x30,0x786,6
 1a4:	0061                	c.addi	x0,24
 1a6:	735f 6474 6e69      	0x6e696474735f
    for (int x = 0; x < N; x++)
 1ac:	5f00                	c.lw	x8,56(x14)
 1ae:	6c62                	c.flwsp	f24,24(x2)
 1b0:	7a69736b          	0x7a69736b
 1b4:	0065                	c.addi	x0,25
 1b6:	635f 7476 7562      	0x75627476635f
 1bc:	0066                	c.slli	x0,0x19
 1be:	6f5f 6666 6573      	0x657366666f5f
    int xMove[8] = {  2, 1, -1, -2, -2, -1,  1,  2 };
 1c4:	0074                	c.addi4spn	x13,x2,12
 1c6:	6d5f 7362 7472      	0x747273626d5f
 1cc:	7363776f          	jal	x14,37902 <_sp+0x27902>
 1d0:	735f 6174 6574      	0x65746174735f
 1d6:	5f00                	c.lw	x8,56(x14)
 1d8:	626d                	c.lui	x4,0x1b
 1da:	6c72                	c.flwsp	f24,28(x2)
 1dc:	6e65                	c.lui	x28,0x19
 1de:	735f 6174 6574      	0x65746174735f
 1e4:	5f00                	c.lw	x8,56(x14)
 1e6:	6e66                	c.flwsp	f28,88(x2)
 1e8:	7261                	c.lui	x4,0xffff8
 1ea:	5f007367          	0x5f007367
 1ee:	6e66                	c.flwsp	f28,88(x2)
 1f0:	735f0073          	0x735f0073
 1f4:	6769                	c.lui	x14,0x1a
 1f6:	006e                	c.slli	x0,0x1b
 1f8:	665f 6f6c 6b63      	0x6b636f6c665f
 1fe:	745f 5f00 7473      	0x74735f00745f
 204:	6564                	c.flw	f9,76(x10)
 206:	7272                	c.flwsp	f4,60(x2)
 208:	5f00                	c.lw	x8,56(x14)
 20a:	6942                	c.flwsp	f18,16(x2)
    int yMove[8] = {  1, 2,  2,  1, -1, -2, -2, -1 };
 20c:	746e6967          	0x746e6967
 210:	5f00                	c.lw	x8,56(x14)
 212:	6d6d6167          	0x6d6d6167
 216:	5f61                	c.li	x30,-8
 218:	6e676973          	csrrsi	x18,0x6e6,14
 21c:	006d6167          	0x6d6167
 220:	725f 6165 0064      	0x646165725f
 226:	725f 7365 6c75      	0x6c757365725f
 22c:	5f74                	c.lw	x13,124(x14)
 22e:	5f5f006b          	0x5f5f006b
 232:	6d74                	c.flw	f13,92(x10)
 234:	5f00                	c.lw	x8,56(x14)
 236:	775f 6863 0062      	0x626863775f
 23c:	735f 6474 756f      	0x756f6474735f
 242:	0074                	c.addi4spn	x13,x2,12
 244:	635f 7476 656c      	0x656c7476635f
 24a:	006e                	c.slli	x0,0x1b
 24c:	665f 6c69 0065      	0x656c69665f
 252:	4d78                	c.lw	x14,92(x10)
    sol[0][0]  = 0;
 254:	0065766f          	jal	x12,5725a <_sp+0x4725a>
    if (solveKTUtil(0, 0, 1, sol, xMove, yMove) == 0) {
 258:	645f 7461 0061      	0x617461645f
 25e:	7369                	c.lui	x6,0xffffa
 260:	65666153          	0x65666153
 264:	5f00                	c.lw	x8,56(x14)
 266:	696e                	c.flwsp	f18,216(x2)
 268:	0073626f          	jal	x4,36a6e <_sp+0x26a6e>
 26c:	766c6f73          	csrrsi	x30,0x766,24
 270:	4b65                	c.li	x22,25
 272:	0054                	c.addi4spn	x13,x2,4
 274:	726f6873          	csrrsi	x16,0x726,30
 278:	2074                	c.fld	f13,192(x8)
 27a:	6e75                	c.lui	x28,0x1d
 27c:	6e676973          	csrrsi	x18,0x6e6,14
        return 0;
 280:	6465                	c.lui	x8,0x19
 282:	6920                	c.flw	f8,80(x10)
 284:	746e                	c.flwsp	f8,248(x2)
 286:	5f00                	c.lw	x8,56(x14)
    return 1;
 288:	7461                	c.lui	x8,0xffff8
 28a:	7865                	c.lui	x16,0xffff9
}
 28c:	7469                	c.lui	x8,0xffffa
 28e:	0030                	c.addi4spn	x12,x2,8
 290:	735f 6769 616e      	0x616e6769735f
 296:	5f6c                	c.lw	x11,124(x14)
 298:	7562                	c.flwsp	f10,56(x2)
 29a:	0066                	c.slli	x0,0x19
 29c:	615f 6373 6974      	0x69746373615f
int solveKTUtil(int x, int y, int movei, int sol[N][N], int xMove[N], int yMove[N]) {
 2a2:	656d                	c.lui	x10,0x1b
 2a4:	625f 6675 5f00      	0x5f006675625f
 2aa:	6572                	c.flwsp	f10,28(x2)
 2ac:	746c7573          	csrrci	x10,0x746,24
 2b0:	5f00                	c.lw	x8,56(x14)
 2b2:	775f 6863 7700      	0x77006863775f
 2b8:	6e69                	c.lui	x28,0x1a
 2ba:	5f74                	c.lw	x13,124(x14)
 2bc:	0074                	c.addi4spn	x13,x2,12
 2be:	766c6f73          	csrrsi	x30,0x766,24
 2c2:	4b65                	c.li	x22,25
 2c4:	5554                	c.lw	x13,44(x10)
 2c6:	6974                	c.flw	f13,84(x10)
   if (movei == N*N)
 2c8:	006c                	c.addi4spn	x11,x2,12
 2ca:	6c5f 636f 006b      	0x6b636f6c5f
 2d0:	665f 616c 7367      	0x7367616c665f
       return 1;
 2d6:	0032                	c.slli	x0,0xc
 2d8:	775f 6972 6574      	0x65746972775f
   for (k = 0; k < 8; k++) {
 2de:	5f00                	c.lw	x8,56(x14)
 2e0:	745f 5f6d 6579      	0x65795f6d745f
       next_x = x + xMove[k];
 2e6:	7261                	c.lui	x4,0xffff8
 2e8:	5f00                	c.lw	x8,56(x14)
 2ea:	6d6e                	c.flwsp	f26,216(x2)
 2ec:	6c61                	c.lui	x24,0x18
 2ee:	6f6c                	c.flw	f11,92(x14)
 2f0:	6f6c0063          	beq	x24,x22,9d0 <_ebss+0x510>
 2f4:	676e                	c.flwsp	f14,216(x2)
 2f6:	6420                	c.flw	f8,72(x8)
 2f8:	6c62756f          	jal	x10,279be <_sp+0x179be>
 2fc:	0065                	c.addi	x0,25
 2fe:	6e5f 7865 6674      	0x667478656e5f
       next_y = y + yMove[k];
 304:	5f00                	c.lw	x8,56(x14)
 306:	745f 5f6d 6f6d      	0x6f6d5f6d745f
 30c:	006e                	c.slli	x0,0x1b
 30e:	615f 6574 6978      	0x69786574615f
 314:	0074                	c.addi4spn	x13,x2,12
 316:	5f5f 6473 6469      	0x646964735f5f
 31c:	6e69                	c.lui	x28,0x1a
 31e:	7469                	c.lui	x8,0xffffa
 320:	5f00                	c.lw	x8,56(x14)
 322:	5f66666f          	jal	x12,66918 <_sp+0x56918>
       if (isSafe(next_x, next_y, sol)) {
 326:	0074                	c.addi4spn	x13,x2,12
 328:	665f 6572 6c65      	0x6c656572665f
 32e:	7369                	c.lui	x6,0xffffa
 330:	0074                	c.addi4spn	x13,x2,12
 332:	4c5f 434f 5f4b      	0x5f4b434f4c5f
 338:	4552                	c.lwsp	x10,20(x2)
 33a:	53525543          	fmadd.d	f10,f4,f21,f10,unknown
 33e:	5649                	c.li	x12,-14
         sol[next_x][next_y] = movei;
 340:	5f45                	c.li	x30,-15
 342:	0054                	c.addi4spn	x13,x2,4
 344:	6e75                	c.lui	x28,0x1d
 346:	6e676973          	csrrsi	x18,0x6e6,14
 34a:	6465                	c.lui	x8,0x19
 34c:	6320                	c.flw	f8,64(x14)
 34e:	6168                	c.flw	f10,68(x10)
 350:	0072                	c.slli	x0,0x1c
 352:	6e5f 7765 5f00      	0x5f0077656e5f
 358:	5f68                	c.lw	x10,124(x14)
 35a:	7265                	c.lui	x4,0xffff9
 35c:	6e72                	c.flwsp	f28,28(x2)
 35e:	6873006f          	jal	x0,311e4 <_sp+0x211e4>
 362:	2074726f          	jal	x4,47d68 <_sp+0x37d68>
 366:	6e69                	c.lui	x28,0x1a
 368:	0074                	c.addi4spn	x13,x2,12
 36a:	5f5f 6d74 795f      	0x795f6d745f5f
 370:	6164                	c.flw	f9,68(x10)
 372:	0079                	c.addi	x0,30
         if (solveKTUtil(next_x, next_y, movei+1, sol, xMove, yMove) == 1)
 374:	5f5f 6273 6675      	0x667562735f5f
 37a:	5f00                	c.lw	x8,56(x14)
 37c:	6f69                	c.lui	x30,0x1a
 37e:	7362                	c.flwsp	f6,56(x2)
 380:	5f00                	c.lw	x8,56(x14)
 382:	465f 4c49 0045      	0x454c49465f
 388:	6d5f 7362 6174      	0x617473626d5f
 38e:	6574                	c.flw	f13,76(x10)
 390:	745f 5f00 735f      	0x735f5f00745f
 396:	4946                	c.lwsp	x18,80(x2)
 398:	454c                	c.lw	x11,12(x10)
 39a:	5f00                	c.lw	x8,56(x14)
 39c:	626d                	c.lui	x4,0x1b
 39e:	74617473          	csrrci	x8,0x746,2
 3a2:	0065                	c.addi	x0,25
             return 1;
 3a4:	725f 6e61 5f64      	0x5f646e61725f
 3aa:	656e                	c.flwsp	f10,216(x2)
             sol[next_x][next_y] = -1;// backtracking
 3ac:	7478                	c.flw	f14,108(x8)
 3ae:	5f00                	c.lw	x8,56(x14)
 3b0:	626d                	c.lui	x4,0x1b
 3b2:	656c                	c.flw	f11,76(x10)
 3b4:	5f6e                	c.lwsp	x30,248(x2)
 3b6:	74617473          	csrrci	x8,0x746,2
 3ba:	0065                	c.addi	x0,25
 3bc:	695f 636e 5f00      	0x5f00636e695f
 3c2:	6e69                	c.lui	x28,0x1a
 3c4:	0064                	c.addi4spn	x9,x2,12
 3c6:	6c5f 636f 6c61      	0x6c61636f6c5f
 3cc:	0065                	c.addi	x0,25
 3ce:	5f5f 6c63 6165      	0x61656c635f5f
 3d4:	756e                	c.flwsp	f10,248(x2)
 3d6:	0070                	c.addi4spn	x12,x2,12
 3d8:	755f 736e 6570      	0x6570736e755f
 3de:	69666963          	bltu	x12,x22,a70 <_ebss+0x5b0>
   for (k = 0; k < 8; k++) {
 3e2:	6465                	c.lui	x8,0x19
 3e4:	6c5f 636f 6c61      	0x6c61636f6c5f
 3ea:	5f65                	c.li	x30,-7
 3ec:	6e69                	c.lui	x28,0x1a
 3ee:	6f66                	c.flwsp	f30,88(x2)
 3f0:	5f00                	c.lw	x8,56(x14)
 3f2:	616d                	c.addi16sp	x2,240
 3f4:	7778                	c.flw	f14,108(x14)
 3f6:	7364                	c.flw	f9,100(x14)
   return 0;
 3f8:	5f00                	c.lw	x8,56(x14)
 3fa:	6572                	c.flwsp	f10,28(x2)
}
 3fc:	6e65                	c.lui	x28,0x19
 3fe:	0074                	c.addi4spn	x13,x2,12
 400:	735f 6565 0064      	0x646565735f
 406:	5f5f 6f63 6e75      	0x6e756f635f5f
 40c:	0074                	c.addi4spn	x13,x2,12
 40e:	5f5f 6176 756c      	0x756c61765f5f
{
 414:	0065                	c.addi	x0,25
 416:	735f 6565 006b      	0x6b6565735f
 41c:	665f 6f70 5f73      	0x5f736f70665f
    solveKT();
 422:	0074                	c.addi4spn	x13,x2,12
 424:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
    return 0;
 42a:	6e69                	c.lui	x28,0x1a
}
 42c:	5f00                	c.lw	x8,56(x14)
 42e:	756d                	c.lui	x10,0xffffb
 430:	746c                	c.flw	f11,108(x8)
 432:	5f00                	c.lw	x8,56(x14)
 434:	74727473          	csrrci	x8,0x747,4
 438:	6c5f6b6f          	jal	x22,f72fc <_sp+0xe72fc>
 43c:	7361                	c.lui	x6,0xffff8
 43e:	0074                	c.addi4spn	x13,x2,12
 440:	665f 746e 7079      	0x7079746e665f
 446:	7365                	c.lui	x6,0xffff9
 448:	5f00                	c.lw	x8,56(x14)
 44a:	6461                	c.lui	x8,0x18
 44c:	0064                	c.addi4spn	x9,x2,12
 44e:	5f5f 4c55 6e6f      	0x6e6f4c555f5f
 454:	675f0067          	jalr	x0,1653(x30) # 1a675 <_sp+0xa675>
 458:	7465                	c.lui	x8,0xffff9
 45a:	6164                	c.flw	f9,68(x10)
 45c:	6574                	c.flw	f13,76(x10)
 45e:	655f 7272 5f00      	0x5f007272655f
 464:	626f6c67          	0x626f6c67
 468:	6c61                	c.lui	x24,0x18
 46a:	695f 706d 7275      	0x7275706d695f
 470:	5f65                	c.li	x30,-7
 472:	7470                	c.flw	f12,108(x8)
 474:	0072                	c.slli	x0,0x1c
 476:	755f 756e 6573      	0x6573756e755f
 47c:	5f64                	c.lw	x9,124(x14)
 47e:	6172                	c.flwsp	f2,28(x2)
 480:	646e                	c.flwsp	f8,216(x2)
 482:	5f00                	c.lw	x8,56(x14)
 484:	00736477          	0x736477
 488:	5f5f 6d74 775f      	0x775f6d745f5f
 48e:	6164                	c.flw	f9,68(x10)
 490:	0079                	c.addi	x0,30
 492:	675f 756c 0065      	0x65756c675f
 498:	735f 6973 657a      	0x657a6973735f
 49e:	745f 5f00 366c      	0x366c5f00745f
 4a4:	6134                	c.flw	f13,64(x10)
 4a6:	625f 6675 6d00      	0x6d006675625f
 4ac:	6965766f          	jal	x12,57b42 <_sp+0x47b42>
 4b0:	5f00                	c.lw	x8,56(x14)
 4b2:	5f676973          	csrrsi	x18,0x5f6,14
 4b6:	7566                	c.flwsp	f10,120(x2)
 4b8:	636e                	c.flwsp	f6,216(x2)
 4ba:	5f00                	c.lw	x8,56(x14)
 4bc:	626e                	c.flwsp	f4,216(x2)
 4be:	6675                	c.lui	x12,0x1d
 4c0:	5f00                	c.lw	x8,56(x14)
 4c2:	6e75                	c.lui	x28,0x1d
 4c4:	7375                	c.lui	x6,0xffffd
 4c6:	6465                	c.lui	x8,0x19
 4c8:	5f00                	c.lw	x8,56(x14)
 4ca:	745f 5f6d 7369      	0x73695f6d745f
 4d0:	7364                	c.flw	f9,100(x14)
 4d2:	0074                	c.addi4spn	x13,x2,12
 4d4:	6c5f 636f 6c61      	0x6c61636f6c5f
 4da:	6974                	c.flw	f13,84(x10)
 4dc:	656d                	c.lui	x10,0x1b
 4de:	625f 6675 5f00      	0x5f006675625f
 4e4:	736f6c63          	bltu	x30,x22,c1c <_ebss+0x75c>
 4e8:	0065                	c.addi	x0,25
 4ea:	725f 3834 5f00      	0x5f003834725f
 4f0:	626d                	c.lui	x4,0x1b
 4f2:	6f74                	c.flw	f13,92(x14)
 4f4:	735f6377          	0x735f6377
 4f8:	6174                	c.flw	f13,68(x10)
 4fa:	6574                	c.flw	f13,76(x10)
 4fc:	5f00                	c.lw	x8,56(x14)
 4fe:	3570                	c.fld	f12,232(x10)
 500:	616d0073          	0x616d0073
 504:	6e69                	c.lui	x28,0x1a
 506:	7900                	c.flw	f8,48(x10)
 508:	6f4d                	c.lui	x30,0x13
 50a:	6576                	c.flwsp	f10,92(x2)
 50c:	5f00                	c.lw	x8,56(x14)
 50e:	745f 5f6d 646d      	0x646d5f6d745f
 514:	7961                	c.lui	x18,0xffff8
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
	nop
   0:	ffff                	0xffff
   2:	ffff                	0xffff
	...
	la sp, _sp
   c:	0090                	c.addi4spn	x12,x2,64
   e:	0000                	c.unimp
  10:	00a0                	c.addi4spn	x8,x2,72
  12:	0000                	c.unimp
	mv s0, sp
  14:	00b4                	c.addi4spn	x13,x2,72
	...

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
	nop
   0:	000c                	0xc
   2:	0000                	c.unimp
	la ra, exit
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	7c010003          	lb	x0,1984(x2) # b0b081a <_sp+0xb0a081a>
	la sp, _sp
   c:	0d01                	c.addi	x26,0
   e:	0002                	c.slli64	x0
  10:	0020                	c.addi4spn	x8,x2,8
  12:	0000                	c.unimp
	mv s0, sp
  14:	0000                	c.unimp
  16:	0000                	c.unimp
	la gp, __global_pointer$
  18:	00b4                	c.addi4spn	x13,x2,72
  1a:	0000                	c.unimp
  1c:	0094                	c.addi4spn	x13,x2,64
  1e:	0000                	c.unimp
	li tp, 0
  20:	0e44                	c.addi4spn	x9,x2,788
  22:	4420                	c.lw	x8,72(x8)
	li t0, 0
  24:	0188                	c.addi4spn	x10,x2,192
  26:	0c44                	c.addi4spn	x9,x2,532
	li t1, 0
  28:	0008                	0x8
  2a:	8002                	0x8002
	li t2, 0
  2c:	0cc8                	c.addi4spn	x10,x2,596
  2e:	2002                	c.fldsp	f0,0(x2)
	li s1, 0
  30:	0e44                	c.addi4spn	x9,x2,788
  32:	0000                	c.unimp
	li a0, 0
  34:	0028                	c.addi4spn	x10,x2,8
  36:	0000                	c.unimp
	li a1, 0
  38:	0000                	c.unimp
  3a:	0000                	c.unimp
	li a2, 0
  3c:	0148                	c.addi4spn	x10,x2,132
  3e:	0000                	c.unimp
	li a3, 0
  40:	0158                	c.addi4spn	x14,x2,132
  42:	0000                	c.unimp
	li a4, 0
  44:	0e44                	c.addi4spn	x9,x2,788
  46:	0180                	c.addi4spn	x8,x2,192
	li a5, 0
  48:	8148                	0x8148
  4a:	8801                	c.andi	x8,0
	li a6, 0
  4c:	4402                	c.lwsp	x8,0(x2)
  4e:	080c                	c.addi4spn	x11,x2,16
	li a7, 0
  50:	0300                	c.addi4spn	x8,x2,384
  52:	013c                	c.addi4spn	x15,x2,136
	li s2, 0
  54:	44c1                	c.li	x9,16
  56:	0cc8                	c.addi4spn	x10,x2,596
	li s3, 0
  58:	8002                	0x8002
  5a:	4401                	c.li	x8,0
	li s4, 0
  5c:	000e                	c.slli	x0,0x3
  5e:	0000                	c.unimp
	li s5, 0
  60:	0024                	c.addi4spn	x9,x2,8
  62:	0000                	c.unimp
	li s6, 0
  64:	0000                	c.unimp
  66:	0000                	c.unimp
	li s7, 0
  68:	02a0                	c.addi4spn	x8,x2,328
  6a:	0000                	c.unimp
	li s8, 0
  6c:	0170                	c.addi4spn	x12,x2,140
  6e:	0000                	c.unimp
	li s9, 0
  70:	0e44                	c.addi4spn	x9,x2,788
  72:	4840                	c.lw	x8,20(x8)
	li s10, 0
  74:	0181                	c.addi	x3,0
  76:	0288                	c.addi4spn	x10,x2,320
	li s11, 0
  78:	0c44                	c.addi4spn	x9,x2,532
  7a:	0008                	0x8
	li t3, 0
  7c:	c1015403          	lhu	x8,-1008(x2)
	li t4, 0
  80:	c844                	c.sw	x9,20(x8)
  82:	020c                	c.addi4spn	x11,x2,256
	li t5, 0
  84:	4440                	c.lw	x8,12(x8)
  86:	000e                	c.slli	x0,0x3
	li t6, 0
  88:	0024                	c.addi4spn	x9,x2,8
  8a:	0000                	c.unimp
	j main
  8c:	0000                	c.unimp
  8e:	0000                	c.unimp
  90:	0410                	c.addi4spn	x12,x2,512
  92:	0000                	c.unimp
  94:	0030                	c.addi4spn	x12,x2,8
  96:	0000                	c.unimp
  98:	0e44                	c.addi4spn	x9,x2,788
  9a:	4810                	c.lw	x12,16(x8)
  9c:	0181                	c.addi	x3,0
  9e:	0288                	c.addi4spn	x10,x2,320
	la sp, _sp
  a0:	0c44                	c.addi4spn	x9,x2,532
  a2:	0008                	0x8
  a4:	c154                	c.sw	x13,4(x10)
  a6:	c844                	c.sw	x9,20(x8)
	sw a0, -8(sp)
  a8:	020c                	c.addi4spn	x11,x2,256
  aa:	4410                	c.lw	x12,8(x8)
	nop
  ac:	000e                	c.slli	x0,0x3
	...
